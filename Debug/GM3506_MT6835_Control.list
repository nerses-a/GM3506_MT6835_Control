
GM3506_MT6835_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f30  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  08008040  08008040  00009040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b80  08008b80  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b80  08008b80  00009b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b88  08008b88  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b88  08008b88  00009b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b8c  08008b8c  00009b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d4  08008d64  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008d64  0000a54c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114e6  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002780  00000000  00000000  0001b6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3a  00000000  00000000  0001ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ad  00000000  00000000  0001fa62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a8a  00000000  00000000  0003900f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee52  00000000  00000000  0004ba99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  000da930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dfca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008028 	.word	0x08008028

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008028 	.word	0x08008028

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <fastSin>:
 */

#include "fast_sin.h"


float fastSin(float x) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

    // Нормализация x в диапазон [0, 2π)
    while (x < 0) x += FAST_SIN_TWO_PI;
 8001164:	e005      	b.n	8001172 <fastSin+0x16>
 8001166:	491c      	ldr	r1, [pc, #112]	@ (80011d8 <fastSin+0x7c>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fce3 	bl	8000b34 <__addsf3>
 800116e:	4603      	mov	r3, r0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	f04f 0100 	mov.w	r1, #0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff82 	bl	8001080 <__aeabi_fcmplt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f1      	bne.n	8001166 <fastSin+0xa>
    while (x >= FAST_SIN_TWO_PI) x -= FAST_SIN_TWO_PI;
 8001182:	e005      	b.n	8001190 <fastSin+0x34>
 8001184:	4914      	ldr	r1, [pc, #80]	@ (80011d8 <fastSin+0x7c>)
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fcd2 	bl	8000b30 <__aeabi_fsub>
 800118c:	4603      	mov	r3, r0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4911      	ldr	r1, [pc, #68]	@ (80011d8 <fastSin+0x7c>)
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff88 	bl	80010a8 <__aeabi_fcmpge>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f2      	bne.n	8001184 <fastSin+0x28>

    // Перевод угла в индекс
    int id_x = (int)(x * (FAST_SIN_TABLE_SIZE / FAST_SIN_TWO_PI) + 0.5f); // округление до ближайшего
 800119e:	490f      	ldr	r1, [pc, #60]	@ (80011dc <fastSin+0x80>)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fdcf 	bl	8000d44 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fcc1 	bl	8000b34 <__addsf3>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff8b 	bl	80010d0 <__aeabi_f2iz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	60fb      	str	r3, [r7, #12]
    if (id_x >= FAST_SIN_TABLE_SIZE) id_x = 0; // защита от переполнения
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2bff      	cmp	r3, #255	@ 0xff
 80011c2:	dd01      	ble.n	80011c8 <fastSin+0x6c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]

    return sin_table[id_x];
 80011c8:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <fastSin+0x84>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40c90fdb 	.word	0x40c90fdb
 80011dc:	4222f983 	.word	0x4222f983
 80011e0:	080083e4 	.word	0x080083e4

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f001 fd6b 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f8c5 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 faa1 	bl	8001738 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011f6:	f000 f907 	bl	8001408 <MX_SPI1_Init>
  MX_TIM1_Init();
 80011fa:	f000 f93b 	bl	8001474 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011fe:	f000 f9d7 	bl	80015b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001202:	f000 fa21 	bl	8001648 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001206:	f000 fa6d 	bl	80016e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 800120a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800120e:	f001 fdbb 	bl	8002d88 <HAL_Delay>

  if(MT6835_Initialize() != MT6835_OK) {
 8001212:	f000 fb59 	bl	80018c8 <MT6835_Initialize>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <main+0x3c>
      while(1);
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <main+0x38>
  }

#if 1
  printf("Инициализация GM3506\r\n");
 8001220:	4845      	ldr	r0, [pc, #276]	@ (8001338 <main+0x154>)
 8001222:	f004 ff89 	bl	8006138 <puts>
  float dt = Get_TIM3_Interrupt_Period(&htim3);
 8001226:	4845      	ldr	r0, [pc, #276]	@ (800133c <main+0x158>)
 8001228:	f000 fb96 	bl	8001958 <Get_TIM3_Interrupt_Period>
 800122c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  MotorControl_Init(&mc, 									// Указатель на  MotorControl_t
                    &(MotorHardware_t){                 	// Укзатель на аппартную часть
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <main+0x15c>)
 8001230:	f107 0414 	add.w	r4, r7, #20
 8001234:	461d      	mov	r5, r3
 8001236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800123e:	e884 0003 	stmia.w	r4, {r0, r1}
  MotorControl_Init(&mc, 									// Указатель на  MotorControl_t
 8001242:	f107 0114 	add.w	r1, r7, #20
 8001246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	230b      	movs	r3, #11
 8001258:	4a3a      	ldr	r2, [pc, #232]	@ (8001344 <main+0x160>)
 800125a:	483b      	ldr	r0, [pc, #236]	@ (8001348 <main+0x164>)
 800125c:	f000 fbb8 	bl	80019d0 <MotorControl_Init>

#endif

#if 1
 MotorControl_SetFocPosition(&mc, MOTOR_CONTROL_PI,
							&(PID_t){
 8001260:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <main+0x168>)
 8001262:	463c      	mov	r4, r7
 8001264:	461d      	mov	r5, r3
 8001266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	6023      	str	r3, [r4, #0]
 MotorControl_SetFocPosition(&mc, MOTOR_CONTROL_PI,
 800126e:	463b      	mov	r3, r7
 8001270:	461a      	mov	r2, r3
 8001272:	4937      	ldr	r1, [pc, #220]	@ (8001350 <main+0x16c>)
 8001274:	4834      	ldr	r0, [pc, #208]	@ (8001348 <main+0x164>)
 8001276:	f000 fc41 	bl	8001afc <MotorControl_SetFocPosition>
		  	  	  	  	  0.0);
#endif



  MotorControl_Enable(&mc); 								// Включаем двигатель
 800127a:	4833      	ldr	r0, [pc, #204]	@ (8001348 <main+0x164>)
 800127c:	f000 fbee 	bl	8001a5c <MotorControl_Enable>
  HAL_TIM_Base_Start_IT(&htim3); 							// запуск таймера с прерываниями
 8001280:	482e      	ldr	r0, [pc, #184]	@ (800133c <main+0x158>)
 8001282:	f002 fff7 	bl	8004274 <HAL_TIM_Base_Start_IT>

  printf("\t Запуск прерываний(Интервал: %f) \r\n", dt);
 8001286:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001288:	f7ff f8ce 	bl	8000428 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4830      	ldr	r0, [pc, #192]	@ (8001354 <main+0x170>)
 8001292:	f004 fee9 	bl	8006068 <iprintf>
  printf("\t ГОТОВО!\r\n\r\n");
 8001296:	4830      	ldr	r0, [pc, #192]	@ (8001358 <main+0x174>)
 8001298:	f004 ff4e 	bl	8006138 <puts>
//	  mc.foc.target_angle += 0.0174532925199433f;
//	  if(mc.foc.target_angle >= MOTOR_CONTROL_TWO_PI) mc.foc.target_angle -= MOTOR_CONTROL_TWO_PI;
//	  mc.foc.pid.integral = 0.0f;

#if 1
	  float angle = MT6835_ReadAngleDegrees(&sensor);
 800129c:	4829      	ldr	r0, [pc, #164]	@ (8001344 <main+0x160>)
 800129e:	f001 f941 	bl	8002524 <MT6835_ReadAngleDegrees>
 80012a2:	63b8      	str	r0, [r7, #56]	@ 0x38
	  printf("angle: %f;", angle);
 80012a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80012a6:	f7ff f8bf 	bl	8000428 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	482b      	ldr	r0, [pc, #172]	@ (800135c <main+0x178>)
 80012b0:	f004 feda 	bl	8006068 <iprintf>
#endif

#if 1
	  printf(" \t target_angle: %f ", mc.foc.target_angle * 57.2957795130823f);
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <main+0x164>)
 80012b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b8:	4929      	ldr	r1, [pc, #164]	@ (8001360 <main+0x17c>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd42 	bl	8000d44 <__aeabi_fmul>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8b0 	bl	8000428 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4825      	ldr	r0, [pc, #148]	@ (8001364 <main+0x180>)
 80012ce:	f004 fecb 	bl	8006068 <iprintf>

#endif

#if 1
	  float speed = MT6835_CalculateRotationSpeed(&sensor, 1e6, &htim2);
 80012d2:	4a25      	ldr	r2, [pc, #148]	@ (8001368 <main+0x184>)
 80012d4:	4925      	ldr	r1, [pc, #148]	@ (800136c <main+0x188>)
 80012d6:	481b      	ldr	r0, [pc, #108]	@ (8001344 <main+0x160>)
 80012d8:	f001 f94a 	bl	8002570 <MT6835_CalculateRotationSpeed>
 80012dc:	6378      	str	r0, [r7, #52]	@ 0x34
	  float filter_speed = MovingAverage_FilterSpeed(speed);
 80012de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012e0:	f001 fa18 	bl	8002714 <MovingAverage_FilterSpeed>
 80012e4:	6338      	str	r0, [r7, #48]	@ 0x30
	  printf(" \t speed: %f; \t avg_speed: %f", speed, filter_speed);
 80012e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012e8:	f7ff f89e 	bl	8000428 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012f2:	f7ff f899 	bl	8000428 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2300 	strd	r2, r3, [sp]
 80012fe:	4622      	mov	r2, r4
 8001300:	462b      	mov	r3, r5
 8001302:	481b      	ldr	r0, [pc, #108]	@ (8001370 <main+0x18c>)
 8001304:	f004 feb0 	bl	8006068 <iprintf>
#endif

#if 1
	  uint8_t status = MT6835_CheckStatus(&sensor);
 8001308:	480e      	ldr	r0, [pc, #56]	@ (8001344 <main+0x160>)
 800130a:	f001 f84f 	bl	80023ac <MT6835_CheckStatus>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  printf(" \t status: %u", status);
 8001314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001318:	4619      	mov	r1, r3
 800131a:	4816      	ldr	r0, [pc, #88]	@ (8001374 <main+0x190>)
 800131c:	f004 fea4 	bl	8006068 <iprintf>
#endif

#if 1
	  printf("\r\n");
 8001320:	4815      	ldr	r0, [pc, #84]	@ (8001378 <main+0x194>)
 8001322:	f004 ff09 	bl	8006138 <puts>
	  HAL_Delay(99);
 8001326:	2063      	movs	r0, #99	@ 0x63
 8001328:	f001 fd2e 	bl	8002d88 <HAL_Delay>
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	@ 0x64
 800132e:	f001 fd2b 	bl	8002d88 <HAL_Delay>
  {
 8001332:	bf00      	nop
 8001334:	e7b2      	b.n	800129c <main+0xb8>
 8001336:	bf00      	nop
 8001338:	08008040 	.word	0x08008040
 800133c:	200002d8 	.word	0x200002d8
 8001340:	08008110 	.word	0x08008110
 8001344:	20000368 	.word	0x20000368
 8001348:	2000037c 	.word	0x2000037c
 800134c:	08008128 	.word	0x08008128
 8001350:	40490fdb 	.word	0x40490fdb
 8001354:	08008064 	.word	0x08008064
 8001358:	080080a4 	.word	0x080080a4
 800135c:	080080b8 	.word	0x080080b8
 8001360:	42652ee1 	.word	0x42652ee1
 8001364:	080080c4 	.word	0x080080c4
 8001368:	20000290 	.word	0x20000290
 800136c:	000f4240 	.word	0x000f4240
 8001370:	080080dc 	.word	0x080080dc
 8001374:	080080fc 	.word	0x080080fc
 8001378:	0800810c 	.word	0x0800810c

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	@ 0x40
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	2228      	movs	r2, #40	@ 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 ffb4 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013a2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 ffc5 	bl	8003354 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013d0:	f000 faf8 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2302      	movs	r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fa32 	bl	8003858 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013fa:	f000 fae3 	bl	80019c4 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	@ 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_SPI1_Init+0x64>)
 800140e:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <MX_SPI1_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI1_Init+0x64>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPI1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_SPI1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPI1_Init+0x64>)
 8001428:	2202      	movs	r2, #2
 800142a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI1_Init+0x64>)
 800142e:	2201      	movs	r2, #1
 8001430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPI1_Init+0x64>)
 8001434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_SPI1_Init+0x64>)
 800143c:	2218      	movs	r2, #24
 800143e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_SPI1_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPI1_Init+0x64>)
 8001454:	220a      	movs	r2, #10
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_SPI1_Init+0x64>)
 800145a:	f002 fb8b 	bl	8003b74 <HAL_SPI_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001464:	f000 faae 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001f0 	.word	0x200001f0
 8001470:	40013000 	.word	0x40013000

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b092      	sub	sp, #72	@ 0x48
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2220      	movs	r2, #32
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 ff2a 	bl	80062f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014a6:	4a41      	ldr	r2, [pc, #260]	@ (80015ac <MX_TIM1_Init+0x138>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2399;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014b8:	f640 125f 	movw	r2, #2399	@ 0x95f
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014cc:	2280      	movs	r2, #128	@ 0x80
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d0:	4835      	ldr	r0, [pc, #212]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014d2:	f002 ff21 	bl	8004318 <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014dc:	f000 fa72 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014ec:	4619      	mov	r1, r3
 80014ee:	482e      	ldr	r0, [pc, #184]	@ (80015a8 <MX_TIM1_Init+0x134>)
 80014f0:	f003 fdb6 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014fa:	f000 fa63 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fe:	2360      	movs	r3, #96	@ 0x60
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	2204      	movs	r2, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4821      	ldr	r0, [pc, #132]	@ (80015a8 <MX_TIM1_Init+0x134>)
 8001524:	f003 f93e 	bl	80047a4 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800152e:	f000 fa49 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	2208      	movs	r2, #8
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	@ (80015a8 <MX_TIM1_Init+0x134>)
 800153c:	f003 f932 	bl	80047a4 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001546:	f000 fa3d 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	220c      	movs	r2, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <MX_TIM1_Init+0x134>)
 8001554:	f003 f926 	bl	80047a4 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800155e:	f000 fa31 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001562:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800157e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001582:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_TIM1_Init+0x134>)
 800158a:	f003 fdc7 	bl	800511c <HAL_TIMEx_ConfigBreakDeadTime>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001594:	f000 fa16 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_TIM1_Init+0x134>)
 800159a:	f001 f9eb 	bl	8002974 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3748      	adds	r7, #72	@ 0x48
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000248 	.word	0x20000248
 80015ac:	40012c00 	.word	0x40012c00

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015d6:	2247      	movs	r2, #71	@ 0x47
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f4:	4813      	ldr	r0, [pc, #76]	@ (8001644 <MX_TIM2_Init+0x94>)
 80015f6:	f002 fda4 	bl	8004142 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001600:	f000 f9e0 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_TIM2_Init+0x94>)
 8001612:	f003 f989 	bl	8004928 <HAL_TIM_ConfigClockSource>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800161c:	f000 f9d2 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_TIM2_Init+0x94>)
 800162e:	f003 fd17 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001638:	f000 f9c4 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000290 	.word	0x20000290

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <MX_TIM3_Init+0x94>)
 8001666:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <MX_TIM3_Init+0x98>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_TIM3_Init+0x94>)
 800166c:	2247      	movs	r2, #71	@ 0x47
 800166e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_TIM3_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 749;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_TIM3_Init+0x94>)
 8001678:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800167c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_TIM3_Init+0x94>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <MX_TIM3_Init+0x94>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800168a:	4814      	ldr	r0, [pc, #80]	@ (80016dc <MX_TIM3_Init+0x94>)
 800168c:	f002 fd59 	bl	8004142 <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001696:	f000 f995 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_TIM3_Init+0x94>)
 80016a8:	f003 f93e 	bl	8004928 <HAL_TIM_ConfigClockSource>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 f987 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_TIM3_Init+0x94>)
 80016c4:	f003 fccc 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016ce:	f000 f979 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002d8 	.word	0x200002d8
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <MX_USART2_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_USART2_UART_Init+0x4c>)
 800171c:	f003 fd61 	bl	80051e2 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f000 f94d 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000320 	.word	0x20000320
 8001734:	40004400 	.word	0x40004400

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <MX_GPIO_Init+0x110>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a3d      	ldr	r2, [pc, #244]	@ (8001848 <MX_GPIO_Init+0x110>)
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <MX_GPIO_Init+0x110>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <MX_GPIO_Init+0x110>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a37      	ldr	r2, [pc, #220]	@ (8001848 <MX_GPIO_Init+0x110>)
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <MX_GPIO_Init+0x110>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <MX_GPIO_Init+0x110>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a31      	ldr	r2, [pc, #196]	@ (8001848 <MX_GPIO_Init+0x110>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <MX_GPIO_Init+0x110>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	4b2c      	ldr	r3, [pc, #176]	@ (8001848 <MX_GPIO_Init+0x110>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a2b      	ldr	r2, [pc, #172]	@ (8001848 <MX_GPIO_Init+0x110>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b29      	ldr	r3, [pc, #164]	@ (8001848 <MX_GPIO_Init+0x110>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAL_EN_MT6835_GPIO_Port, CAL_EN_MT6835_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	4826      	ldr	r0, [pc, #152]	@ (800184c <MX_GPIO_Init+0x114>)
 80017b2:	f001 fd9f 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_GM3506_Pin|CSN_MT6835_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2160      	movs	r1, #96	@ 0x60
 80017ba:	4825      	ldr	r0, [pc, #148]	@ (8001850 <MX_GPIO_Init+0x118>)
 80017bc:	f001 fd9a 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <MX_GPIO_Init+0x11c>)
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	481d      	ldr	r0, [pc, #116]	@ (800184c <MX_GPIO_Init+0x114>)
 80017d6:	f001 fc09 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL_EN_MT6835_Pin */
  GPIO_InitStruct.Pin = CAL_EN_MT6835_Pin;
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL_EN_MT6835_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4816      	ldr	r0, [pc, #88]	@ (800184c <MX_GPIO_Init+0x114>)
 80017f2:	f001 fbfb 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_GM3506_Pin */
  GPIO_InitStruct.Pin = EN_GM3506_Pin;
 80017f6:	2320      	movs	r3, #32
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2302      	movs	r3, #2
 8001804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GM3506_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4619      	mov	r1, r3
 800180c:	4810      	ldr	r0, [pc, #64]	@ (8001850 <MX_GPIO_Init+0x118>)
 800180e:	f001 fbed 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_MT6835_Pin */
  GPIO_InitStruct.Pin = CSN_MT6835_Pin;
 8001812:	2340      	movs	r3, #64	@ 0x40
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_MT6835_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <MX_GPIO_Init+0x118>)
 800182a:	f001 fbdf 	bl	8002fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2028      	movs	r0, #40	@ 0x28
 8001834:	f001 fba3 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001838:	2028      	movs	r0, #40	@ 0x28
 800183a:	f001 fbbc 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40011000 	.word	0x40011000
 8001850:	40010c00 	.word	0x40010c00
 8001854:	10110000 	.word	0x10110000

08001858 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001860:	1d39      	adds	r1, r7, #4
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	2201      	movs	r2, #1
 8001868:	4803      	ldr	r0, [pc, #12]	@ (8001878 <__io_putchar+0x20>)
 800186a:	f003 fd0a 	bl	8005282 <HAL_UART_Transmit>
    return ch;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000320 	.word	0x20000320

0800187c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
#if 1

	if (htim == &htim3) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d102      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotorControl_Process(&mc);
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800188e:	f000 fa49 	bl	8001d24 <MotorControl_Process>
		//MotorControl_FOC_Torque_Process(&mc);
		//MotorControl_FOC_Position_Process(&mc);
	  }
#endif

}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002d8 	.word	0x200002d8
 80018a0:	2000037c 	.word	0x2000037c

080018a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
#if 1
  if (GPIO_Pin == B1_Pin)
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_EXTI_Callback+0x18>
  {
	  MotorControl_Disable(&mc);
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <HAL_GPIO_EXTI_Callback+0x20>)
 80018b8:	f000 f8f8 	bl	8001aac <MotorControl_Disable>

  }
#endif
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000037c 	.word	0x2000037c

080018c8 <MT6835_Initialize>:



int MT6835_Initialize(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af02      	add	r7, sp, #8
    printf("Иницализация датчика mt6845 \r\n");
 80018ce:	4818      	ldr	r0, [pc, #96]	@ (8001930 <MT6835_Initialize+0x68>)
 80018d0:	f004 fc32 	bl	8006138 <puts>

    HAL_TIM_Base_Start(&htim2);
 80018d4:	4817      	ldr	r0, [pc, #92]	@ (8001934 <MT6835_Initialize+0x6c>)
 80018d6:	f002 fc83 	bl	80041e0 <HAL_TIM_Base_Start>
    printf("\t Таймер TIM2 запущен \r\n");
 80018da:	4817      	ldr	r0, [pc, #92]	@ (8001938 <MT6835_Initialize+0x70>)
 80018dc:	f004 fc2c 	bl	8006138 <puts>

    if(MT6835_Init(&sensor, &hspi1, CSN_MT6835_GPIO_Port, CSN_MT6835_Pin,
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <MT6835_Initialize+0x74>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2340      	movs	r3, #64	@ 0x40
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <MT6835_Initialize+0x78>)
 80018ec:	4915      	ldr	r1, [pc, #84]	@ (8001944 <MT6835_Initialize+0x7c>)
 80018ee:	4816      	ldr	r0, [pc, #88]	@ (8001948 <MT6835_Initialize+0x80>)
 80018f0:	f000 fc9a 	bl	8002228 <MT6835_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d111      	bne.n	800191e <MT6835_Initialize+0x56>
              CAL_EN_MT6835_GPIO_Port, CAL_EN_MT6835_Pin) == MT6835_OK) {
        printf("\t заполнены данные структуры + заддержка 2 сек \r\n");
 80018fa:	4814      	ldr	r0, [pc, #80]	@ (800194c <MT6835_Initialize+0x84>)
 80018fc:	f004 fc1c 	bl	8006138 <puts>
    } else {
        printf("Ошибка иницилизации mt6835 \r\n");
        return MT6835_ERROR;
    }

    HAL_Delay(2000);
 8001900:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001904:	f001 fa40 	bl	8002d88 <HAL_Delay>
    MT6835_SetZeroTemporary(&sensor);
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <MT6835_Initialize+0x80>)
 800190a:	f000 fd67 	bl	80023dc <MT6835_SetZeroTemporary>
    MT6835_ReadAngleDegrees(&sensor);
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <MT6835_Initialize+0x80>)
 8001910:	f000 fe08 	bl	8002524 <MT6835_ReadAngleDegrees>
    printf("\t ГОТОВО!\r\n\r\n");
 8001914:	480e      	ldr	r0, [pc, #56]	@ (8001950 <MT6835_Initialize+0x88>)
 8001916:	f004 fc0f 	bl	8006138 <puts>

    return MT6835_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e004      	b.n	8001928 <MT6835_Initialize+0x60>
        printf("Ошибка иницилизации mt6835 \r\n");
 800191e:	480d      	ldr	r0, [pc, #52]	@ (8001954 <MT6835_Initialize+0x8c>)
 8001920:	f004 fc0a 	bl	8006138 <puts>
        return MT6835_ERROR;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	0800813c 	.word	0x0800813c
 8001934:	20000290 	.word	0x20000290
 8001938:	08008170 	.word	0x08008170
 800193c:	40011000 	.word	0x40011000
 8001940:	40010c00 	.word	0x40010c00
 8001944:	200001f0 	.word	0x200001f0
 8001948:	20000368 	.word	0x20000368
 800194c:	08008198 	.word	0x08008198
 8001950:	080080a4 	.word	0x080080a4
 8001954:	080081f0 	.word	0x080081f0

08001958 <Get_TIM3_Interrupt_Period>:

// Возвращает период прерывания в секундах
float Get_TIM3_Interrupt_Period(TIM_HandleTypeDef *htim) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    uint32_t tim_clk = HAL_RCC_GetPCLK1Freq();
 8001960:	f002 f8c2 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8001964:	60f8      	str	r0, [r7, #12]
    if(RCC->CFGR & RCC_CFGR_PPRE1_2) { // Проверка делителя APB1
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <Get_TIM3_Interrupt_Period+0x68>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <Get_TIM3_Interrupt_Period+0x20>
        tim_clk *= 2;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
    }
    return (float)(htim->Instance->ARR + 1) *
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	3301      	adds	r3, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f987 	bl	8000c94 <__aeabi_ui2f>
 8001986:	4604      	mov	r4, r0
           (htim->Instance->PSC + 1) /
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	3301      	adds	r3, #1
    return (float)(htim->Instance->ARR + 1) *
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f97f 	bl	8000c94 <__aeabi_ui2f>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff f9d2 	bl	8000d44 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461c      	mov	r4, r3
           (float)tim_clk;
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff f975 	bl	8000c94 <__aeabi_ui2f>
 80019aa:	4603      	mov	r3, r0
           (htim->Instance->PSC + 1) /
 80019ac:	4619      	mov	r1, r3
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff fa7c 	bl	8000eac <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <Error_Handler+0x8>

080019d0 <MotorControl_Init>:
                       MT6835_Sensor_t    *sensor,
                       uint8_t             pole_pairs,
					   uint32_t            calib_delay,
                       float               calib_voltage,
                       float               delta_time)
{
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	70fb      	strb	r3, [r7, #3]
    // Аппаратная часть
    mc->hw            = *hw;            // Копируем конфиг таймеров/пинов
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4614      	mov	r4, r2
 80019e4:	461d      	mov	r5, r3
 80019e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019ee:	e884 0003 	stmia.w	r4, {r0, r1}
    mc->sensor        = sensor;         // Указываем связанный энкодер
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
    mc->pole_pairs    = pole_pairs;     // Пара пар полюсов
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	771a      	strb	r2, [r3, #28]
    mc->delta_time    = delta_time;     // Интервал обновления [с]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a02:	621a      	str	r2, [r3, #32]
    mc->voltage_limit = 0.0f;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    mc->mode          = MODE_IDLE;      // Режим по умолчанию
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    // Open-loop: обнуляем параметры
    mc->open_loop.max_accel    = 0.0f;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    mc->open_loop.target_speed = 0.0f;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34
    mc->open_loop.mech_speed   = 0.0f;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    mc->angle_elec      = 0.0f;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28

    // FOC: обнуляем параметры
    mc->foc.foc_torque      = 0.0f;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    mc->foc.target_angle    = 0.0f;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
    mc->foc.pid = MOTOR_CONTROL_NULL;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	649a      	str	r2, [r3, #72]	@ 0x48

   // калибровка для FOC
    MotorFOC_Calibrate(mc, calib_delay, calib_voltage);
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f9e6 	bl	8001e20 <MotorFOC_Calibrate>
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}

08001a5c <MotorControl_Enable>:

// Включение двигателя
void MotorControl_Enable(MotorControl_t *mc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(mc->hw.en_port, mc->hw.en_pin, GPIO_PIN_SET);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6918      	ldr	r0, [r3, #16]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8a9b      	ldrh	r3, [r3, #20]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f001 fc40 	bl	80032f4 <HAL_GPIO_WritePin>

    HAL_TIM_PWM_Start(mc->hw.htim, mc->hw.channelA);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f002 fc9a 	bl	80043b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(mc->hw.htim, mc->hw.channelB);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f002 fc92 	bl	80043b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(mc->hw.htim, mc->hw.channelC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f002 fc8a 	bl	80043b8 <HAL_TIM_PWM_Start>

}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <MotorControl_Disable>:

// Выключение двигателя
void MotorControl_Disable(MotorControl_t *mc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(mc->hw.en_port, mc->hw.en_pin, GPIO_PIN_RESET);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6918      	ldr	r0, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a9b      	ldrh	r3, [r3, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f001 fc18 	bl	80032f4 <HAL_GPIO_WritePin>

    HAL_TIM_PWM_Stop(mc->hw.htim, mc->hw.channelA);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f002 fd14 	bl	80044fc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(mc->hw.htim, mc->hw.channelB);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f002 fd0c 	bl	80044fc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(mc->hw.htim, mc->hw.channelC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f002 fd04 	bl	80044fc <HAL_TIM_PWM_Stop>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <MotorControl_SetFocPosition>:
    mc->mode              = MODE_FOC_TORQUE;
}

// Установка FOC Position режима с параметрами
void MotorControl_SetFocPosition(MotorControl_t *mc, float target_angle, PID_t* pid)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
    mc->foc.target_angle  = target_angle;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    mc->foc.pid           = pid;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	649a      	str	r2, [r3, #72]	@ 0x48
    mc->mode              = MODE_FOC_POSITION;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2203      	movs	r2, #3
 8001b18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    mc->foc.pid->integral  = 0.0f;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    mc->foc.pid->prev_error = 0.0f;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
	...

08001b3c <MotorControl_SetPhasePWM>:


void MotorControl_SetPhasePWM(MotorHardware_t *hw, float voltage, float angle)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b08d      	sub	sp, #52	@ 0x34
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]

	 // Генерация трехфазного сигнала
	 float ua = voltage * fastSin(angle);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fb07 	bl	800115c <fastSin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f7ff f8f6 	bl	8000d44 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 float ub = voltage * fastSin(angle + MOTOR_CONTROL_TWO_PI_OVER_3);
 8001b5c:	4970      	ldr	r1, [pc, #448]	@ (8001d20 <MotorControl_SetPhasePWM+0x1e4>)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe ffe8 	bl	8000b34 <__addsf3>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff faf8 	bl	800115c <fastSin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f7ff f8e7 	bl	8000d44 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
	 float uc = voltage * fastSin(angle - MOTOR_CONTROL_TWO_PI_OVER_3);
 8001b7a:	4969      	ldr	r1, [pc, #420]	@ (8001d20 <MotorControl_SetPhasePWM+0x1e4>)
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7fe ffd7 	bl	8000b30 <__aeabi_fsub>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fae9 	bl	800115c <fastSin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f7ff f8d8 	bl	8000d44 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24

	 // Преобразование в регистры сравнения
	 uint32_t period = hw->htim->Init.Period + 1;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
	 uint32_t cmpA   = (uint32_t)((ua * 0.5f + 0.5f) * period);
 8001ba2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ba8:	f7ff f8cc 	bl	8000d44 <__aeabi_fmul>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ffbe 	bl	8000b34 <__addsf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461c      	mov	r4, r3
 8001bbc:	6a38      	ldr	r0, [r7, #32]
 8001bbe:	f7ff f869 	bl	8000c94 <__aeabi_ui2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff f8bc 	bl	8000d44 <__aeabi_fmul>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff faa4 	bl	800111c <__aeabi_f2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	61fb      	str	r3, [r7, #28]
	 uint32_t cmpB   = (uint32_t)((ub * 0.5f + 0.5f) * period);
 8001bd8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bde:	f7ff f8b1 	bl	8000d44 <__aeabi_fmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ffa3 	bl	8000b34 <__addsf3>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461c      	mov	r4, r3
 8001bf2:	6a38      	ldr	r0, [r7, #32]
 8001bf4:	f7ff f84e 	bl	8000c94 <__aeabi_ui2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff f8a1 	bl	8000d44 <__aeabi_fmul>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fa89 	bl	800111c <__aeabi_f2uiz>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	61bb      	str	r3, [r7, #24]
	 uint32_t cmpC   = (uint32_t)((uc * 0.5f + 0.5f) * period);
 8001c0e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c14:	f7ff f896 	bl	8000d44 <__aeabi_fmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe ff88 	bl	8000b34 <__addsf3>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461c      	mov	r4, r3
 8001c28:	6a38      	ldr	r0, [r7, #32]
 8001c2a:	f7ff f833 	bl	8000c94 <__aeabi_ui2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff f886 	bl	8000d44 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa6e 	bl	800111c <__aeabi_f2uiz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	617b      	str	r3, [r7, #20]


	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelA, cmpA);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <MotorControl_SetPhasePWM+0x11c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c56:	e018      	b.n	8001c8a <MotorControl_SetPhasePWM+0x14e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d105      	bne.n	8001c6c <MotorControl_SetPhasePWM+0x130>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c6a:	e00e      	b.n	8001c8a <MotorControl_SetPhasePWM+0x14e>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d105      	bne.n	8001c80 <MotorControl_SetPhasePWM+0x144>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c7e:	e004      	b.n	8001c8a <MotorControl_SetPhasePWM+0x14e>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelB, cmpB);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <MotorControl_SetPhasePWM+0x162>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c9c:	e018      	b.n	8001cd0 <MotorControl_SetPhasePWM+0x194>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d105      	bne.n	8001cb2 <MotorControl_SetPhasePWM+0x176>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cb0:	e00e      	b.n	8001cd0 <MotorControl_SetPhasePWM+0x194>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d105      	bne.n	8001cc6 <MotorControl_SetPhasePWM+0x18a>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cc4:	e004      	b.n	8001cd0 <MotorControl_SetPhasePWM+0x194>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelC, cmpC);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <MotorControl_SetPhasePWM+0x1a8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ce2:	e018      	b.n	8001d16 <MotorControl_SetPhasePWM+0x1da>
	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelC, cmpC);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d105      	bne.n	8001cf8 <MotorControl_SetPhasePWM+0x1bc>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001cf6:	e00e      	b.n	8001d16 <MotorControl_SetPhasePWM+0x1da>
	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelC, cmpC);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d105      	bne.n	8001d0c <MotorControl_SetPhasePWM+0x1d0>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d0a:	e004      	b.n	8001d16 <MotorControl_SetPhasePWM+0x1da>
	 __HAL_TIM_SET_COMPARE(hw->htim, hw->channelC, cmpC);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d16:	bf00      	nop
 8001d18:	3734      	adds	r7, #52	@ 0x34
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40060a92 	.word	0x40060a92

08001d24 <MotorControl_Process>:

void MotorControl_Process(MotorControl_t *mc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if(mc->mode == MODE_OPEN_LOOP_SPEED) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d103      	bne.n	8001d3e <MotorControl_Process+0x1a>
		MotorControl_OpenLoop_Process(mc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f9d4 	bl	80020e4 <MotorControl_OpenLoop_Process>
 8001d3c:	e01b      	b.n	8001d76 <MotorControl_Process+0x52>
	} else if(mc->mode == MODE_FOC_TORQUE) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d103      	bne.n	8001d50 <MotorControl_Process+0x2c>
		MotorControl_FOC_Torque_Process(mc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8a3 	bl	8001e94 <MotorControl_FOC_Torque_Process>
 8001d4e:	e012      	b.n	8001d76 <MotorControl_Process+0x52>
	} else if(mc->mode == MODE_FOC_POSITION) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d10d      	bne.n	8001d76 <MotorControl_Process+0x52>
		MotorControl_FOC_Position_Process(mc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8ca 	bl	8001ef4 <MotorControl_FOC_Position_Process>
	}

    while (mc->angle_elec >= MOTOR_CONTROL_TWO_PI) mc->angle_elec -= MOTOR_CONTROL_TWO_PI;
 8001d60:	e009      	b.n	8001d76 <MotorControl_Process+0x52>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	4919      	ldr	r1, [pc, #100]	@ (8001dcc <MotorControl_Process+0xa8>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fee1 	bl	8000b30 <__aeabi_fsub>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	4914      	ldr	r1, [pc, #80]	@ (8001dcc <MotorControl_Process+0xa8>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f993 	bl	80010a8 <__aeabi_fcmpge>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ec      	bne.n	8001d62 <MotorControl_Process+0x3e>
    while (mc->angle_elec < 0.0f) mc->angle_elec += MOTOR_CONTROL_TWO_PI;
 8001d88:	e009      	b.n	8001d9e <MotorControl_Process+0x7a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	490f      	ldr	r1, [pc, #60]	@ (8001dcc <MotorControl_Process+0xa8>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fecf 	bl	8000b34 <__addsf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f96a 	bl	8001080 <__aeabi_fcmplt>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1eb      	bne.n	8001d8a <MotorControl_Process+0x66>

    MotorControl_SetPhasePWM(&mc->hw, mc->voltage_limit, mc->angle_elec);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f7ff febd 	bl	8001b3c <MotorControl_SetPhasePWM>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40c90fdb 	.word	0x40c90fdb

08001dd0 <MotorControl_NormalizeAngle>:
#include "motor_control.h"
#include "mt6835.h"
#include "fast_sin.h"

static inline float MotorControl_NormalizeAngle(float angle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    while (angle >= MOTOR_CONTROL_TWO_PI) angle -= MOTOR_CONTROL_TWO_PI;
 8001dd8:	e005      	b.n	8001de6 <MotorControl_NormalizeAngle+0x16>
 8001dda:	4910      	ldr	r1, [pc, #64]	@ (8001e1c <MotorControl_NormalizeAngle+0x4c>)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fea7 	bl	8000b30 <__aeabi_fsub>
 8001de2:	4603      	mov	r3, r0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <MotorControl_NormalizeAngle+0x4c>)
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff f95d 	bl	80010a8 <__aeabi_fcmpge>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f2      	bne.n	8001dda <MotorControl_NormalizeAngle+0xa>
    while (angle < 0.0f)    angle += MOTOR_CONTROL_TWO_PI;
 8001df4:	e005      	b.n	8001e02 <MotorControl_NormalizeAngle+0x32>
 8001df6:	4909      	ldr	r1, [pc, #36]	@ (8001e1c <MotorControl_NormalizeAngle+0x4c>)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7fe fe9b 	bl	8000b34 <__addsf3>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff f93a 	bl	8001080 <__aeabi_fcmplt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f1      	bne.n	8001df6 <MotorControl_NormalizeAngle+0x26>
    return angle;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40c90fdb 	.word	0x40c90fdb

08001e20 <MotorFOC_Calibrate>:

void MotorFOC_Calibrate(MotorControl_t *mc, uint32_t calib_delay, float calib_voltage)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]

	MotorControl_Enable(mc);
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff fe15 	bl	8001a5c <MotorControl_Enable>

	MotorControl_SetPhasePWM(&(mc->hw), calib_voltage, 0.0f);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe7e 	bl	8001b3c <MotorControl_SetPhasePWM>

	HAL_Delay(calib_delay);
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f000 ffa1 	bl	8002d88 <HAL_Delay>

	float theta_mech = MT6835_ReadAngle(mc->sensor);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fb30 	bl	80024b0 <MT6835_ReadAngle>
 8001e50:	6178      	str	r0, [r7, #20]
	float theta_e_meas = 0.0f - theta_mech * mc->pole_pairs;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	7f1b      	ldrb	r3, [r3, #28]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff20 	bl	8000c9c <__aeabi_i2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ff6f 	bl	8000d44 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f7fe fe5f 	bl	8000b30 <__aeabi_fsub>
 8001e72:	4603      	mov	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]
	theta_e_meas = MotorControl_NormalizeAngle(theta_e_meas);
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f7ff ffaa 	bl	8001dd0 <MotorControl_NormalizeAngle>
 8001e7c:	6138      	str	r0, [r7, #16]
	mc->foc.offset_angle = theta_e_meas;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	63da      	str	r2, [r3, #60]	@ 0x3c

	MotorControl_Disable(mc);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7ff fe11 	bl	8001aac <MotorControl_Disable>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <MotorControl_FOC_Torque_Process>:


void MotorControl_FOC_Torque_Process(MotorControl_t *mc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    float mech  = MT6835_ReadAngle(mc->sensor);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fb05 	bl	80024b0 <MT6835_ReadAngle>
 8001ea6:	60f8      	str	r0, [r7, #12]
    float elec  = mech * mc->pole_pairs + MOTOR_CONTROL_PI_2 + mc->foc.offset_angle;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7f1b      	ldrb	r3, [r3, #28]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fef5 	bl	8000c9c <__aeabi_i2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe ff44 	bl	8000d44 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	490c      	ldr	r1, [pc, #48]	@ (8001ef0 <MotorControl_FOC_Torque_Process+0x5c>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fe37 	bl	8000b34 <__addsf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f7fe fe2f 	bl	8000b34 <__addsf3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60bb      	str	r3, [r7, #8]
    mc->angle_elec = MotorControl_NormalizeAngle(elec);
 8001eda:	68b8      	ldr	r0, [r7, #8]
 8001edc:	f7ff ff78 	bl	8001dd0 <MotorControl_NormalizeAngle>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	3fc90fdb 	.word	0x3fc90fdb

08001ef4 <MotorControl_FOC_Position_Process>:


void MotorControl_FOC_Position_Process(MotorControl_t *mc)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	// Механический угол
	float mech = MT6835_ReadAngle(mc->sensor);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fad5 	bl	80024b0 <MT6835_ReadAngle>
 8001f06:	61f8      	str	r0, [r7, #28]

    // Ошибка в диапазоне [-π, +π]
    float delta = mc->foc.target_angle - mech;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	69f9      	ldr	r1, [r7, #28]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fe0e 	bl	8000b30 <__aeabi_fsub>
 8001f14:	4603      	mov	r3, r0
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    if (delta >  MOTOR_CONTROL_PI)  delta -= MOTOR_CONTROL_TWO_PI;
 8001f18:	496c      	ldr	r1, [pc, #432]	@ (80020cc <MotorControl_FOC_Position_Process+0x1d8>)
 8001f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f1c:	f7ff f8ce 	bl	80010bc <__aeabi_fcmpgt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <MotorControl_FOC_Position_Process+0x40>
 8001f26:	496a      	ldr	r1, [pc, #424]	@ (80020d0 <MotorControl_FOC_Position_Process+0x1dc>)
 8001f28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f2a:	f7fe fe01 	bl	8000b30 <__aeabi_fsub>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	e00c      	b.n	8001f4e <MotorControl_FOC_Position_Process+0x5a>
    else if (delta < -MOTOR_CONTROL_PI) delta += MOTOR_CONTROL_TWO_PI;
 8001f34:	4967      	ldr	r1, [pc, #412]	@ (80020d4 <MotorControl_FOC_Position_Process+0x1e0>)
 8001f36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f38:	f7ff f8a2 	bl	8001080 <__aeabi_fcmplt>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <MotorControl_FOC_Position_Process+0x5a>
 8001f42:	4963      	ldr	r1, [pc, #396]	@ (80020d0 <MotorControl_FOC_Position_Process+0x1dc>)
 8001f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f46:	f7fe fdf5 	bl	8000b34 <__addsf3>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24

    // P-компонента
    float Pout = mc->foc.pid->kp * delta;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f58:	f7fe fef4 	bl	8000d44 <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]

    // I-компонента
    mc->foc.pid->integral += mc->foc.pid->ki * delta * mc->delta_time;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f64:	68dd      	ldr	r5, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fee8 	bl	8000d44 <__aeabi_fmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7fe fee0 	bl	8000d44 <__aeabi_fmul>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f7fe fdd0 	bl	8000b34 <__addsf3>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60e3      	str	r3, [r4, #12]
    if (mc->foc.pid->integral > 1.0f)  mc->foc.pid->integral = 1.0f;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f88a 	bl	80010bc <__aeabi_fcmpgt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <MotorControl_FOC_Position_Process+0xc6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	e00d      	b.n	8001fd6 <MotorControl_FOC_Position_Process+0xe2>
    else if (mc->foc.pid->integral < -1.0f) mc->foc.pid->integral = -1.0f;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4945      	ldr	r1, [pc, #276]	@ (80020d8 <MotorControl_FOC_Position_Process+0x1e4>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f85c 	bl	8001080 <__aeabi_fcmplt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <MotorControl_FOC_Position_Process+0xe2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd2:	4a41      	ldr	r2, [pc, #260]	@ (80020d8 <MotorControl_FOC_Position_Process+0x1e4>)
 8001fd4:	60da      	str	r2, [r3, #12]

    // D-компонента
    float derivative = (delta - mc->foc.pid->prev_error) / mc->delta_time;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fe0:	f7fe fda6 	bl	8000b30 <__aeabi_fsub>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f7fe ff5c 	bl	8000eac <__aeabi_fdiv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	617b      	str	r3, [r7, #20]
    float Dout       = mc->foc.pid->kd * derivative;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4619      	mov	r1, r3
 8002000:	6978      	ldr	r0, [r7, #20]
 8002002:	f7fe fe9f 	bl	8000d44 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	613b      	str	r3, [r7, #16]
    mc->foc.pid->prev_error = delta;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002010:	611a      	str	r2, [r3, #16]


    float voltage = Pout + mc->foc.pid->integral + Dout;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fd8a 	bl	8000b34 <__addsf3>
 8002020:	4603      	mov	r3, r0
 8002022:	4619      	mov	r1, r3
 8002024:	6938      	ldr	r0, [r7, #16]
 8002026:	f7fe fd85 	bl	8000b34 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	623b      	str	r3, [r7, #32]

    if (voltage >  1.0f) voltage =  1.0f;
 800202e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002032:	6a38      	ldr	r0, [r7, #32]
 8002034:	f7ff f842 	bl	80010bc <__aeabi_fcmpgt>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <MotorControl_FOC_Position_Process+0x150>
 800203e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002042:	623b      	str	r3, [r7, #32]
    if (voltage < -1.0f) voltage = -1.0f;
 8002044:	4924      	ldr	r1, [pc, #144]	@ (80020d8 <MotorControl_FOC_Position_Process+0x1e4>)
 8002046:	6a38      	ldr	r0, [r7, #32]
 8002048:	f7ff f81a 	bl	8001080 <__aeabi_fcmplt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MotorControl_FOC_Position_Process+0x162>
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <MotorControl_FOC_Position_Process+0x1e4>)
 8002054:	623b      	str	r3, [r7, #32]

    float elec = mech * mc->pole_pairs +
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7f1b      	ldrb	r3, [r3, #28]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe1e 	bl	8000c9c <__aeabi_i2f>
 8002060:	4603      	mov	r3, r0
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe6d 	bl	8000d44 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
    		mc->foc.offset_angle +
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    float elec = mech * mc->pole_pairs +
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7fe fd5d 	bl	8000b34 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	461c      	mov	r4, r3
			((voltage >= 0) ? MOTOR_CONTROL_PI_2 : -MOTOR_CONTROL_PI_2);
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	6a38      	ldr	r0, [r7, #32]
 8002084:	f7ff f810 	bl	80010a8 <__aeabi_fcmpge>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MotorControl_FOC_Position_Process+0x19e>
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <MotorControl_FOC_Position_Process+0x1e8>)
 8002090:	e000      	b.n	8002094 <MotorControl_FOC_Position_Process+0x1a0>
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <MotorControl_FOC_Position_Process+0x1ec>)
    float elec = mech * mc->pole_pairs +
 8002094:	4621      	mov	r1, r4
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fd4c 	bl	8000b34 <__addsf3>
 800209c:	4603      	mov	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]

    mc->voltage_limit = (voltage >= 0) ? voltage : -voltage;
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	6a38      	ldr	r0, [r7, #32]
 80020a6:	f7fe ffff 	bl	80010a8 <__aeabi_fcmpge>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MotorControl_FOC_Position_Process+0x1c0>
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	e002      	b.n	80020ba <MotorControl_FOC_Position_Process+0x1c6>
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6253      	str	r3, [r2, #36]	@ 0x24
    mc->angle_elec = elec;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	40490fdb 	.word	0x40490fdb
 80020d0:	40c90fdb 	.word	0x40c90fdb
 80020d4:	c0490fdb 	.word	0xc0490fdb
 80020d8:	bf800000 	.word	0xbf800000
 80020dc:	3fc90fdb 	.word	0x3fc90fdb
 80020e0:	bfc90fdb 	.word	0xbfc90fdb

080020e4 <MotorControl_OpenLoop_Process>:
#include "motor_control.h"


void MotorControl_OpenLoop_Process(MotorControl_t *mc)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	OpenLoopControl_t * olc = &(mc->open_loop);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3330      	adds	r3, #48	@ 0x30
 80020f0:	61fb      	str	r3, [r7, #28]

	float speed_err  = olc->target_speed - olc->mech_speed;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fd17 	bl	8000b30 <__aeabi_fsub>
 8002102:	4603      	mov	r3, r0
 8002104:	61bb      	str	r3, [r7, #24]
	float max_step   = olc->max_accel * mc->delta_time;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7fe fe17 	bl	8000d44 <__aeabi_fmul>
 8002116:	4603      	mov	r3, r0
 8002118:	617b      	str	r3, [r7, #20]

	if (MOTOR_CONTROL_ABS(speed_err) <= max_step) {
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	69b8      	ldr	r0, [r7, #24]
 8002120:	f7fe ffae 	bl	8001080 <__aeabi_fcmplt>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <MotorControl_OpenLoop_Process+0x4e>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002130:	e000      	b.n	8002134 <MotorControl_OpenLoop_Process+0x50>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6979      	ldr	r1, [r7, #20]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffac 	bl	8001094 <__aeabi_fcmple>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <MotorControl_OpenLoop_Process+0x68>
			olc->mech_speed = olc->target_speed;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e016      	b.n	800217a <MotorControl_OpenLoop_Process+0x96>
	} else {
			olc->mech_speed += (speed_err > 0 ? max_step : -max_step);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	689c      	ldr	r4, [r3, #8]
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	69b8      	ldr	r0, [r7, #24]
 8002156:	f7fe ffb1 	bl	80010bc <__aeabi_fcmpgt>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MotorControl_OpenLoop_Process+0x80>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	e002      	b.n	800216a <MotorControl_OpenLoop_Process+0x86>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800216a:	4621      	mov	r1, r4
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fce1 	bl	8000b34 <__addsf3>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	609a      	str	r2, [r3, #8]
	}

	const float elec_speed = olc->mech_speed * (float)mc->pole_pairs;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	689c      	ldr	r4, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7f1b      	ldrb	r3, [r3, #28]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fd86 	bl	8000c94 <__aeabi_ui2f>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	4620      	mov	r0, r4
 800218e:	f7fe fdd9 	bl	8000d44 <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
	const float d_angle    = elec_speed * mc->delta_time;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4619      	mov	r1, r3
 800219c:	6938      	ldr	r0, [r7, #16]
 800219e:	f7fe fdd1 	bl	8000d44 <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	60fb      	str	r3, [r7, #12]

	mc->angle_elec += d_angle;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fcc1 	bl	8000b34 <__addsf3>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28

    while (mc->angle_elec >= MOTOR_CONTROL_TWO_PI)
 80021ba:	e009      	b.n	80021d0 <MotorControl_OpenLoop_Process+0xec>
    	mc->angle_elec -= MOTOR_CONTROL_TWO_PI;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	4918      	ldr	r1, [pc, #96]	@ (8002224 <MotorControl_OpenLoop_Process+0x140>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fcb4 	bl	8000b30 <__aeabi_fsub>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
    while (mc->angle_elec >= MOTOR_CONTROL_TWO_PI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	4913      	ldr	r1, [pc, #76]	@ (8002224 <MotorControl_OpenLoop_Process+0x140>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe ff66 	bl	80010a8 <__aeabi_fcmpge>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ec      	bne.n	80021bc <MotorControl_OpenLoop_Process+0xd8>
    while (mc->angle_elec < 0.0f)
 80021e2:	e009      	b.n	80021f8 <MotorControl_OpenLoop_Process+0x114>
    	mc->angle_elec += MOTOR_CONTROL_TWO_PI;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	490e      	ldr	r1, [pc, #56]	@ (8002224 <MotorControl_OpenLoop_Process+0x140>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fca2 	bl	8000b34 <__addsf3>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
    while (mc->angle_elec < 0.0f)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ff3d 	bl	8001080 <__aeabi_fcmplt>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1eb      	bne.n	80021e4 <MotorControl_OpenLoop_Process+0x100>

    MotorControl_SetPhasePWM(&mc->hw, mc->voltage_limit, mc->angle_elec);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fc90 	bl	8001b3c <MotorControl_SetPhasePWM>
}
 800221c:	bf00      	nop
 800221e:	3724      	adds	r7, #36	@ 0x24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	40c90fdb 	.word	0x40c90fdb

08002228 <MT6835_Init>:
#include <math.h>

// Иницилизация mt6835
int MT6835_Init(MT6835_Sensor_t *sensor, SPI_HandleTypeDef *spi,
                GPIO_TypeDef *cs_port, uint16_t cs_pin, GPIO_TypeDef *cal_port,
                uint16_t cal_pin) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	807b      	strh	r3, [r7, #2]
  // Проверка входных параметров
  if (!sensor || !spi || !cs_port) {
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <MT6835_Init+0x20>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <MT6835_Init+0x20>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <MT6835_Init+0x26>
    return MT6835_ERROR; // Недопустимые параметры
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e02c      	b.n	80022a8 <MT6835_Init+0x80>
  }
  if (!cal_port && cal_pin != 0) {
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <MT6835_Init+0x38>
 8002254:	8bbb      	ldrh	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <MT6835_Init+0x38>
    return MT6835_ERROR; // Если cal_port не используется, cal_pin должен быть 0
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e023      	b.n	80022a8 <MT6835_Init+0x80>
  }

  // Инициализация структуры
  sensor->spi = spi;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	601a      	str	r2, [r3, #0]
  sensor->cs_port = cs_port;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	605a      	str	r2, [r3, #4]
  sensor->cs_pin = cs_pin;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	811a      	strh	r2, [r3, #8]
  sensor->cal_port = cal_port;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
  sensor->cal_pin = cal_pin;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8bba      	ldrh	r2, [r7, #28]
 800227c:	821a      	strh	r2, [r3, #16]

  // Если CAL_EN используется, выключаем его
  if (sensor->cal_port) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <MT6835_Init+0x6e>
    HAL_GPIO_WritePin(sensor->cal_port, sensor->cal_pin, GPIO_PIN_RESET);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68d8      	ldr	r0, [r3, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8a1b      	ldrh	r3, [r3, #16]
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	f001 f82f 	bl	80032f4 <HAL_GPIO_WritePin>
  }

  // Деактивируем CS по умолчанию
  HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6858      	ldr	r0, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	891b      	ldrh	r3, [r3, #8]
 800229e:	2201      	movs	r2, #1
 80022a0:	4619      	mov	r1, r3
 80022a2:	f001 f827 	bl	80032f4 <HAL_GPIO_WritePin>

  return MT6835_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <MT6835_TransmitReceive>:

// Функция передачи SPI
int  MT6835_TransmitReceive(MT6835_Sensor_t *sensor, uint8_t *tx_data, uint8_t *rx_data, uint8_t length, uint32_t timeout) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	70fb      	strb	r3, [r7, #3]
    // Проверка входных параметров
    if (!sensor || !tx_data || !rx_data || length == 0) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <MT6835_TransmitReceive+0x26>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <MT6835_TransmitReceive+0x26>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <MT6835_TransmitReceive+0x26>
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <MT6835_TransmitReceive+0x2c>
        return MT6835_ERROR;  // Недопустимые параметры
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e023      	b.n	8002324 <MT6835_TransmitReceive+0x74>
    }

    // Активировать CS (активный уровень — LOW)
    HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	891b      	ldrh	r3, [r3, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	f001 f804 	bl	80032f4 <HAL_GPIO_WritePin>

    // Передача и прием данных
    HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(sensor->spi, tx_data, rx_data, length, timeout);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	f001 fcbd 	bl	8003c7c <HAL_SPI_TransmitReceive>
 8002302:	4603      	mov	r3, r0
 8002304:	75fb      	strb	r3, [r7, #23]

    // Деактивировать CS
    HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6858      	ldr	r0, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	891b      	ldrh	r3, [r3, #8]
 800230e:	2201      	movs	r2, #1
 8002310:	4619      	mov	r1, r3
 8002312:	f000 ffef 	bl	80032f4 <HAL_GPIO_WritePin>

    // Проверка результата
    return (result == HAL_OK) ? MT6835_OK : MT6835_ERROR;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <MT6835_TransmitReceive+0x70>
 800231c:	2300      	movs	r3, #0
 800231e:	e001      	b.n	8002324 <MT6835_TransmitReceive+0x74>
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <MT6835_ReadRegister>:


int MT6835_ReadRegister(MT6835_Sensor_t *sensor, uint16_t address, uint8_t *value) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	460b      	mov	r3, r1
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	817b      	strh	r3, [r7, #10]
    // Проверка входных параметров
    if (!sensor || !value) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <MT6835_ReadRegister+0x1a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <MT6835_ReadRegister+0x20>
        return MT6835_ERROR;  // Недопустимые параметры
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e028      	b.n	800239e <MT6835_ReadRegister+0x72>
    }

    // Формируем команду: 4 бита команды (0b0011), 12 бит адреса, 8 бит данных
    uint8_t tx_data[3];
    tx_data[0] = (MT6835_CMD_READ_REG << 4) | ((address >> 8) & MT6835_MASK_ADDR);  // 0b0011xxxx, старшие 4 бита адреса
 800234c:	897b      	ldrh	r3, [r7, #10]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b25b      	sxtb	r3, r3
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800235e:	b25b      	sxtb	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	763b      	strb	r3, [r7, #24]
    tx_data[1] = address & 0xFF;  // Младшие 8 бит адреса
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	767b      	strb	r3, [r7, #25]
    tx_data[2] = 0x00;            // 8 бит данных (не используются при чтении)
 800236a:	2300      	movs	r3, #0
 800236c:	76bb      	strb	r3, [r7, #26]

    uint8_t rx_data[3] = {0};
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <MT6835_ReadRegister+0x7c>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	82bb      	strh	r3, [r7, #20]
 8002374:	2300      	movs	r3, #0
 8002376:	75bb      	strb	r3, [r7, #22]

    // Передача и прием данных
    int result = MT6835_TransmitReceive(sensor, tx_data, rx_data, 3, HAL_MAX_DELAY);
 8002378:	f107 0214 	add.w	r2, r7, #20
 800237c:	f107 0118 	add.w	r1, r7, #24
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2303      	movs	r3, #3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff ff91 	bl	80022b0 <MT6835_TransmitReceive>
 800238e:	61f8      	str	r0, [r7, #28]
    if (result == MT6835_OK) {
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <MT6835_ReadRegister+0x70>
        *value = rx_data[2];  // Получаем последний байт ответа
 8002396:	7dba      	ldrb	r2, [r7, #22]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	701a      	strb	r2, [r3, #0]
    }

    return result;
 800239c:	69fb      	ldr	r3, [r7, #28]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08008220 	.word	0x08008220

080023ac <MT6835_CheckStatus>:
    int result = MT6835_TransmitReceive(sensor, tx_data, rx_data, 3, HAL_MAX_DELAY);
    return (result == MT6835_OK) ? MT6835_OK : MT6835_ERROR;
}


uint8_t MT6835_CheckStatus(MT6835_Sensor_t *sensor) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	uint8_t status_reg;
	if(MT6835_ReadRegister(sensor, MT6835_ADDR_REG_STATUS, &status_reg)) {
 80023b4:	f107 030f 	add.w	r3, r7, #15
 80023b8:	461a      	mov	r2, r3
 80023ba:	2105      	movs	r1, #5
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ffb5 	bl	800232c <MT6835_ReadRegister>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MT6835_CheckStatus+0x20>
		return MT6835_ERROR;
 80023c8:	23ff      	movs	r3, #255	@ 0xff
 80023ca:	e003      	b.n	80023d4 <MT6835_CheckStatus+0x28>
	}

	return status_reg & MT6835_MASK_STATUS;  // Статус в последних 3 битах
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	b2db      	uxtb	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <MT6835_SetZeroTemporary>:
    HAL_Delay(10000);  // Ожидание завершения программирования
    return MT6835_OK;
}


int MT6835_SetZeroTemporary(MT6835_Sensor_t *sensor) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
    if (!sensor) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <MT6835_SetZeroTemporary+0x14>
        return MT6835_ERROR;  // Проверка на NULL
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e025      	b.n	800243c <MT6835_SetZeroTemporary+0x60>
    }

    uint8_t tx_data[3] = {(MT6835_CMD_SET_ZERO << 4), 0x00, 0x00};
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <MT6835_SetZeroTemporary+0x68>)
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	8019      	strh	r1, [r3, #0]
 80023fc:	3302      	adds	r3, #2
 80023fe:	0c12      	lsrs	r2, r2, #16
 8002400:	701a      	strb	r2, [r3, #0]
    uint8_t rx_data[3] = {0};
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MT6835_SetZeroTemporary+0x6c>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	813b      	strh	r3, [r7, #8]
 8002408:	2300      	movs	r3, #0
 800240a:	72bb      	strb	r3, [r7, #10]

    // Передача команды
    if (MT6835_TransmitReceive(sensor, tx_data, rx_data, 3, HAL_MAX_DELAY) != MT6835_OK) {
 800240c:	f107 0208 	add.w	r2, r7, #8
 8002410:	f107 010c 	add.w	r1, r7, #12
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2303      	movs	r3, #3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff47 	bl	80022b0 <MT6835_TransmitReceive>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <MT6835_SetZeroTemporary+0x52>
        return MT6835_ERROR;
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	e006      	b.n	800243c <MT6835_SetZeroTemporary+0x60>
    }

    // Проверка успешности установки нуля (датчик должен вернуть 0x55)
    return (rx_data[2] == MT6835_SUCCESS_RESPONSE) ? MT6835_OK : MT6835_ERROR;
 800242e:	7abb      	ldrb	r3, [r7, #10]
 8002430:	2b55      	cmp	r3, #85	@ 0x55
 8002432:	d101      	bne.n	8002438 <MT6835_SetZeroTemporary+0x5c>
 8002434:	2300      	movs	r3, #0
 8002436:	e001      	b.n	800243c <MT6835_SetZeroTemporary+0x60>
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08008228 	.word	0x08008228
 8002448:	08008220 	.word	0x08008220

0800244c <MT6835_ReadRawAngle>:
    return MT6835_ProgramEEPROM(sensor);
}


 // Чтение сырого значения угла
uint32_t MT6835_ReadRawAngle(MT6835_Sensor_t *sensor) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
    uint8_t tx_data[6] = {MT6835_CMD_READ_ANGLE << 4,  MT6835_ADDR_REG_ANGLE_MSB, 0x00, 0x00, 0x00, 0x00};
 8002454:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <MT6835_ReadRawAngle+0x60>)
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800245e:	6018      	str	r0, [r3, #0]
 8002460:	3304      	adds	r3, #4
 8002462:	8019      	strh	r1, [r3, #0]
    uint8_t rx_data[6] = {0};
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	2300      	movs	r3, #0
 800246a:	823b      	strh	r3, [r7, #16]

    if (MT6835_TransmitReceive(sensor, tx_data, rx_data, 6, HAL_MAX_DELAY) != MT6835_OK) {
 800246c:	f107 020c 	add.w	r2, r7, #12
 8002470:	f107 0114 	add.w	r1, r7, #20
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2306      	movs	r3, #6
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff17 	bl	80022b0 <MT6835_TransmitReceive>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <MT6835_ReadRawAngle+0x42>
            return MT6835_ANGLE_READ_ERROR;  // Ошибка SPI / чтения
 8002488:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800248c:	e00a      	b.n	80024a4 <MT6835_ReadRawAngle+0x58>
    }

    // Получаем 21-битное значение угла
    uint32_t angle = ((uint32_t)rx_data[2] << 13) | ((uint32_t)rx_data[3] << 5) | ((uint32_t)rx_data[4] >> 3);
 800248e:	7bbb      	ldrb	r3, [r7, #14]
 8002490:	035a      	lsls	r2, r3, #13
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	015b      	lsls	r3, r3, #5
 8002496:	4313      	orrs	r3, r2
 8002498:	7c3a      	ldrb	r2, [r7, #16]
 800249a:	08d2      	lsrs	r2, r2, #3
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	4313      	orrs	r3, r2
 80024a0:	61fb      	str	r3, [r7, #28]

    return angle;
 80024a2:	69fb      	ldr	r3, [r7, #28]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800822c 	.word	0x0800822c

080024b0 <MT6835_ReadAngle>:


// Чтение угла в радианах
float MT6835_ReadAngle(MT6835_Sensor_t *sensor) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    uint32_t raw_angle = MT6835_ReadRawAngle(sensor);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ffc7 	bl	800244c <MT6835_ReadRawAngle>
 80024be:	60f8      	str	r0, [r7, #12]

    if (raw_angle & MT6835_ANGLE_READ_ERROR) {
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	da01      	bge.n	80024ca <MT6835_ReadAngle+0x1a>
        return MT6835_ERROR;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MT6835_ReadAngle+0x70>)
 80024c8:	e020      	b.n	800250c <MT6835_ReadAngle+0x5c>
    }

    return (raw_angle / (float)(1 << 21)) * 2.0 * MT6835_PI;
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7fe fbe2 	bl	8000c94 <__aeabi_ui2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f04f 4194 	mov.w	r1, #1241513984	@ 0x4a000000
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fce8 	bl	8000eac <__aeabi_fdiv>
 80024dc:	4603      	mov	r3, r0
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd ffa2 	bl	8000428 <__aeabi_f2d>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	f7fd fe40 	bl	800016c <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	a308      	add	r3, pc, #32	@ (adr r3, 8002518 <MT6835_ReadAngle+0x68>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fd ffed 	bl	80004d8 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fabf 	bl	8000a88 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f3af 8000 	nop.w
 8002518:	60000000 	.word	0x60000000
 800251c:	400921fb 	.word	0x400921fb
 8002520:	bf800000 	.word	0xbf800000

08002524 <MT6835_ReadAngleDegrees>:

// Чтение угла в градусах
float MT6835_ReadAngleDegrees(MT6835_Sensor_t *sensor) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    uint32_t raw_angle = MT6835_ReadRawAngle(sensor);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff8d 	bl	800244c <MT6835_ReadRawAngle>
 8002532:	60f8      	str	r0, [r7, #12]

    if (raw_angle & MT6835_ANGLE_READ_ERROR) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	da01      	bge.n	800253e <MT6835_ReadAngleDegrees+0x1a>
        return MT6835_ERROR ;
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <MT6835_ReadAngleDegrees+0x40>)
 800253c:	e00e      	b.n	800255c <MT6835_ReadAngleDegrees+0x38>
    }

    return (raw_angle / (float)(1 << 21)) * 360.0;
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7fe fba8 	bl	8000c94 <__aeabi_ui2f>
 8002544:	4603      	mov	r3, r0
 8002546:	f04f 4194 	mov.w	r1, #1241513984	@ 0x4a000000
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fcae 	bl	8000eac <__aeabi_fdiv>
 8002550:	4603      	mov	r3, r0
 8002552:	4905      	ldr	r1, [pc, #20]	@ (8002568 <MT6835_ReadAngleDegrees+0x44>)
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fbf5 	bl	8000d44 <__aeabi_fmul>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	bf800000 	.word	0xbf800000
 8002568:	43b40000 	.word	0x43b40000
 800256c:	00000000 	.word	0x00000000

08002570 <MT6835_CalculateRotationSpeed>:

float MT6835_CalculateRotationSpeed(MT6835_Sensor_t *sensor,
                                   uint32_t timer_freq_hz,
                                   TIM_HandleTypeDef *htim)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b08f      	sub	sp, #60	@ 0x3c
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
    // 1. Проверка входных параметров
    if(sensor == NULL || htim == NULL || timer_freq_hz == 0) {
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <MT6835_CalculateRotationSpeed+0x1e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <MT6835_CalculateRotationSpeed+0x1e>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <MT6835_CalculateRotationSpeed+0x24>
        return 0.0;
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e0ac      	b.n	80026ee <MT6835_CalculateRotationSpeed+0x17e>
    }

    // 2. Первое измерение
    float angle1 = MT6835_ReadAngle(sensor);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ff8b 	bl	80024b0 <MT6835_ReadAngle>
 800259a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint32_t time1 = __HAL_TIM_GET_COUNTER(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    // 3. Задержка (оптимизированная вместо HAL_Delay)
    uint32_t start = HAL_GetTick();
 80025a4:	f000 fbe6 	bl	8002d74 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24
    while((HAL_GetTick() - start) < MT6835_MEASURE_DELAY_MS) {
 80025aa:	e000      	b.n	80025ae <MT6835_CalculateRotationSpeed+0x3e>
        __NOP();
 80025ac:	bf00      	nop
    while((HAL_GetTick() - start) < MT6835_MEASURE_DELAY_MS) {
 80025ae:	f000 fbe1 	bl	8002d74 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d9f7      	bls.n	80025ac <MT6835_CalculateRotationSpeed+0x3c>
    }

    // 4. Второе измерение
    float angle2 = MT6835_ReadAngle(sensor);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ff77 	bl	80024b0 <MT6835_ReadAngle>
 80025c2:	6238      	str	r0, [r7, #32]
    uint32_t time2 = __HAL_TIM_GET_COUNTER(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	61fb      	str	r3, [r7, #28]

    // 5. Расчет разницы времени с обработкой переполнения
    uint32_t delta_time_ticks = (time2 >= time1) ?
                               (time2 - time1) :
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d303      	bcc.n	80025dc <MT6835_CalculateRotationSpeed+0x6c>
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	e007      	b.n	80025ec <MT6835_CalculateRotationSpeed+0x7c>
                               (htim->Instance->ARR - time1 + time2 + 1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	1ad2      	subs	r2, r2, r3
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
                               (time2 - time1) :
 80025ea:	3301      	adds	r3, #1
    uint32_t delta_time_ticks = (time2 >= time1) ?
 80025ec:	61bb      	str	r3, [r7, #24]
    float delta_time = (float)delta_time_ticks / (float)timer_freq_hz;
 80025ee:	69b8      	ldr	r0, [r7, #24]
 80025f0:	f7fe fb50 	bl	8000c94 <__aeabi_ui2f>
 80025f4:	4604      	mov	r4, r0
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f7fe fb4c 	bl	8000c94 <__aeabi_ui2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4619      	mov	r1, r3
 8002600:	4620      	mov	r0, r4
 8002602:	f7fe fc53 	bl	8000eac <__aeabi_fdiv>
 8002606:	4603      	mov	r3, r0
 8002608:	617b      	str	r3, [r7, #20]

    // 6. Коррекция угловой разницы
    float delta_angle = angle2 - angle1;
 800260a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800260c:	6a38      	ldr	r0, [r7, #32]
 800260e:	f7fe fa8f 	bl	8000b30 <__aeabi_fsub>
 8002612:	4603      	mov	r3, r0
 8002614:	637b      	str	r3, [r7, #52]	@ 0x34

    // Обработка перехода через 0
    if(delta_angle > MT6835_PI) {
 8002616:	493a      	ldr	r1, [pc, #232]	@ (8002700 <MT6835_CalculateRotationSpeed+0x190>)
 8002618:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800261a:	f7fe fd4f 	bl	80010bc <__aeabi_fcmpgt>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <MT6835_CalculateRotationSpeed+0xc2>
        delta_angle -= 2.0 * MT6835_PI;
 8002624:	4937      	ldr	r1, [pc, #220]	@ (8002704 <MT6835_CalculateRotationSpeed+0x194>)
 8002626:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002628:	f7fe fa82 	bl	8000b30 <__aeabi_fsub>
 800262c:	4603      	mov	r3, r0
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002630:	e00c      	b.n	800264c <MT6835_CalculateRotationSpeed+0xdc>
    }
    else if(delta_angle < -MT6835_PI) {
 8002632:	4935      	ldr	r1, [pc, #212]	@ (8002708 <MT6835_CalculateRotationSpeed+0x198>)
 8002634:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002636:	f7fe fd23 	bl	8001080 <__aeabi_fcmplt>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <MT6835_CalculateRotationSpeed+0xdc>
        delta_angle += 2.0 * MT6835_PI;
 8002640:	4930      	ldr	r1, [pc, #192]	@ (8002704 <MT6835_CalculateRotationSpeed+0x194>)
 8002642:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002644:	f7fe fa76 	bl	8000b34 <__addsf3>
 8002648:	4603      	mov	r3, r0
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    // 7. Фильтрация шумов и проверка на движение
    if(MT6835_ABS(delta_angle) < MT6835_MIN_DELTA_ANGLE) {
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002652:	f7fe fd15 	bl	8001080 <__aeabi_fcmplt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <MT6835_CalculateRotationSpeed+0xf4>
 800265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002662:	e000      	b.n	8002666 <MT6835_CalculateRotationSpeed+0xf6>
 8002664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fede 	bl	8000428 <__aeabi_f2d>
 800266c:	a322      	add	r3, pc, #136	@ (adr r3, 80026f8 <MT6835_CalculateRotationSpeed+0x188>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fe f9a3 	bl	80009bc <__aeabi_dcmplt>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <MT6835_CalculateRotationSpeed+0x112>
        return 0.0;
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e035      	b.n	80026ee <MT6835_CalculateRotationSpeed+0x17e>
    }

    // 8. Расчет скорости с защитой от деления на 0
    float speed = delta_angle / delta_time;
 8002682:	6979      	ldr	r1, [r7, #20]
 8002684:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002686:	f7fe fc11 	bl	8000eac <__aeabi_fdiv>
 800268a:	4603      	mov	r3, r0
 800268c:	633b      	str	r3, [r7, #48]	@ 0x30

    // 9. Ограничение по максимальной скорости
    if(MT6835_ABS(speed) > MT6835_MAX_SPEED) {
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002694:	f7fe fcf4 	bl	8001080 <__aeabi_fcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <MT6835_CalculateRotationSpeed+0x148>
 800269e:	2301      	movs	r3, #1
 80026a0:	461c      	mov	r4, r3
 80026a2:	491a      	ldr	r1, [pc, #104]	@ (800270c <MT6835_CalculateRotationSpeed+0x19c>)
 80026a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026a6:	f7fe fceb 	bl	8001080 <__aeabi_fcmplt>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <MT6835_CalculateRotationSpeed+0x144>
 80026b0:	2300      	movs	r3, #0
 80026b2:	461c      	mov	r4, r3
 80026b4:	b2e3      	uxtb	r3, r4
 80026b6:	e00b      	b.n	80026d0 <MT6835_CalculateRotationSpeed+0x160>
 80026b8:	2301      	movs	r3, #1
 80026ba:	461c      	mov	r4, r3
 80026bc:	4914      	ldr	r1, [pc, #80]	@ (8002710 <MT6835_CalculateRotationSpeed+0x1a0>)
 80026be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c0:	f7fe fcfc 	bl	80010bc <__aeabi_fcmpgt>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <MT6835_CalculateRotationSpeed+0x15e>
 80026ca:	2300      	movs	r3, #0
 80026cc:	461c      	mov	r4, r3
 80026ce:	b2e3      	uxtb	r3, r4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <MT6835_CalculateRotationSpeed+0x17c>
        speed = (speed > 0) ? MT6835_MAX_SPEED : -MT6835_MAX_SPEED;
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026da:	f7fe fcef 	bl	80010bc <__aeabi_fcmpgt>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MT6835_CalculateRotationSpeed+0x178>
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <MT6835_CalculateRotationSpeed+0x1a0>)
 80026e6:	e000      	b.n	80026ea <MT6835_CalculateRotationSpeed+0x17a>
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <MT6835_CalculateRotationSpeed+0x19c>)
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    return speed;
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	373c      	adds	r7, #60	@ 0x3c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	47ae147b 	.word	0x47ae147b
 80026fc:	3f847ae1 	.word	0x3f847ae1
 8002700:	40490fdb 	.word	0x40490fdb
 8002704:	40c90fdb 	.word	0x40c90fdb
 8002708:	c0490fdb 	.word	0xc0490fdb
 800270c:	c47a0000 	.word	0xc47a0000
 8002710:	447a0000 	.word	0x447a0000

08002714 <MovingAverage_FilterSpeed>:

float MovingAverage_FilterSpeed(float new_speed) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    // Статический буфер и переменные состояния
    static float buffer[MT6835_FILTER_SIZE] = {0};
    static uint8_t index = 0;
    static uint8_t samples_collected = 0;
    float sum = 0;
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]

    // 1. Добавляем новое значение в буфер
    buffer[index] = new_speed;
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <MovingAverage_FilterSpeed+0x9c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <MovingAverage_FilterSpeed+0xa0>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    // 2. Обновляем индекс (циклически)
    index = (index + 1) %  MT6835_FILTER_SIZE;
 8002730:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <MovingAverage_FilterSpeed+0x9c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <MovingAverage_FilterSpeed+0xa4>)
 8002738:	fb83 1302 	smull	r1, r3, r3, r2
 800273c:	1099      	asrs	r1, r3, #2
 800273e:	17d3      	asrs	r3, r2, #31
 8002740:	1ac9      	subs	r1, r1, r3
 8002742:	460b      	mov	r3, r1
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	1ad1      	subs	r1, r2, r3
 800274c:	b2ca      	uxtb	r2, r1
 800274e:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <MovingAverage_FilterSpeed+0x9c>)
 8002750:	701a      	strb	r2, [r3, #0]

    // 3. Увеличиваем счетчик (пока буфер не заполнится)
    if (samples_collected <  MT6835_FILTER_SIZE) {
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <MovingAverage_FilterSpeed+0xa8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b09      	cmp	r3, #9
 8002758:	d805      	bhi.n	8002766 <MovingAverage_FilterSpeed+0x52>
        samples_collected++;
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MovingAverage_FilterSpeed+0xa8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <MovingAverage_FilterSpeed+0xa8>)
 8002764:	701a      	strb	r2, [r3, #0]
    }

    // 4. Суммируем значения в буфере
    for (uint8_t i = 0; i < samples_collected; ++i) {
 8002766:	2300      	movs	r3, #0
 8002768:	72fb      	strb	r3, [r7, #11]
 800276a:	e00c      	b.n	8002786 <MovingAverage_FilterSpeed+0x72>
        sum += buffer[i];
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	4a11      	ldr	r2, [pc, #68]	@ (80027b4 <MovingAverage_FilterSpeed+0xa0>)
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	4619      	mov	r1, r3
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7fe f9dc 	bl	8000b34 <__addsf3>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < samples_collected; ++i) {
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	3301      	adds	r3, #1
 8002784:	72fb      	strb	r3, [r7, #11]
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <MovingAverage_FilterSpeed+0xa8>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	7afa      	ldrb	r2, [r7, #11]
 800278c:	429a      	cmp	r2, r3
 800278e:	d3ed      	bcc.n	800276c <MovingAverage_FilterSpeed+0x58>
    }

    // 5. Возвращаем среднее значение
    return sum / (float)samples_collected;
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <MovingAverage_FilterSpeed+0xa8>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fa7d 	bl	8000c94 <__aeabi_ui2f>
 800279a:	4603      	mov	r3, r0
 800279c:	4619      	mov	r1, r3
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7fe fb84 	bl	8000eac <__aeabi_fdiv>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003c8 	.word	0x200003c8
 80027b4:	200003cc 	.word	0x200003cc
 80027b8:	66666667 	.word	0x66666667
 80027bc:	200003f4 	.word	0x200003f4

080027c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_MspInit+0x5c>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_MspInit+0x5c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_MspInit+0x5c>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_MspInit+0x5c>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <HAL_MspInit+0x5c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <HAL_MspInit+0x5c>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_MspInit+0x60>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_MspInit+0x60>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000

08002824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_SPI_MspInit+0x88>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d12f      	bne.n	80028a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002844:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a19      	ldr	r2, [pc, #100]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 800284a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_SPI_MspInit+0x8c>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002874:	23a0      	movs	r3, #160	@ 0xa0
 8002876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4619      	mov	r1, r3
 8002886:	480b      	ldr	r0, [pc, #44]	@ (80028b4 <HAL_SPI_MspInit+0x90>)
 8002888:	f000 fbb0 	bl	8002fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800288c:	2340      	movs	r3, #64	@ 0x40
 800288e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	4619      	mov	r1, r3
 800289e:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <HAL_SPI_MspInit+0x90>)
 80028a0:	f000 fba4 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028a4:	bf00      	nop
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013000 	.word	0x40013000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010800 	.word	0x40010800

080028b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <HAL_TIM_PWM_MspInit+0x34>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_TIM_PWM_MspInit+0x38>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <HAL_TIM_PWM_MspInit+0x38>)
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028d4:	6193      	str	r3, [r2, #24]
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_TIM_PWM_MspInit+0x38>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002904:	d114      	bne.n	8002930 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	61d3      	str	r3, [r2, #28]
 8002912:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	201c      	movs	r0, #28
 8002924:	f000 fb2b 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002928:	201c      	movs	r0, #28
 800292a:	f000 fb44 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800292e:	e018      	b.n	8002962 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <HAL_TIM_Base_MspInit+0x7c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d113      	bne.n	8002962 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	61d3      	str	r3, [r2, #28]
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_TIM_Base_MspInit+0x78>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201d      	movs	r0, #29
 8002958:	f000 fb11 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800295c:	201d      	movs	r0, #29
 800295e:	f000 fb2a 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40000400 	.word	0x40000400

08002974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	@ (80029d0 <HAL_TIM_MspPostInit+0x5c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d118      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80029ac:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80029b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <HAL_TIM_MspPostInit+0x64>)
 80029c2:	f000 fb13 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010800 	.word	0x40010800

080029dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <HAL_UART_MspInit+0x70>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d123      	bne.n	8002a44 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a13      	ldr	r2, [pc, #76]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_UART_MspInit+0x74>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <HAL_UART_MspInit+0x78>)
 8002a40:	f000 fad4 	bl	8002fec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a44:	bf00      	nop
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010800 	.word	0x40010800

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <NMI_Handler+0x4>

08002a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <MemManage_Handler+0x4>

08002a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f000 f952 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <TIM2_IRQHandler+0x10>)
 8002ab6:	f001 fd85 	bl	80045c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000290 	.word	0x20000290

08002ac4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <TIM3_IRQHandler+0x10>)
 8002aca:	f001 fd7b 	bl	80045c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002d8 	.word	0x200002d8

08002ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002adc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ae0:	f000 fc20 	bl	8003324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return 1;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <_kill>:

int _kill(int pid, int sig)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b00:	f003 fc4c 	bl	800639c <__errno>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2216      	movs	r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
  return -1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_exit>:

void _exit (int status)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffe7 	bl	8002af6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <_exit+0x12>

08002b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e00a      	b.n	8002b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b3e:	f3af 8000 	nop.w
 8002b42:	4601      	mov	r1, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dbf0      	blt.n	8002b3e <_read+0x12>
  }

  return len;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e009      	b.n	8002b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fe69 	bl	8001858 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbf1      	blt.n	8002b78 <_write+0x12>
  }
  return len;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_close>:

int _close(int file)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <_isatty>:

int _isatty(int file)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c08:	4a14      	ldr	r2, [pc, #80]	@ (8002c5c <_sbrk+0x5c>)
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <_sbrk+0x60>)
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c14:	4b13      	ldr	r3, [pc, #76]	@ (8002c64 <_sbrk+0x64>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <_sbrk+0x64>)
 8002c1e:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <_sbrk+0x68>)
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <_sbrk+0x64>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d207      	bcs.n	8002c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c30:	f003 fbb4 	bl	800639c <__errno>
 8002c34:	4603      	mov	r3, r0
 8002c36:	220c      	movs	r2, #12
 8002c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	e009      	b.n	8002c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c40:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <_sbrk+0x64>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c46:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4a05      	ldr	r2, [pc, #20]	@ (8002c64 <_sbrk+0x64>)
 8002c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20005000 	.word	0x20005000
 8002c60:	00000400 	.word	0x00000400
 8002c64:	200003f8 	.word	0x200003f8
 8002c68:	20000550 	.word	0x20000550

08002c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c78:	f7ff fff8 	bl	8002c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c7c:	480b      	ldr	r0, [pc, #44]	@ (8002cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c7e:	490c      	ldr	r1, [pc, #48]	@ (8002cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c80:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c84:	e002      	b.n	8002c8c <LoopCopyDataInit>

08002c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8a:	3304      	adds	r3, #4

08002c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c90:	d3f9      	bcc.n	8002c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c92:	4a09      	ldr	r2, [pc, #36]	@ (8002cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c94:	4c09      	ldr	r4, [pc, #36]	@ (8002cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c98:	e001      	b.n	8002c9e <LoopFillZerobss>

08002c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c9c:	3204      	adds	r2, #4

08002c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca0:	d3fb      	bcc.n	8002c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ca2:	f003 fb81 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ca6:	f7fe fa9d 	bl	80011e4 <main>
  bx lr
 8002caa:	4770      	bx	lr
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002cb4:	08008b90 	.word	0x08008b90
  ldr r2, =_sbss
 8002cb8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002cbc:	2000054c 	.word	0x2000054c

08002cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC1_2_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <HAL_Init+0x28>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <HAL_Init+0x28>)
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f000 f947 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 f808 	bl	8002cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce0:	f7ff fd6e 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40022000 	.word	0x40022000

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <HAL_InitTick+0x54>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_InitTick+0x58>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f95f 	bl	8002fd2 <HAL_SYSTICK_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00e      	b.n	8002d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d80a      	bhi.n	8002d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f000 f927 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d30:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_InitTick+0x5c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <HAL_IncTick+0x1c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_IncTick+0x20>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a03      	ldr	r2, [pc, #12]	@ (8002d70 <HAL_IncTick+0x20>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	200003fc 	.word	0x200003fc

08002d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b02      	ldr	r3, [pc, #8]	@ (8002d84 <HAL_GetTick+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	200003fc 	.word	0x200003fc

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_Delay+0x44>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dae:	bf00      	nop
 8002db0:	f7ff ffe0 	bl	8002d74 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4906      	ldr	r1, [pc, #24]	@ (8002e68 <__NVIC_EnableIRQ+0x34>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	@ (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff90 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff2d 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff42 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff90 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5f 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff35 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b08b      	sub	sp, #44	@ 0x2c
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	e169      	b.n	80032d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003000:	2201      	movs	r2, #1
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8158 	bne.w	80032ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a9a      	ldr	r2, [pc, #616]	@ (800328c <HAL_GPIO_Init+0x2a0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d05e      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003028:	4a98      	ldr	r2, [pc, #608]	@ (800328c <HAL_GPIO_Init+0x2a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d875      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800302e:	4a98      	ldr	r2, [pc, #608]	@ (8003290 <HAL_GPIO_Init+0x2a4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d058      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003034:	4a96      	ldr	r2, [pc, #600]	@ (8003290 <HAL_GPIO_Init+0x2a4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d86f      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800303a:	4a96      	ldr	r2, [pc, #600]	@ (8003294 <HAL_GPIO_Init+0x2a8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d052      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003040:	4a94      	ldr	r2, [pc, #592]	@ (8003294 <HAL_GPIO_Init+0x2a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d869      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003046:	4a94      	ldr	r2, [pc, #592]	@ (8003298 <HAL_GPIO_Init+0x2ac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04c      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 800304c:	4a92      	ldr	r2, [pc, #584]	@ (8003298 <HAL_GPIO_Init+0x2ac>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d863      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003052:	4a92      	ldr	r2, [pc, #584]	@ (800329c <HAL_GPIO_Init+0x2b0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d046      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
 8003058:	4a90      	ldr	r2, [pc, #576]	@ (800329c <HAL_GPIO_Init+0x2b0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d85d      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 800305e:	2b12      	cmp	r3, #18
 8003060:	d82a      	bhi.n	80030b8 <HAL_GPIO_Init+0xcc>
 8003062:	2b12      	cmp	r3, #18
 8003064:	d859      	bhi.n	800311a <HAL_GPIO_Init+0x12e>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <HAL_GPIO_Init+0x80>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030e7 	.word	0x080030e7
 8003070:	080030c1 	.word	0x080030c1
 8003074:	080030d3 	.word	0x080030d3
 8003078:	08003115 	.word	0x08003115
 800307c:	0800311b 	.word	0x0800311b
 8003080:	0800311b 	.word	0x0800311b
 8003084:	0800311b 	.word	0x0800311b
 8003088:	0800311b 	.word	0x0800311b
 800308c:	0800311b 	.word	0x0800311b
 8003090:	0800311b 	.word	0x0800311b
 8003094:	0800311b 	.word	0x0800311b
 8003098:	0800311b 	.word	0x0800311b
 800309c:	0800311b 	.word	0x0800311b
 80030a0:	0800311b 	.word	0x0800311b
 80030a4:	0800311b 	.word	0x0800311b
 80030a8:	0800311b 	.word	0x0800311b
 80030ac:	0800311b 	.word	0x0800311b
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	4a79      	ldr	r2, [pc, #484]	@ (80032a0 <HAL_GPIO_Init+0x2b4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030be:	e02c      	b.n	800311a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	623b      	str	r3, [r7, #32]
          break;
 80030c6:	e029      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	3304      	adds	r3, #4
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e024      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	3308      	adds	r3, #8
 80030d8:	623b      	str	r3, [r7, #32]
          break;
 80030da:	e01f      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	330c      	adds	r3, #12
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e01a      	b.n	800311c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ee:	2304      	movs	r3, #4
 80030f0:	623b      	str	r3, [r7, #32]
          break;
 80030f2:	e013      	b.n	800311c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030fc:	2308      	movs	r3, #8
 80030fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	611a      	str	r2, [r3, #16]
          break;
 8003106:	e009      	b.n	800311c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003108:	2308      	movs	r3, #8
 800310a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	615a      	str	r2, [r3, #20]
          break;
 8003112:	e003      	b.n	800311c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
          break;
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x130>
          break;
 800311a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	@ 0xff
 8003120:	d801      	bhi.n	8003126 <HAL_GPIO_Init+0x13a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e001      	b.n	800312a <HAL_GPIO_Init+0x13e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2bff      	cmp	r3, #255	@ 0xff
 8003130:	d802      	bhi.n	8003138 <HAL_GPIO_Init+0x14c>
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_Init+0x152>
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	3b08      	subs	r3, #8
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	210f      	movs	r1, #15
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	431a      	orrs	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80b1 	beq.w	80032ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800316c:	4b4d      	ldr	r3, [pc, #308]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a4c      	ldr	r2, [pc, #304]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b4a      	ldr	r3, [pc, #296]	@ (80032a4 <HAL_GPIO_Init+0x2b8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003184:	4a48      	ldr	r2, [pc, #288]	@ (80032a8 <HAL_GPIO_Init+0x2bc>)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a40      	ldr	r2, [pc, #256]	@ (80032ac <HAL_GPIO_Init+0x2c0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_GPIO_Init+0x1ec>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3f      	ldr	r2, [pc, #252]	@ (80032b0 <HAL_GPIO_Init+0x2c4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00d      	beq.n	80031d4 <HAL_GPIO_Init+0x1e8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3e      	ldr	r2, [pc, #248]	@ (80032b4 <HAL_GPIO_Init+0x2c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <HAL_GPIO_Init+0x1e4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	@ (80032b8 <HAL_GPIO_Init+0x2cc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_GPIO_Init+0x1e0>
 80031c8:	2303      	movs	r3, #3
 80031ca:	e006      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e004      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e002      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_GPIO_Init+0x1ee>
 80031d8:	2300      	movs	r3, #0
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	f002 0203 	and.w	r2, r2, #3
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	4093      	lsls	r3, r2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ea:	492f      	ldr	r1, [pc, #188]	@ (80032a8 <HAL_GPIO_Init+0x2bc>)
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003204:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	492c      	ldr	r1, [pc, #176]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003212:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	43db      	mvns	r3, r3
 800321a:	4928      	ldr	r1, [pc, #160]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800321c:	4013      	ands	r3, r2
 800321e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800322c:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4922      	ldr	r1, [pc, #136]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	43db      	mvns	r3, r3
 8003242:	491e      	ldr	r1, [pc, #120]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003244:	4013      	ands	r3, r2
 8003246:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4918      	ldr	r1, [pc, #96]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003262:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	43db      	mvns	r3, r3
 800326a:	4914      	ldr	r1, [pc, #80]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800326c:	4013      	ands	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d021      	beq.n	80032c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	490e      	ldr	r1, [pc, #56]	@ (80032bc <HAL_GPIO_Init+0x2d0>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e021      	b.n	80032ce <HAL_GPIO_Init+0x2e2>
 800328a:	bf00      	nop
 800328c:	10320000 	.word	0x10320000
 8003290:	10310000 	.word	0x10310000
 8003294:	10220000 	.word	0x10220000
 8003298:	10210000 	.word	0x10210000
 800329c:	10120000 	.word	0x10120000
 80032a0:	10110000 	.word	0x10110000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40010800 	.word	0x40010800
 80032b0:	40010c00 	.word	0x40010c00
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40011400 	.word	0x40011400
 80032bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4909      	ldr	r1, [pc, #36]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f47f ae8e 	bne.w	8003000 <HAL_GPIO_Init+0x14>
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	372c      	adds	r7, #44	@ 0x2c
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40010400 	.word	0x40010400

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003310:	e003      	b.n	800331a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	041a      	lsls	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800333a:	4a05      	ldr	r2, [pc, #20]	@ (8003350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe faae 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e272      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8087 	beq.w	8003482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003374:	4b92      	ldr	r3, [pc, #584]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00c      	beq.n	800339a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003380:	4b8f      	ldr	r3, [pc, #572]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d112      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
 800338c:	4b8c      	ldr	r3, [pc, #560]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06c      	beq.n	8003480 <HAL_RCC_OscConfig+0x12c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d168      	bne.n	8003480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e24c      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x76>
 80033bc:	4b80      	ldr	r3, [pc, #512]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7f      	ldr	r2, [pc, #508]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b7b      	ldr	r3, [pc, #492]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7a      	ldr	r2, [pc, #488]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b78      	ldr	r3, [pc, #480]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xbc>
 80033f6:	4b72      	ldr	r3, [pc, #456]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a71      	ldr	r2, [pc, #452]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6e      	ldr	r2, [pc, #440]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 8003410:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6a      	ldr	r2, [pc, #424]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b68      	ldr	r3, [pc, #416]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fca0 	bl	8002d74 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff fc9c 	bl	8002d74 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e200      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5d      	ldr	r3, [pc, #372]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xe4>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff fc8c 	bl	8002d74 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7ff fc88 	bl	8002d74 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1ec      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x10c>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b4c      	ldr	r3, [pc, #304]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
 80034a6:	4b46      	ldr	r3, [pc, #280]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b43      	ldr	r3, [pc, #268]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c0      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4939      	ldr	r1, [pc, #228]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7ff fc41 	bl	8002d74 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7ff fc3d 	bl	8002d74 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a1      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b2a      	ldr	r3, [pc, #168]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4927      	ldr	r1, [pc, #156]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b26      	ldr	r3, [pc, #152]	@ (80035c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7ff fc20 	bl	8002d74 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff fc1c 	bl	8002d74 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e180      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <HAL_RCC_OscConfig+0x274>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7ff fc00 	bl	8002d74 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7ff fbfc 	bl	8002d74 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e160      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003596:	2001      	movs	r0, #1
 8003598:	f000 face 	bl	8003b38 <RCC_Delay>
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_RCC_OscConfig+0x274>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7ff fbe6 	bl	8002d74 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7ff fbe2 	bl	8002d74 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e146      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	42420000 	.word	0x42420000
 80035c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b92      	ldr	r3, [pc, #584]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e9      	bne.n	80035ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a87      	ldr	r2, [pc, #540]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b85      	ldr	r3, [pc, #532]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b82      	ldr	r3, [pc, #520]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b7f      	ldr	r3, [pc, #508]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7e      	ldr	r2, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7ff fba3 	bl	8002d74 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7ff fb9f 	bl	8002d74 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	@ 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e103      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b75      	ldr	r3, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x312>
 8003658:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x334>
 800366e:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a69      	ldr	r2, [pc, #420]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b67      	ldr	r3, [pc, #412]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a66      	ldr	r2, [pc, #408]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x356>
 8003690:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a60      	ldr	r2, [pc, #384]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4b5e      	ldr	r3, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 80036aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	4b58      	ldr	r3, [pc, #352]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a57      	ldr	r2, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7ff fb53 	bl	8002d74 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7ff fb4f 	bl	8002d74 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0b1      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x37e>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7ff fb3d 	bl	8002d74 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7ff fb39 	bl	8002d74 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e09b      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b3c      	ldr	r3, [pc, #240]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8087 	beq.w	800384a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373c:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d061      	beq.n	800380c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d146      	bne.n	80037de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7ff fb0d 	bl	8002d74 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7ff fb09 	bl	8002d74 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e06d      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d108      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4921      	ldr	r1, [pc, #132]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a19      	ldr	r1, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	430b      	orrs	r3, r1
 80037aa:	491b      	ldr	r1, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7ff fadd 	bl	8002d74 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7ff fad9 	bl	8002d74 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x46a>
 80037dc:	e035      	b.n	800384a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7ff fac6 	bl	8002d74 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7ff fac2 	bl	8002d74 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e026      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x498>
 800380a:	e01e      	b.n	800384a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e019      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_OscConfig+0x500>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	429a      	cmp	r2, r3
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d0      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b67      	ldr	r3, [pc, #412]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4965      	ldr	r1, [pc, #404]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a58      	ldr	r2, [pc, #352]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e073      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06b      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4936      	ldr	r1, [pc, #216]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7ff fa14 	bl	8002d74 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7ff fa10 	bl	8002d74 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e053      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d210      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4922      	ldr	r1, [pc, #136]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f972 	bl	8002cf0 <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	080087e4 	.word	0x080087e4
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x30>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x36>
 8003a5a:	e027      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5e:	613b      	str	r3, [r7, #16]
      break;
 8003a60:	e027      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a6c:	5cd3      	ldrb	r3, [r2, r3]
 8003a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c5b      	lsrs	r3, r3, #17
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	613b      	str	r3, [r7, #16]
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aae:	613b      	str	r3, [r7, #16]
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	693b      	ldr	r3, [r7, #16]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	007a1200 	.word	0x007a1200
 8003ac8:	080087fc 	.word	0x080087fc
 8003acc:	0800880c 	.word	0x0800880c
 8003ad0:	003d0900 	.word	0x003d0900

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	20000000 	.word	0x20000000

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff2 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	080087f4 	.word	0x080087f4

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b14:	f7ff ffde 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	0adb      	lsrs	r3, r3, #11
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	080087f4 	.word	0x080087f4

08003b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <RCC_Delay+0x34>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <RCC_Delay+0x38>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a5b      	lsrs	r3, r3, #9
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b54:	bf00      	nop
  }
  while (Delay --);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e5a      	subs	r2, r3, #1
 8003b5a:	60fa      	str	r2, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f9      	bne.n	8003b54 <RCC_Delay+0x1c>
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	10624dd3 	.word	0x10624dd3

08003b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e076      	b.n	8003c74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b96:	d009      	beq.n	8003bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
 8003b9e:	e005      	b.n	8003bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe fe2c 	bl	8002824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	ea42 0103 	orr.w	r1, r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	0c1a      	lsrs	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f002 0204 	and.w	r2, r2, #4
 8003c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	@ 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8e:	f7ff f871 	bl	8002d74 <HAL_GetTick>
 8003c92:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c9a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d00c      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x4a>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb2:	d106      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x46>
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d001      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e17f      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x5c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x5c>
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e174      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x6e>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e16d      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d003      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2205      	movs	r2, #5
 8003d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	887a      	ldrh	r2, [r7, #2]
 8003d2e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d007      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d62:	d17e      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0xf6>
 8003d6c:	8afb      	ldrh	r3, [r7, #22]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d16c      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	881a      	ldrh	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	1c9a      	adds	r2, r3, #2
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d96:	e059      	b.n	8003e4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d11b      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x162>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_SPI_TransmitReceive+0x162>
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d113      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	881a      	ldrh	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	1c9a      	adds	r2, r3, #2
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d119      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x1a4>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d014      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	b292      	uxth	r2, r2
 8003e02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e20:	f7fe ffa8 	bl	8002d74 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d80d      	bhi.n	8003e4c <HAL_SPI_TransmitReceive+0x1d0>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d009      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0bc      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1a0      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x11c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d19b      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x11c>
 8003e60:	e082      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x1f4>
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d171      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	7812      	ldrb	r2, [r2, #0]
 8003e7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e96:	e05d      	b.n	8003f54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x264>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x264>
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d114      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d119      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x2a6>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d014      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f22:	f7fe ff27 	bl	8002d74 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d803      	bhi.n	8003f3a <HAL_SPI_TransmitReceive+0x2be>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d102      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x2c4>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e038      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d19c      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x21c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d197      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f8b7 	bl	80040e0 <SPI_EndRxTxTransaction>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e01d      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3728      	adds	r7, #40	@ 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fe fec8 	bl	8002d74 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fe fec0 	bl	8002d74 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fe feb0 	bl	8002d74 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000000 	.word	0x20000000

080040e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff6a 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e013      	b.n	800413a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff57 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e000      	b.n	800413a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e041      	b.n	80041d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fe fbc3 	bl	80028f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 fcbd 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d001      	beq.n	80041f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <HAL_TIM_Base_Start+0x88>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_Base_Start+0x48>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004212:	d009      	beq.n	8004228 <HAL_TIM_Base_Start+0x48>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a14      	ldr	r2, [pc, #80]	@ (800426c <HAL_TIM_Base_Start+0x8c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_Base_Start+0x48>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a13      	ldr	r2, [pc, #76]	@ (8004270 <HAL_TIM_Base_Start+0x90>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d111      	bne.n	800424c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d010      	beq.n	800425c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	e007      	b.n	800425c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e03a      	b.n	8004302 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_TIM_Base_Start_IT+0x98>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d009      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <HAL_TIM_Base_Start_IT+0x9c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_TIM_Base_Start_IT+0xa0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e007      	b.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e041      	b.n	80043ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fe faba 	bl	80028b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 fbd2 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_TIM_PWM_Start+0x24>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e022      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d109      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x3e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e015      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d109      	bne.n	8004410 <HAL_TIM_PWM_Start+0x58>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e008      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e05e      	b.n	80044e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0x82>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	e013      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0x92>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004448:	e00b      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0xa2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004458:	e003      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fdd4 	bl	8005018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_TIM_PWM_Start+0x138>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d107      	bne.n	800448a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_TIM_PWM_Start+0x138>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIM_PWM_Start+0xfa>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449c:	d009      	beq.n	80044b2 <HAL_TIM_PWM_Start+0xfa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <HAL_TIM_PWM_Start+0x13c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_PWM_Start+0xfa>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a12      	ldr	r2, [pc, #72]	@ (80044f8 <HAL_TIM_PWM_Start+0x140>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d010      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	e007      	b.n	80044e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800

080044fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fd82 	bl	8005018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a29      	ldr	r2, [pc, #164]	@ (80045c0 <HAL_TIM_PWM_Stop+0xc4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d117      	bne.n	800454e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_TIM_PWM_Stop+0x52>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	f240 4344 	movw	r3, #1092	@ 0x444
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_TIM_PWM_Stop+0x52>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_TIM_PWM_Stop+0x82>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f240 4344 	movw	r3, #1092	@ 0x444
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_TIM_PWM_Stop+0x82>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Stop+0x92>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800458c:	e013      	b.n	80045b6 <HAL_TIM_PWM_Stop+0xba>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Stop+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_PWM_Stop+0xba>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Stop+0xb2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_PWM_Stop+0xba>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40012c00 	.word	0x40012c00

080045c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0202 	mvn.w	r2, #2
 80045f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa5a 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa4d 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa5c 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0204 	mvn.w	r2, #4
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa34 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa27 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fa36 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0208 	mvn.w	r2, #8
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2204      	movs	r2, #4
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa0e 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa01 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa10 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0210 	mvn.w	r2, #16
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2208      	movs	r2, #8
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f9e8 	bl	8004ac8 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9db 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f9ea 	bl	8004ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0201 	mvn.w	r2, #1
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f8a6 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fd3e 	bl	80051d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f9ba 	bl	8004aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0220 	mvn.w	r2, #32
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fd11 	bl	80051be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047be:	2302      	movs	r3, #2
 80047c0:	e0ae      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	f200 809f 	bhi.w	8004910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047d2:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	08004911 	.word	0x08004911
 80047e0:	08004911 	.word	0x08004911
 80047e4:	08004911 	.word	0x08004911
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	08004911 	.word	0x08004911
 80047f0:	08004911 	.word	0x08004911
 80047f4:	08004911 	.word	0x08004911
 80047f8:	0800488f 	.word	0x0800488f
 80047fc:	08004911 	.word	0x08004911
 8004800:	08004911 	.word	0x08004911
 8004804:	08004911 	.word	0x08004911
 8004808:	080048cf 	.word	0x080048cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f9e2 	bl	8004bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
      break;
 800484a:	e064      	b.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa28 	bl	8004ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	619a      	str	r2, [r3, #24]
      break;
 800488c:	e043      	b.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fa71 	bl	8004d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0208 	orr.w	r2, r2, #8
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0204 	bic.w	r2, r2, #4
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
      break;
 80048cc:	e023      	b.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fabb 	bl	8004e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	61da      	str	r2, [r3, #28]
      break;
 800490e:	e002      	b.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIM_ConfigClockSource+0x1c>
 8004940:	2302      	movs	r3, #2
 8004942:	e0b4      	b.n	8004aae <HAL_TIM_ConfigClockSource+0x186>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d03e      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0xd4>
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	f200 8087 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	f000 8086 	beq.w	8004a9a <HAL_TIM_ConfigClockSource+0x172>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	d87f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d01a      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0xa6>
 8004998:	2b70      	cmp	r3, #112	@ 0x70
 800499a:	d87b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d050      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x11a>
 80049a0:	2b60      	cmp	r3, #96	@ 0x60
 80049a2:	d877      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b50      	cmp	r3, #80	@ 0x50
 80049a6:	d03c      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0xfa>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	d873      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d058      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x13a>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d86f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b30      	cmp	r3, #48	@ 0x30
 80049b6:	d064      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x15a>
 80049b8:	2b30      	cmp	r3, #48	@ 0x30
 80049ba:	d86b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d060      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d867      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05c      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d05a      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x15a>
 80049cc:	e062      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	f000 fafc 	bl	8004fda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
      break;
 80049fa:	e04f      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	f000 fae5 	bl	8004fda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	609a      	str	r2, [r3, #8]
      break;
 8004a20:	e03c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 fa5c 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2150      	movs	r1, #80	@ 0x50
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fab3 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a40:	e02c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 fa7a 	bl	8004f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2160      	movs	r1, #96	@ 0x60
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 faa3 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a60:	e01c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fa3c 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fa93 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a80:	e00c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fa8a 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a92:	e003      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr
	...

08004b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd0 <TIM_Base_SetConfig+0xd0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <TIM_Base_SetConfig+0xd4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd8 <TIM_Base_SetConfig+0xd8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a22      	ldr	r2, [pc, #136]	@ (8004bd0 <TIM_Base_SetConfig+0xd0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b50:	d007      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <TIM_Base_SetConfig+0xd4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd8 <TIM_Base_SetConfig+0xd8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd0 <TIM_Base_SetConfig+0xd0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f023 0201 	bic.w	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800

08004bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f023 0201 	bic.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0302 	bic.w	r3, r3, #2
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <TIM_OC1_SetConfig+0xc8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10c      	bne.n	8004c52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0308 	bic.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <TIM_OC1_SetConfig+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d111      	bne.n	8004c7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00

08004ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <TIM_OC2_SetConfig+0xd0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10d      	bne.n	8004d24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <TIM_OC2_SetConfig+0xd0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d113      	bne.n	8004d54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	40012c00 	.word	0x40012c00

08004d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e4c <TIM_OC3_SetConfig+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <TIM_OC3_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d113      	bne.n	8004e26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40012c00 	.word	0x40012c00

08004e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8004ee8 <TIM_OC4_SetConfig+0x98>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d109      	bne.n	8004ec4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	019b      	lsls	r3, r3, #6
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	40012c00 	.word	0x40012c00

08004eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0210 	bic.w	r2, r3, #16
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	031b      	lsls	r3, r3, #12
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f043 0307 	orr.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	609a      	str	r2, [r3, #8]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 031f 	and.w	r3, r3, #31
 800502a:	2201      	movs	r2, #1
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	431a      	orrs	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e046      	b.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d009      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a10      	ldr	r2, [pc, #64]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10c      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800

0800511c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e03d      	b.n	80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e042      	b.n	800527a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fd fbe7 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2224      	movs	r2, #36	@ 0x24
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005224:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f972 	bl	8005510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800523a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800524a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800525a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	@ 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d175      	bne.n	800538e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_UART_Transmit+0x2c>
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e06e      	b.n	8005390 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2221      	movs	r2, #33	@ 0x21
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c0:	f7fd fd58 	bl	8002d74 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052da:	d108      	bne.n	80052ee <HAL_UART_Transmit+0x6c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	e003      	b.n	80052f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052f6:	e02e      	b.n	8005356 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	2180      	movs	r1, #128	@ 0x80
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f848 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e03a      	b.n	8005390 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800532e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	3302      	adds	r3, #2
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e007      	b.n	8005348 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3301      	adds	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1cb      	bne.n	80052f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2200      	movs	r2, #0
 8005368:	2140      	movs	r1, #64	@ 0x40
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f814 	bl	8005398 <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a8:	e03b      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d037      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fd fcdf 	bl	8002d74 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e03a      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d023      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b80      	cmp	r3, #128	@ 0x80
 80053de:	d020      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d01d      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d116      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f81d 	bl	800544a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2208      	movs	r2, #8
 8005414:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e00f      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	429a      	cmp	r2, r3
 800543e:	d0b4      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800544a:	b480      	push	{r7}
 800544c:	b095      	sub	sp, #84	@ 0x54
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005472:	643a      	str	r2, [r7, #64]	@ 0x40
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e5      	bne.n	8005452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	61fb      	str	r3, [r7, #28]
   return(result);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e5      	bne.n	8005486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d119      	bne.n	80054f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 0310 	bic.w	r3, r3, #16
 80054d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e2:	61ba      	str	r2, [r7, #24]
 80054e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	613b      	str	r3, [r7, #16]
   return(result);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005504:	bf00      	nop
 8005506:	3754      	adds	r7, #84	@ 0x54
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
	...

08005510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800554a:	f023 030c 	bic.w	r3, r3, #12
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	430b      	orrs	r3, r1
 8005556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2c      	ldr	r2, [pc, #176]	@ (8005624 <UART_SetConfig+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d103      	bne.n	8005580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe faca 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	e002      	b.n	8005586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe fab2 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8005584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009a      	lsls	r2, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	4a22      	ldr	r2, [pc, #136]	@ (8005628 <UART_SetConfig+0x118>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	0119      	lsls	r1, r3, #4
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <UART_SetConfig+0x118>)
 80055be:	fba3 0302 	umull	r0, r3, r3, r2
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2064      	movs	r0, #100	@ 0x64
 80055c6:	fb00 f303 	mul.w	r3, r0, r3
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	3332      	adds	r3, #50	@ 0x32
 80055d0:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <UART_SetConfig+0x118>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055dc:	4419      	add	r1, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <UART_SetConfig+0x118>)
 80055f6:	fba3 0302 	umull	r0, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2064      	movs	r0, #100	@ 0x64
 80055fe:	fb00 f303 	mul.w	r3, r0, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	@ 0x32
 8005608:	4a07      	ldr	r2, [pc, #28]	@ (8005628 <UART_SetConfig+0x118>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 020f 	and.w	r2, r3, #15
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	440a      	add	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40013800 	.word	0x40013800
 8005628:	51eb851f 	.word	0x51eb851f

0800562c <__cvt>:
 800562c:	2b00      	cmp	r3, #0
 800562e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005632:	461d      	mov	r5, r3
 8005634:	bfbb      	ittet	lt
 8005636:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800563a:	461d      	movlt	r5, r3
 800563c:	2300      	movge	r3, #0
 800563e:	232d      	movlt	r3, #45	@ 0x2d
 8005640:	b088      	sub	sp, #32
 8005642:	4614      	mov	r4, r2
 8005644:	bfb8      	it	lt
 8005646:	4614      	movlt	r4, r2
 8005648:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800564a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800564c:	7013      	strb	r3, [r2, #0]
 800564e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005650:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005654:	f023 0820 	bic.w	r8, r3, #32
 8005658:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800565c:	d005      	beq.n	800566a <__cvt+0x3e>
 800565e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005662:	d100      	bne.n	8005666 <__cvt+0x3a>
 8005664:	3601      	adds	r6, #1
 8005666:	2302      	movs	r3, #2
 8005668:	e000      	b.n	800566c <__cvt+0x40>
 800566a:	2303      	movs	r3, #3
 800566c:	aa07      	add	r2, sp, #28
 800566e:	9204      	str	r2, [sp, #16]
 8005670:	aa06      	add	r2, sp, #24
 8005672:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005676:	e9cd 3600 	strd	r3, r6, [sp]
 800567a:	4622      	mov	r2, r4
 800567c:	462b      	mov	r3, r5
 800567e:	f000 ff53 	bl	8006528 <_dtoa_r>
 8005682:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005686:	4607      	mov	r7, r0
 8005688:	d119      	bne.n	80056be <__cvt+0x92>
 800568a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800568c:	07db      	lsls	r3, r3, #31
 800568e:	d50e      	bpl.n	80056ae <__cvt+0x82>
 8005690:	eb00 0906 	add.w	r9, r0, r6
 8005694:	2200      	movs	r2, #0
 8005696:	2300      	movs	r3, #0
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fb f984 	bl	80009a8 <__aeabi_dcmpeq>
 80056a0:	b108      	cbz	r0, 80056a6 <__cvt+0x7a>
 80056a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80056a6:	2230      	movs	r2, #48	@ 0x30
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	454b      	cmp	r3, r9
 80056ac:	d31e      	bcc.n	80056ec <__cvt+0xc0>
 80056ae:	4638      	mov	r0, r7
 80056b0:	9b07      	ldr	r3, [sp, #28]
 80056b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80056b4:	1bdb      	subs	r3, r3, r7
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	b008      	add	sp, #32
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056c2:	eb00 0906 	add.w	r9, r0, r6
 80056c6:	d1e5      	bne.n	8005694 <__cvt+0x68>
 80056c8:	7803      	ldrb	r3, [r0, #0]
 80056ca:	2b30      	cmp	r3, #48	@ 0x30
 80056cc:	d10a      	bne.n	80056e4 <__cvt+0xb8>
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	4620      	mov	r0, r4
 80056d4:	4629      	mov	r1, r5
 80056d6:	f7fb f967 	bl	80009a8 <__aeabi_dcmpeq>
 80056da:	b918      	cbnz	r0, 80056e4 <__cvt+0xb8>
 80056dc:	f1c6 0601 	rsb	r6, r6, #1
 80056e0:	f8ca 6000 	str.w	r6, [sl]
 80056e4:	f8da 3000 	ldr.w	r3, [sl]
 80056e8:	4499      	add	r9, r3
 80056ea:	e7d3      	b.n	8005694 <__cvt+0x68>
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	9107      	str	r1, [sp, #28]
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e7d9      	b.n	80056a8 <__cvt+0x7c>

080056f4 <__exponent>:
 80056f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f6:	2900      	cmp	r1, #0
 80056f8:	bfb6      	itet	lt
 80056fa:	232d      	movlt	r3, #45	@ 0x2d
 80056fc:	232b      	movge	r3, #43	@ 0x2b
 80056fe:	4249      	neglt	r1, r1
 8005700:	2909      	cmp	r1, #9
 8005702:	7002      	strb	r2, [r0, #0]
 8005704:	7043      	strb	r3, [r0, #1]
 8005706:	dd29      	ble.n	800575c <__exponent+0x68>
 8005708:	f10d 0307 	add.w	r3, sp, #7
 800570c:	461d      	mov	r5, r3
 800570e:	270a      	movs	r7, #10
 8005710:	fbb1 f6f7 	udiv	r6, r1, r7
 8005714:	461a      	mov	r2, r3
 8005716:	fb07 1416 	mls	r4, r7, r6, r1
 800571a:	3430      	adds	r4, #48	@ 0x30
 800571c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005720:	460c      	mov	r4, r1
 8005722:	2c63      	cmp	r4, #99	@ 0x63
 8005724:	4631      	mov	r1, r6
 8005726:	f103 33ff 	add.w	r3, r3, #4294967295
 800572a:	dcf1      	bgt.n	8005710 <__exponent+0x1c>
 800572c:	3130      	adds	r1, #48	@ 0x30
 800572e:	1e94      	subs	r4, r2, #2
 8005730:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005734:	4623      	mov	r3, r4
 8005736:	1c41      	adds	r1, r0, #1
 8005738:	42ab      	cmp	r3, r5
 800573a:	d30a      	bcc.n	8005752 <__exponent+0x5e>
 800573c:	f10d 0309 	add.w	r3, sp, #9
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	42ac      	cmp	r4, r5
 8005744:	bf88      	it	hi
 8005746:	2300      	movhi	r3, #0
 8005748:	3302      	adds	r3, #2
 800574a:	4403      	add	r3, r0
 800574c:	1a18      	subs	r0, r3, r0
 800574e:	b003      	add	sp, #12
 8005750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005752:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005756:	f801 6f01 	strb.w	r6, [r1, #1]!
 800575a:	e7ed      	b.n	8005738 <__exponent+0x44>
 800575c:	2330      	movs	r3, #48	@ 0x30
 800575e:	3130      	adds	r1, #48	@ 0x30
 8005760:	7083      	strb	r3, [r0, #2]
 8005762:	70c1      	strb	r1, [r0, #3]
 8005764:	1d03      	adds	r3, r0, #4
 8005766:	e7f1      	b.n	800574c <__exponent+0x58>

08005768 <_printf_float>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	b091      	sub	sp, #68	@ 0x44
 800576e:	460c      	mov	r4, r1
 8005770:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005774:	4616      	mov	r6, r2
 8005776:	461f      	mov	r7, r3
 8005778:	4605      	mov	r5, r0
 800577a:	f000 fdc5 	bl	8006308 <_localeconv_r>
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	9308      	str	r3, [sp, #32]
 8005784:	f7fa fce4 	bl	8000150 <strlen>
 8005788:	2300      	movs	r3, #0
 800578a:	930e      	str	r3, [sp, #56]	@ 0x38
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	9009      	str	r0, [sp, #36]	@ 0x24
 8005792:	3307      	adds	r3, #7
 8005794:	f023 0307 	bic.w	r3, r3, #7
 8005798:	f103 0208 	add.w	r2, r3, #8
 800579c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057a0:	f8d4 b000 	ldr.w	fp, [r4]
 80057a4:	f8c8 2000 	str.w	r2, [r8]
 80057a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a34 <_printf_float+0x2cc>)
 80057c4:	f7fb f922 	bl	8000a0c <__aeabi_dcmpun>
 80057c8:	bb70      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	4b98      	ldr	r3, [pc, #608]	@ (8005a34 <_printf_float+0x2cc>)
 80057d4:	f7fb f8fc 	bl	80009d0 <__aeabi_dcmple>
 80057d8:	bb30      	cbnz	r0, 8005828 <_printf_float+0xc0>
 80057da:	2200      	movs	r2, #0
 80057dc:	2300      	movs	r3, #0
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fb f8eb 	bl	80009bc <__aeabi_dcmplt>
 80057e6:	b110      	cbz	r0, 80057ee <_printf_float+0x86>
 80057e8:	232d      	movs	r3, #45	@ 0x2d
 80057ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ee:	4a92      	ldr	r2, [pc, #584]	@ (8005a38 <_printf_float+0x2d0>)
 80057f0:	4b92      	ldr	r3, [pc, #584]	@ (8005a3c <_printf_float+0x2d4>)
 80057f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057f6:	bf94      	ite	ls
 80057f8:	4690      	movls	r8, r2
 80057fa:	4698      	movhi	r8, r3
 80057fc:	2303      	movs	r3, #3
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	f02b 0304 	bic.w	r3, fp, #4
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	4633      	mov	r3, r6
 800580c:	4621      	mov	r1, r4
 800580e:	4628      	mov	r0, r5
 8005810:	9700      	str	r7, [sp, #0]
 8005812:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005814:	f000 f9d4 	bl	8005bc0 <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	f040 8090 	bne.w	800593e <_printf_float+0x1d6>
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	b011      	add	sp, #68	@ 0x44
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	4640      	mov	r0, r8
 800582e:	4649      	mov	r1, r9
 8005830:	f7fb f8ec 	bl	8000a0c <__aeabi_dcmpun>
 8005834:	b148      	cbz	r0, 800584a <_printf_float+0xe2>
 8005836:	464b      	mov	r3, r9
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfb8      	it	lt
 800583c:	232d      	movlt	r3, #45	@ 0x2d
 800583e:	4a80      	ldr	r2, [pc, #512]	@ (8005a40 <_printf_float+0x2d8>)
 8005840:	bfb8      	it	lt
 8005842:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005846:	4b7f      	ldr	r3, [pc, #508]	@ (8005a44 <_printf_float+0x2dc>)
 8005848:	e7d3      	b.n	80057f2 <_printf_float+0x8a>
 800584a:	6863      	ldr	r3, [r4, #4]
 800584c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	d13f      	bne.n	80058d4 <_printf_float+0x16c>
 8005854:	2306      	movs	r3, #6
 8005856:	6063      	str	r3, [r4, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	9206      	str	r2, [sp, #24]
 8005862:	aa0e      	add	r2, sp, #56	@ 0x38
 8005864:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005868:	aa0d      	add	r2, sp, #52	@ 0x34
 800586a:	9203      	str	r2, [sp, #12]
 800586c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005870:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005874:	6863      	ldr	r3, [r4, #4]
 8005876:	4642      	mov	r2, r8
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4628      	mov	r0, r5
 800587c:	464b      	mov	r3, r9
 800587e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005880:	f7ff fed4 	bl	800562c <__cvt>
 8005884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005886:	4680      	mov	r8, r0
 8005888:	2947      	cmp	r1, #71	@ 0x47
 800588a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800588c:	d128      	bne.n	80058e0 <_printf_float+0x178>
 800588e:	1cc8      	adds	r0, r1, #3
 8005890:	db02      	blt.n	8005898 <_printf_float+0x130>
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	4299      	cmp	r1, r3
 8005896:	dd40      	ble.n	800591a <_printf_float+0x1b2>
 8005898:	f1aa 0a02 	sub.w	sl, sl, #2
 800589c:	fa5f fa8a 	uxtb.w	sl, sl
 80058a0:	4652      	mov	r2, sl
 80058a2:	3901      	subs	r1, #1
 80058a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80058aa:	f7ff ff23 	bl	80056f4 <__exponent>
 80058ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058b0:	4681      	mov	r9, r0
 80058b2:	1813      	adds	r3, r2, r0
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	dc02      	bgt.n	80058c0 <_printf_float+0x158>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	07d2      	lsls	r2, r2, #31
 80058be:	d501      	bpl.n	80058c4 <_printf_float+0x15c>
 80058c0:	3301      	adds	r3, #1
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d09e      	beq.n	800580a <_printf_float+0xa2>
 80058cc:	232d      	movs	r3, #45	@ 0x2d
 80058ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058d2:	e79a      	b.n	800580a <_printf_float+0xa2>
 80058d4:	2947      	cmp	r1, #71	@ 0x47
 80058d6:	d1bf      	bne.n	8005858 <_printf_float+0xf0>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1bd      	bne.n	8005858 <_printf_float+0xf0>
 80058dc:	2301      	movs	r3, #1
 80058de:	e7ba      	b.n	8005856 <_printf_float+0xee>
 80058e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058e4:	d9dc      	bls.n	80058a0 <_printf_float+0x138>
 80058e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058ea:	d118      	bne.n	800591e <_printf_float+0x1b6>
 80058ec:	2900      	cmp	r1, #0
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	dd0b      	ble.n	800590a <_printf_float+0x1a2>
 80058f2:	6121      	str	r1, [r4, #16]
 80058f4:	b913      	cbnz	r3, 80058fc <_printf_float+0x194>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	07d0      	lsls	r0, r2, #31
 80058fa:	d502      	bpl.n	8005902 <_printf_float+0x19a>
 80058fc:	3301      	adds	r3, #1
 80058fe:	440b      	add	r3, r1
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	f04f 0900 	mov.w	r9, #0
 8005906:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005908:	e7dc      	b.n	80058c4 <_printf_float+0x15c>
 800590a:	b913      	cbnz	r3, 8005912 <_printf_float+0x1aa>
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	07d2      	lsls	r2, r2, #31
 8005910:	d501      	bpl.n	8005916 <_printf_float+0x1ae>
 8005912:	3302      	adds	r3, #2
 8005914:	e7f4      	b.n	8005900 <_printf_float+0x198>
 8005916:	2301      	movs	r3, #1
 8005918:	e7f2      	b.n	8005900 <_printf_float+0x198>
 800591a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800591e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005920:	4299      	cmp	r1, r3
 8005922:	db05      	blt.n	8005930 <_printf_float+0x1c8>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	6121      	str	r1, [r4, #16]
 8005928:	07d8      	lsls	r0, r3, #31
 800592a:	d5ea      	bpl.n	8005902 <_printf_float+0x19a>
 800592c:	1c4b      	adds	r3, r1, #1
 800592e:	e7e7      	b.n	8005900 <_printf_float+0x198>
 8005930:	2900      	cmp	r1, #0
 8005932:	bfcc      	ite	gt
 8005934:	2201      	movgt	r2, #1
 8005936:	f1c1 0202 	rsble	r2, r1, #2
 800593a:	4413      	add	r3, r2
 800593c:	e7e0      	b.n	8005900 <_printf_float+0x198>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	055a      	lsls	r2, r3, #21
 8005942:	d407      	bmi.n	8005954 <_printf_float+0x1ec>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	4642      	mov	r2, r8
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d12b      	bne.n	80059aa <_printf_float+0x242>
 8005952:	e764      	b.n	800581e <_printf_float+0xb6>
 8005954:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005958:	f240 80dc 	bls.w	8005b14 <_printf_float+0x3ac>
 800595c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005960:	2200      	movs	r2, #0
 8005962:	2300      	movs	r3, #0
 8005964:	f7fb f820 	bl	80009a8 <__aeabi_dcmpeq>
 8005968:	2800      	cmp	r0, #0
 800596a:	d033      	beq.n	80059d4 <_printf_float+0x26c>
 800596c:	2301      	movs	r3, #1
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <_printf_float+0x2e0>)
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f af51 	beq.w	800581e <_printf_float+0xb6>
 800597c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005980:	4543      	cmp	r3, r8
 8005982:	db02      	blt.n	800598a <_printf_float+0x222>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	07d8      	lsls	r0, r3, #31
 8005988:	d50f      	bpl.n	80059aa <_printf_float+0x242>
 800598a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f af42 	beq.w	800581e <_printf_float+0xb6>
 800599a:	f04f 0900 	mov.w	r9, #0
 800599e:	f108 38ff 	add.w	r8, r8, #4294967295
 80059a2:	f104 0a1a 	add.w	sl, r4, #26
 80059a6:	45c8      	cmp	r8, r9
 80059a8:	dc09      	bgt.n	80059be <_printf_float+0x256>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	079b      	lsls	r3, r3, #30
 80059ae:	f100 8102 	bmi.w	8005bb6 <_printf_float+0x44e>
 80059b2:	68e0      	ldr	r0, [r4, #12]
 80059b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059b6:	4298      	cmp	r0, r3
 80059b8:	bfb8      	it	lt
 80059ba:	4618      	movlt	r0, r3
 80059bc:	e731      	b.n	8005822 <_printf_float+0xba>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f af28 	beq.w	800581e <_printf_float+0xb6>
 80059ce:	f109 0901 	add.w	r9, r9, #1
 80059d2:	e7e8      	b.n	80059a6 <_printf_float+0x23e>
 80059d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	dc38      	bgt.n	8005a4c <_printf_float+0x2e4>
 80059da:	2301      	movs	r3, #1
 80059dc:	4631      	mov	r1, r6
 80059de:	4628      	mov	r0, r5
 80059e0:	4a19      	ldr	r2, [pc, #100]	@ (8005a48 <_printf_float+0x2e0>)
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f af1a 	beq.w	800581e <_printf_float+0xb6>
 80059ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80059ee:	ea59 0303 	orrs.w	r3, r9, r3
 80059f2:	d102      	bne.n	80059fa <_printf_float+0x292>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07d9      	lsls	r1, r3, #31
 80059f8:	d5d7      	bpl.n	80059aa <_printf_float+0x242>
 80059fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b8      	blx	r7
 8005a04:	3001      	adds	r0, #1
 8005a06:	f43f af0a 	beq.w	800581e <_printf_float+0xb6>
 8005a0a:	f04f 0a00 	mov.w	sl, #0
 8005a0e:	f104 0b1a 	add.w	fp, r4, #26
 8005a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a14:	425b      	negs	r3, r3
 8005a16:	4553      	cmp	r3, sl
 8005a18:	dc01      	bgt.n	8005a1e <_printf_float+0x2b6>
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	e793      	b.n	8005946 <_printf_float+0x1de>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	465a      	mov	r2, fp
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f aef8 	beq.w	800581e <_printf_float+0xb6>
 8005a2e:	f10a 0a01 	add.w	sl, sl, #1
 8005a32:	e7ee      	b.n	8005a12 <_printf_float+0x2aa>
 8005a34:	7fefffff 	.word	0x7fefffff
 8005a38:	0800880e 	.word	0x0800880e
 8005a3c:	08008812 	.word	0x08008812
 8005a40:	08008816 	.word	0x08008816
 8005a44:	0800881a 	.word	0x0800881a
 8005a48:	0800881e 	.word	0x0800881e
 8005a4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a4e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005a52:	4553      	cmp	r3, sl
 8005a54:	bfa8      	it	ge
 8005a56:	4653      	movge	r3, sl
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	4699      	mov	r9, r3
 8005a5c:	dc36      	bgt.n	8005acc <_printf_float+0x364>
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a66:	f104 021a 	add.w	r2, r4, #26
 8005a6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6e:	eba3 0309 	sub.w	r3, r3, r9
 8005a72:	455b      	cmp	r3, fp
 8005a74:	dc31      	bgt.n	8005ada <_printf_float+0x372>
 8005a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a78:	459a      	cmp	sl, r3
 8005a7a:	dc3a      	bgt.n	8005af2 <_printf_float+0x38a>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	07da      	lsls	r2, r3, #31
 8005a80:	d437      	bmi.n	8005af2 <_printf_float+0x38a>
 8005a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a84:	ebaa 0903 	sub.w	r9, sl, r3
 8005a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a8a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a8e:	4599      	cmp	r9, r3
 8005a90:	bfa8      	it	ge
 8005a92:	4699      	movge	r9, r3
 8005a94:	f1b9 0f00 	cmp.w	r9, #0
 8005a98:	dc33      	bgt.n	8005b02 <_printf_float+0x39a>
 8005a9a:	f04f 0800 	mov.w	r8, #0
 8005a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aa2:	f104 0b1a 	add.w	fp, r4, #26
 8005aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005aa8:	ebaa 0303 	sub.w	r3, sl, r3
 8005aac:	eba3 0309 	sub.w	r3, r3, r9
 8005ab0:	4543      	cmp	r3, r8
 8005ab2:	f77f af7a 	ble.w	80059aa <_printf_float+0x242>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	465a      	mov	r2, fp
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f aeac 	beq.w	800581e <_printf_float+0xb6>
 8005ac6:	f108 0801 	add.w	r8, r8, #1
 8005aca:	e7ec      	b.n	8005aa6 <_printf_float+0x33e>
 8005acc:	4642      	mov	r2, r8
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d1c2      	bne.n	8005a5e <_printf_float+0x2f6>
 8005ad8:	e6a1      	b.n	800581e <_printf_float+0xb6>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f43f ae9a 	beq.w	800581e <_printf_float+0xb6>
 8005aea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005aec:	f10b 0b01 	add.w	fp, fp, #1
 8005af0:	e7bb      	b.n	8005a6a <_printf_float+0x302>
 8005af2:	4631      	mov	r1, r6
 8005af4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	d1c0      	bne.n	8005a82 <_printf_float+0x31a>
 8005b00:	e68d      	b.n	800581e <_printf_float+0xb6>
 8005b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b04:	464b      	mov	r3, r9
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	4442      	add	r2, r8
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d1c3      	bne.n	8005a9a <_printf_float+0x332>
 8005b12:	e684      	b.n	800581e <_printf_float+0xb6>
 8005b14:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b18:	f1ba 0f01 	cmp.w	sl, #1
 8005b1c:	dc01      	bgt.n	8005b22 <_printf_float+0x3ba>
 8005b1e:	07db      	lsls	r3, r3, #31
 8005b20:	d536      	bpl.n	8005b90 <_printf_float+0x428>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4642      	mov	r2, r8
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f ae76 	beq.w	800581e <_printf_float+0xb6>
 8005b32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f ae6e 	beq.w	800581e <_printf_float+0xb6>
 8005b42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b46:	2200      	movs	r2, #0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b4e:	f7fa ff2b 	bl	80009a8 <__aeabi_dcmpeq>
 8005b52:	b9c0      	cbnz	r0, 8005b86 <_printf_float+0x41e>
 8005b54:	4653      	mov	r3, sl
 8005b56:	f108 0201 	add.w	r2, r8, #1
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	d10c      	bne.n	8005b7e <_printf_float+0x416>
 8005b64:	e65b      	b.n	800581e <_printf_float+0xb6>
 8005b66:	2301      	movs	r3, #1
 8005b68:	465a      	mov	r2, fp
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	f43f ae54 	beq.w	800581e <_printf_float+0xb6>
 8005b76:	f108 0801 	add.w	r8, r8, #1
 8005b7a:	45d0      	cmp	r8, sl
 8005b7c:	dbf3      	blt.n	8005b66 <_printf_float+0x3fe>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b84:	e6e0      	b.n	8005948 <_printf_float+0x1e0>
 8005b86:	f04f 0800 	mov.w	r8, #0
 8005b8a:	f104 0b1a 	add.w	fp, r4, #26
 8005b8e:	e7f4      	b.n	8005b7a <_printf_float+0x412>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4642      	mov	r2, r8
 8005b94:	e7e1      	b.n	8005b5a <_printf_float+0x3f2>
 8005b96:	2301      	movs	r3, #1
 8005b98:	464a      	mov	r2, r9
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f ae3c 	beq.w	800581e <_printf_float+0xb6>
 8005ba6:	f108 0801 	add.w	r8, r8, #1
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005bae:	1a5b      	subs	r3, r3, r1
 8005bb0:	4543      	cmp	r3, r8
 8005bb2:	dcf0      	bgt.n	8005b96 <_printf_float+0x42e>
 8005bb4:	e6fd      	b.n	80059b2 <_printf_float+0x24a>
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	f104 0919 	add.w	r9, r4, #25
 8005bbe:	e7f4      	b.n	8005baa <_printf_float+0x442>

08005bc0 <_printf_common>:
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	4698      	mov	r8, r3
 8005bc8:	688a      	ldr	r2, [r1, #8]
 8005bca:	690b      	ldr	r3, [r1, #16]
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bfb8      	it	lt
 8005bd2:	4613      	movlt	r3, r2
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005be0:	b10a      	cbz	r2, 8005be6 <_printf_common+0x26>
 8005be2:	3301      	adds	r3, #1
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	0699      	lsls	r1, r3, #26
 8005bea:	bf42      	ittt	mi
 8005bec:	6833      	ldrmi	r3, [r6, #0]
 8005bee:	3302      	addmi	r3, #2
 8005bf0:	6033      	strmi	r3, [r6, #0]
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	f015 0506 	ands.w	r5, r5, #6
 8005bf8:	d106      	bne.n	8005c08 <_printf_common+0x48>
 8005bfa:	f104 0a19 	add.w	sl, r4, #25
 8005bfe:	68e3      	ldr	r3, [r4, #12]
 8005c00:	6832      	ldr	r2, [r6, #0]
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	42ab      	cmp	r3, r5
 8005c06:	dc2b      	bgt.n	8005c60 <_printf_common+0xa0>
 8005c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c0c:	6822      	ldr	r2, [r4, #0]
 8005c0e:	3b00      	subs	r3, #0
 8005c10:	bf18      	it	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	0692      	lsls	r2, r2, #26
 8005c16:	d430      	bmi.n	8005c7a <_printf_common+0xba>
 8005c18:	4641      	mov	r1, r8
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c20:	47c8      	blx	r9
 8005c22:	3001      	adds	r0, #1
 8005c24:	d023      	beq.n	8005c6e <_printf_common+0xae>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	f003 0306 	and.w	r3, r3, #6
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	bf14      	ite	ne
 8005c32:	2500      	movne	r5, #0
 8005c34:	6833      	ldreq	r3, [r6, #0]
 8005c36:	f04f 0600 	mov.w	r6, #0
 8005c3a:	bf08      	it	eq
 8005c3c:	68e5      	ldreq	r5, [r4, #12]
 8005c3e:	f104 041a 	add.w	r4, r4, #26
 8005c42:	bf08      	it	eq
 8005c44:	1aed      	subeq	r5, r5, r3
 8005c46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c4a:	bf08      	it	eq
 8005c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bfc4      	itt	gt
 8005c54:	1a9b      	subgt	r3, r3, r2
 8005c56:	18ed      	addgt	r5, r5, r3
 8005c58:	42b5      	cmp	r5, r6
 8005c5a:	d11a      	bne.n	8005c92 <_printf_common+0xd2>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e008      	b.n	8005c72 <_printf_common+0xb2>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4652      	mov	r2, sl
 8005c64:	4641      	mov	r1, r8
 8005c66:	4638      	mov	r0, r7
 8005c68:	47c8      	blx	r9
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d103      	bne.n	8005c76 <_printf_common+0xb6>
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c76:	3501      	adds	r5, #1
 8005c78:	e7c1      	b.n	8005bfe <_printf_common+0x3e>
 8005c7a:	2030      	movs	r0, #48	@ 0x30
 8005c7c:	18e1      	adds	r1, r4, r3
 8005c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c88:	4422      	add	r2, r4
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c90:	e7c2      	b.n	8005c18 <_printf_common+0x58>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4622      	mov	r2, r4
 8005c96:	4641      	mov	r1, r8
 8005c98:	4638      	mov	r0, r7
 8005c9a:	47c8      	blx	r9
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d0e6      	beq.n	8005c6e <_printf_common+0xae>
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	e7d9      	b.n	8005c58 <_printf_common+0x98>

08005ca4 <_printf_i>:
 8005ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	7e0f      	ldrb	r7, [r1, #24]
 8005caa:	4691      	mov	r9, r2
 8005cac:	2f78      	cmp	r7, #120	@ 0x78
 8005cae:	4680      	mov	r8, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	469a      	mov	sl, r3
 8005cb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cba:	d807      	bhi.n	8005ccc <_printf_i+0x28>
 8005cbc:	2f62      	cmp	r7, #98	@ 0x62
 8005cbe:	d80a      	bhi.n	8005cd6 <_printf_i+0x32>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	f000 80d3 	beq.w	8005e6c <_printf_i+0x1c8>
 8005cc6:	2f58      	cmp	r7, #88	@ 0x58
 8005cc8:	f000 80ba 	beq.w	8005e40 <_printf_i+0x19c>
 8005ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cd4:	e03a      	b.n	8005d4c <_printf_i+0xa8>
 8005cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cda:	2b15      	cmp	r3, #21
 8005cdc:	d8f6      	bhi.n	8005ccc <_printf_i+0x28>
 8005cde:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce4 <_printf_i+0x40>)
 8005ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005ccd 	.word	0x08005ccd
 8005cf0:	08005ccd 	.word	0x08005ccd
 8005cf4:	08005ccd 	.word	0x08005ccd
 8005cf8:	08005ccd 	.word	0x08005ccd
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005ccd 	.word	0x08005ccd
 8005d04:	08005ccd 	.word	0x08005ccd
 8005d08:	08005ccd 	.word	0x08005ccd
 8005d0c:	08005ccd 	.word	0x08005ccd
 8005d10:	08005e53 	.word	0x08005e53
 8005d14:	08005d7b 	.word	0x08005d7b
 8005d18:	08005e0d 	.word	0x08005e0d
 8005d1c:	08005ccd 	.word	0x08005ccd
 8005d20:	08005ccd 	.word	0x08005ccd
 8005d24:	08005e75 	.word	0x08005e75
 8005d28:	08005ccd 	.word	0x08005ccd
 8005d2c:	08005d7b 	.word	0x08005d7b
 8005d30:	08005ccd 	.word	0x08005ccd
 8005d34:	08005ccd 	.word	0x08005ccd
 8005d38:	08005e15 	.word	0x08005e15
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6032      	str	r2, [r6, #0]
 8005d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e09e      	b.n	8005e8e <_printf_i+0x1ea>
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1d19      	adds	r1, r3, #4
 8005d56:	6031      	str	r1, [r6, #0]
 8005d58:	0606      	lsls	r6, r0, #24
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0xbc>
 8005d5c:	681d      	ldr	r5, [r3, #0]
 8005d5e:	e003      	b.n	8005d68 <_printf_i+0xc4>
 8005d60:	0645      	lsls	r5, r0, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0xb8>
 8005d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	da03      	bge.n	8005d74 <_printf_i+0xd0>
 8005d6c:	232d      	movs	r3, #45	@ 0x2d
 8005d6e:	426d      	negs	r5, r5
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d74:	230a      	movs	r3, #10
 8005d76:	4859      	ldr	r0, [pc, #356]	@ (8005edc <_printf_i+0x238>)
 8005d78:	e011      	b.n	8005d9e <_printf_i+0xfa>
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	0608      	lsls	r0, r1, #24
 8005d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d84:	d402      	bmi.n	8005d8c <_printf_i+0xe8>
 8005d86:	0649      	lsls	r1, r1, #25
 8005d88:	bf48      	it	mi
 8005d8a:	b2ad      	uxthmi	r5, r5
 8005d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	bf14      	ite	ne
 8005d92:	230a      	movne	r3, #10
 8005d94:	2308      	moveq	r3, #8
 8005d96:	4851      	ldr	r0, [pc, #324]	@ (8005edc <_printf_i+0x238>)
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d9e:	6866      	ldr	r6, [r4, #4]
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	bfa8      	it	ge
 8005da4:	6821      	ldrge	r1, [r4, #0]
 8005da6:	60a6      	str	r6, [r4, #8]
 8005da8:	bfa4      	itt	ge
 8005daa:	f021 0104 	bicge.w	r1, r1, #4
 8005dae:	6021      	strge	r1, [r4, #0]
 8005db0:	b90d      	cbnz	r5, 8005db6 <_printf_i+0x112>
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d04b      	beq.n	8005e4e <_printf_i+0x1aa>
 8005db6:	4616      	mov	r6, r2
 8005db8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dbc:	fb03 5711 	mls	r7, r3, r1, r5
 8005dc0:	5dc7      	ldrb	r7, [r0, r7]
 8005dc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc6:	462f      	mov	r7, r5
 8005dc8:	42bb      	cmp	r3, r7
 8005dca:	460d      	mov	r5, r1
 8005dcc:	d9f4      	bls.n	8005db8 <_printf_i+0x114>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d10b      	bne.n	8005dea <_printf_i+0x146>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	07df      	lsls	r7, r3, #31
 8005dd6:	d508      	bpl.n	8005dea <_printf_i+0x146>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	6861      	ldr	r1, [r4, #4]
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	bfde      	ittt	le
 8005de0:	2330      	movle	r3, #48	@ 0x30
 8005de2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dea:	1b92      	subs	r2, r2, r6
 8005dec:	6122      	str	r2, [r4, #16]
 8005dee:	464b      	mov	r3, r9
 8005df0:	4621      	mov	r1, r4
 8005df2:	4640      	mov	r0, r8
 8005df4:	f8cd a000 	str.w	sl, [sp]
 8005df8:	aa03      	add	r2, sp, #12
 8005dfa:	f7ff fee1 	bl	8005bc0 <_printf_common>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d14a      	bne.n	8005e98 <_printf_i+0x1f4>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	b004      	add	sp, #16
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	2778      	movs	r7, #120	@ 0x78
 8005e16:	4832      	ldr	r0, [pc, #200]	@ (8005ee0 <_printf_i+0x23c>)
 8005e18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	6831      	ldr	r1, [r6, #0]
 8005e20:	061f      	lsls	r7, r3, #24
 8005e22:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e26:	d402      	bmi.n	8005e2e <_printf_i+0x18a>
 8005e28:	065f      	lsls	r7, r3, #25
 8005e2a:	bf48      	it	mi
 8005e2c:	b2ad      	uxthmi	r5, r5
 8005e2e:	6031      	str	r1, [r6, #0]
 8005e30:	07d9      	lsls	r1, r3, #31
 8005e32:	bf44      	itt	mi
 8005e34:	f043 0320 	orrmi.w	r3, r3, #32
 8005e38:	6023      	strmi	r3, [r4, #0]
 8005e3a:	b11d      	cbz	r5, 8005e44 <_printf_i+0x1a0>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	e7ab      	b.n	8005d98 <_printf_i+0xf4>
 8005e40:	4826      	ldr	r0, [pc, #152]	@ (8005edc <_printf_i+0x238>)
 8005e42:	e7e9      	b.n	8005e18 <_printf_i+0x174>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	f023 0320 	bic.w	r3, r3, #32
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	e7f6      	b.n	8005e3c <_printf_i+0x198>
 8005e4e:	4616      	mov	r6, r2
 8005e50:	e7bd      	b.n	8005dce <_printf_i+0x12a>
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	1d18      	adds	r0, r3, #4
 8005e58:	6961      	ldr	r1, [r4, #20]
 8005e5a:	6030      	str	r0, [r6, #0]
 8005e5c:	062e      	lsls	r6, r5, #24
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	d501      	bpl.n	8005e66 <_printf_i+0x1c2>
 8005e62:	6019      	str	r1, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <_printf_i+0x1c8>
 8005e66:	0668      	lsls	r0, r5, #25
 8005e68:	d5fb      	bpl.n	8005e62 <_printf_i+0x1be>
 8005e6a:	8019      	strh	r1, [r3, #0]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4616      	mov	r6, r2
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	e7bc      	b.n	8005dee <_printf_i+0x14a>
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	2100      	movs	r1, #0
 8005e78:	1d1a      	adds	r2, r3, #4
 8005e7a:	6032      	str	r2, [r6, #0]
 8005e7c:	681e      	ldr	r6, [r3, #0]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 fab8 	bl	80063f6 <memchr>
 8005e86:	b108      	cbz	r0, 8005e8c <_printf_i+0x1e8>
 8005e88:	1b80      	subs	r0, r0, r6
 8005e8a:	6060      	str	r0, [r4, #4]
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	2300      	movs	r3, #0
 8005e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e96:	e7aa      	b.n	8005dee <_printf_i+0x14a>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	47d0      	blx	sl
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d0ad      	beq.n	8005e02 <_printf_i+0x15e>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	079b      	lsls	r3, r3, #30
 8005eaa:	d413      	bmi.n	8005ed4 <_printf_i+0x230>
 8005eac:	68e0      	ldr	r0, [r4, #12]
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	bfb8      	it	lt
 8005eb4:	4618      	movlt	r0, r3
 8005eb6:	e7a6      	b.n	8005e06 <_printf_i+0x162>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	47d0      	blx	sl
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d09d      	beq.n	8005e02 <_printf_i+0x15e>
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	68e3      	ldr	r3, [r4, #12]
 8005eca:	9903      	ldr	r1, [sp, #12]
 8005ecc:	1a5b      	subs	r3, r3, r1
 8005ece:	42ab      	cmp	r3, r5
 8005ed0:	dcf2      	bgt.n	8005eb8 <_printf_i+0x214>
 8005ed2:	e7eb      	b.n	8005eac <_printf_i+0x208>
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	f104 0619 	add.w	r6, r4, #25
 8005eda:	e7f5      	b.n	8005ec8 <_printf_i+0x224>
 8005edc:	08008820 	.word	0x08008820
 8005ee0:	08008831 	.word	0x08008831

08005ee4 <std>:
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	4604      	mov	r4, r0
 8005eea:	e9c0 3300 	strd	r3, r3, [r0]
 8005eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef2:	6083      	str	r3, [r0, #8]
 8005ef4:	8181      	strh	r1, [r0, #12]
 8005ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ef8:	81c2      	strh	r2, [r0, #14]
 8005efa:	6183      	str	r3, [r0, #24]
 8005efc:	4619      	mov	r1, r3
 8005efe:	2208      	movs	r2, #8
 8005f00:	305c      	adds	r0, #92	@ 0x5c
 8005f02:	f000 f9f9 	bl	80062f8 <memset>
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <std+0x58>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <std+0x5c>)
 8005f0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f10:	4b0c      	ldr	r3, [pc, #48]	@ (8005f44 <std+0x60>)
 8005f12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f14:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <std+0x64>)
 8005f16:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f18:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <std+0x68>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d006      	beq.n	8005f2c <std+0x48>
 8005f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f22:	4294      	cmp	r4, r2
 8005f24:	d002      	beq.n	8005f2c <std+0x48>
 8005f26:	33d0      	adds	r3, #208	@ 0xd0
 8005f28:	429c      	cmp	r4, r3
 8005f2a:	d105      	bne.n	8005f38 <std+0x54>
 8005f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f34:	f000 ba5c 	b.w	80063f0 <__retarget_lock_init_recursive>
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08006149 	.word	0x08006149
 8005f40:	0800616b 	.word	0x0800616b
 8005f44:	080061a3 	.word	0x080061a3
 8005f48:	080061c7 	.word	0x080061c7
 8005f4c:	20000400 	.word	0x20000400

08005f50 <stdio_exit_handler>:
 8005f50:	4a02      	ldr	r2, [pc, #8]	@ (8005f5c <stdio_exit_handler+0xc>)
 8005f52:	4903      	ldr	r1, [pc, #12]	@ (8005f60 <stdio_exit_handler+0x10>)
 8005f54:	4803      	ldr	r0, [pc, #12]	@ (8005f64 <stdio_exit_handler+0x14>)
 8005f56:	f000 b869 	b.w	800602c <_fwalk_sglue>
 8005f5a:	bf00      	nop
 8005f5c:	2000000c 	.word	0x2000000c
 8005f60:	08007d35 	.word	0x08007d35
 8005f64:	2000001c 	.word	0x2000001c

08005f68 <cleanup_stdio>:
 8005f68:	6841      	ldr	r1, [r0, #4]
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <cleanup_stdio+0x34>)
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	4604      	mov	r4, r0
 8005f72:	d001      	beq.n	8005f78 <cleanup_stdio+0x10>
 8005f74:	f001 fede 	bl	8007d34 <_fflush_r>
 8005f78:	68a1      	ldr	r1, [r4, #8]
 8005f7a:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <cleanup_stdio+0x38>)
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	d002      	beq.n	8005f86 <cleanup_stdio+0x1e>
 8005f80:	4620      	mov	r0, r4
 8005f82:	f001 fed7 	bl	8007d34 <_fflush_r>
 8005f86:	68e1      	ldr	r1, [r4, #12]
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <cleanup_stdio+0x3c>)
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	d004      	beq.n	8005f98 <cleanup_stdio+0x30>
 8005f8e:	4620      	mov	r0, r4
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f94:	f001 bece 	b.w	8007d34 <_fflush_r>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000400 	.word	0x20000400
 8005fa0:	20000468 	.word	0x20000468
 8005fa4:	200004d0 	.word	0x200004d0

08005fa8 <global_stdio_init.part.0>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <global_stdio_init.part.0+0x30>)
 8005fac:	4c0b      	ldr	r4, [pc, #44]	@ (8005fdc <global_stdio_init.part.0+0x34>)
 8005fae:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe0 <global_stdio_init.part.0+0x38>)
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	2104      	movs	r1, #4
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f7ff ff94 	bl	8005ee4 <std>
 8005fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	2109      	movs	r1, #9
 8005fc4:	f7ff ff8e 	bl	8005ee4 <std>
 8005fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fcc:	2202      	movs	r2, #2
 8005fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd2:	2112      	movs	r1, #18
 8005fd4:	f7ff bf86 	b.w	8005ee4 <std>
 8005fd8:	20000538 	.word	0x20000538
 8005fdc:	20000400 	.word	0x20000400
 8005fe0:	08005f51 	.word	0x08005f51

08005fe4 <__sfp_lock_acquire>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	@ (8005fec <__sfp_lock_acquire+0x8>)
 8005fe6:	f000 ba04 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 8005fea:	bf00      	nop
 8005fec:	20000541 	.word	0x20000541

08005ff0 <__sfp_lock_release>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	@ (8005ff8 <__sfp_lock_release+0x8>)
 8005ff2:	f000 b9ff 	b.w	80063f4 <__retarget_lock_release_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20000541 	.word	0x20000541

08005ffc <__sinit>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	f7ff fff0 	bl	8005fe4 <__sfp_lock_acquire>
 8006004:	6a23      	ldr	r3, [r4, #32]
 8006006:	b11b      	cbz	r3, 8006010 <__sinit+0x14>
 8006008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800600c:	f7ff bff0 	b.w	8005ff0 <__sfp_lock_release>
 8006010:	4b04      	ldr	r3, [pc, #16]	@ (8006024 <__sinit+0x28>)
 8006012:	6223      	str	r3, [r4, #32]
 8006014:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <__sinit+0x2c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f5      	bne.n	8006008 <__sinit+0xc>
 800601c:	f7ff ffc4 	bl	8005fa8 <global_stdio_init.part.0>
 8006020:	e7f2      	b.n	8006008 <__sinit+0xc>
 8006022:	bf00      	nop
 8006024:	08005f69 	.word	0x08005f69
 8006028:	20000538 	.word	0x20000538

0800602c <_fwalk_sglue>:
 800602c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006030:	4607      	mov	r7, r0
 8006032:	4688      	mov	r8, r1
 8006034:	4614      	mov	r4, r2
 8006036:	2600      	movs	r6, #0
 8006038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800603c:	f1b9 0901 	subs.w	r9, r9, #1
 8006040:	d505      	bpl.n	800604e <_fwalk_sglue+0x22>
 8006042:	6824      	ldr	r4, [r4, #0]
 8006044:	2c00      	cmp	r4, #0
 8006046:	d1f7      	bne.n	8006038 <_fwalk_sglue+0xc>
 8006048:	4630      	mov	r0, r6
 800604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d907      	bls.n	8006064 <_fwalk_sglue+0x38>
 8006054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006058:	3301      	adds	r3, #1
 800605a:	d003      	beq.n	8006064 <_fwalk_sglue+0x38>
 800605c:	4629      	mov	r1, r5
 800605e:	4638      	mov	r0, r7
 8006060:	47c0      	blx	r8
 8006062:	4306      	orrs	r6, r0
 8006064:	3568      	adds	r5, #104	@ 0x68
 8006066:	e7e9      	b.n	800603c <_fwalk_sglue+0x10>

08006068 <iprintf>:
 8006068:	b40f      	push	{r0, r1, r2, r3}
 800606a:	b507      	push	{r0, r1, r2, lr}
 800606c:	4906      	ldr	r1, [pc, #24]	@ (8006088 <iprintf+0x20>)
 800606e:	ab04      	add	r3, sp, #16
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	f853 2b04 	ldr.w	r2, [r3], #4
 8006076:	6881      	ldr	r1, [r0, #8]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	f001 fcc3 	bl	8007a04 <_vfiprintf_r>
 800607e:	b003      	add	sp, #12
 8006080:	f85d eb04 	ldr.w	lr, [sp], #4
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	20000018 	.word	0x20000018

0800608c <_puts_r>:
 800608c:	6a03      	ldr	r3, [r0, #32]
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	4605      	mov	r5, r0
 8006092:	460e      	mov	r6, r1
 8006094:	6884      	ldr	r4, [r0, #8]
 8006096:	b90b      	cbnz	r3, 800609c <_puts_r+0x10>
 8006098:	f7ff ffb0 	bl	8005ffc <__sinit>
 800609c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_puts_r+0x22>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_puts_r+0x22>
 80060a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060aa:	f000 f9a2 	bl	80063f2 <__retarget_lock_acquire_recursive>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	0719      	lsls	r1, r3, #28
 80060b2:	d502      	bpl.n	80060ba <_puts_r+0x2e>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d135      	bne.n	8006126 <_puts_r+0x9a>
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f8c5 	bl	800624c <__swsetup_r>
 80060c2:	b380      	cbz	r0, 8006126 <_puts_r+0x9a>
 80060c4:	f04f 35ff 	mov.w	r5, #4294967295
 80060c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ca:	07da      	lsls	r2, r3, #31
 80060cc:	d405      	bmi.n	80060da <_puts_r+0x4e>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	059b      	lsls	r3, r3, #22
 80060d2:	d402      	bmi.n	80060da <_puts_r+0x4e>
 80060d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d6:	f000 f98d 	bl	80063f4 <__retarget_lock_release_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da04      	bge.n	80060ec <_puts_r+0x60>
 80060e2:	69a2      	ldr	r2, [r4, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	dc17      	bgt.n	8006118 <_puts_r+0x8c>
 80060e8:	290a      	cmp	r1, #10
 80060ea:	d015      	beq.n	8006118 <_puts_r+0x8c>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	7019      	strb	r1, [r3, #0]
 80060f4:	68a3      	ldr	r3, [r4, #8]
 80060f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	2900      	cmp	r1, #0
 8006100:	d1ed      	bne.n	80060de <_puts_r+0x52>
 8006102:	2b00      	cmp	r3, #0
 8006104:	da11      	bge.n	800612a <_puts_r+0x9e>
 8006106:	4622      	mov	r2, r4
 8006108:	210a      	movs	r1, #10
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f85f 	bl	80061ce <__swbuf_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d0d7      	beq.n	80060c4 <_puts_r+0x38>
 8006114:	250a      	movs	r5, #10
 8006116:	e7d7      	b.n	80060c8 <_puts_r+0x3c>
 8006118:	4622      	mov	r2, r4
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f857 	bl	80061ce <__swbuf_r>
 8006120:	3001      	adds	r0, #1
 8006122:	d1e7      	bne.n	80060f4 <_puts_r+0x68>
 8006124:	e7ce      	b.n	80060c4 <_puts_r+0x38>
 8006126:	3e01      	subs	r6, #1
 8006128:	e7e4      	b.n	80060f4 <_puts_r+0x68>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	220a      	movs	r2, #10
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e7ee      	b.n	8006114 <_puts_r+0x88>
	...

08006138 <puts>:
 8006138:	4b02      	ldr	r3, [pc, #8]	@ (8006144 <puts+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f7ff bfa5 	b.w	800608c <_puts_r>
 8006142:	bf00      	nop
 8006144:	20000018 	.word	0x20000018

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f900 	bl	8006354 <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	4605      	mov	r5, r0
 8006174:	05db      	lsls	r3, r3, #23
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	2302      	movs	r3, #2
 800617e:	2200      	movs	r2, #0
 8006180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006184:	f000 f8d4 	bl	8006330 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	4632      	mov	r2, r6
 800618c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	4628      	mov	r0, r5
 8006194:	463b      	mov	r3, r7
 8006196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b8eb 	b.w	8006378 <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f8c1 	bl	8006330 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b8a1 	b.w	8006310 <_close_r>

080061ce <__swbuf_r>:
 80061ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d0:	460e      	mov	r6, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4605      	mov	r5, r0
 80061d6:	b118      	cbz	r0, 80061e0 <__swbuf_r+0x12>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <__swbuf_r+0x12>
 80061dc:	f7ff ff0e 	bl	8005ffc <__sinit>
 80061e0:	69a3      	ldr	r3, [r4, #24]
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	071a      	lsls	r2, r3, #28
 80061e8:	d501      	bpl.n	80061ee <__swbuf_r+0x20>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	b943      	cbnz	r3, 8006200 <__swbuf_r+0x32>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 f82b 	bl	800624c <__swsetup_r>
 80061f6:	b118      	cbz	r0, 8006200 <__swbuf_r+0x32>
 80061f8:	f04f 37ff 	mov.w	r7, #4294967295
 80061fc:	4638      	mov	r0, r7
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	b2f6      	uxtb	r6, r6
 8006206:	1a98      	subs	r0, r3, r2
 8006208:	6963      	ldr	r3, [r4, #20]
 800620a:	4637      	mov	r7, r6
 800620c:	4283      	cmp	r3, r0
 800620e:	dc05      	bgt.n	800621c <__swbuf_r+0x4e>
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f001 fd8e 	bl	8007d34 <_fflush_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	d1ed      	bne.n	80061f8 <__swbuf_r+0x2a>
 800621c:	68a3      	ldr	r3, [r4, #8]
 800621e:	3b01      	subs	r3, #1
 8006220:	60a3      	str	r3, [r4, #8]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	701e      	strb	r6, [r3, #0]
 800622a:	6962      	ldr	r2, [r4, #20]
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	429a      	cmp	r2, r3
 8006230:	d004      	beq.n	800623c <__swbuf_r+0x6e>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	07db      	lsls	r3, r3, #31
 8006236:	d5e1      	bpl.n	80061fc <__swbuf_r+0x2e>
 8006238:	2e0a      	cmp	r6, #10
 800623a:	d1df      	bne.n	80061fc <__swbuf_r+0x2e>
 800623c:	4621      	mov	r1, r4
 800623e:	4628      	mov	r0, r5
 8006240:	f001 fd78 	bl	8007d34 <_fflush_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	d0d9      	beq.n	80061fc <__swbuf_r+0x2e>
 8006248:	e7d6      	b.n	80061f8 <__swbuf_r+0x2a>
	...

0800624c <__swsetup_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4b29      	ldr	r3, [pc, #164]	@ (80062f4 <__swsetup_r+0xa8>)
 8006250:	4605      	mov	r5, r0
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	460c      	mov	r4, r1
 8006256:	b118      	cbz	r0, 8006260 <__swsetup_r+0x14>
 8006258:	6a03      	ldr	r3, [r0, #32]
 800625a:	b90b      	cbnz	r3, 8006260 <__swsetup_r+0x14>
 800625c:	f7ff fece 	bl	8005ffc <__sinit>
 8006260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006264:	0719      	lsls	r1, r3, #28
 8006266:	d422      	bmi.n	80062ae <__swsetup_r+0x62>
 8006268:	06da      	lsls	r2, r3, #27
 800626a:	d407      	bmi.n	800627c <__swsetup_r+0x30>
 800626c:	2209      	movs	r2, #9
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	e033      	b.n	80062e4 <__swsetup_r+0x98>
 800627c:	0758      	lsls	r0, r3, #29
 800627e:	d512      	bpl.n	80062a6 <__swsetup_r+0x5a>
 8006280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006282:	b141      	cbz	r1, 8006296 <__swsetup_r+0x4a>
 8006284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006288:	4299      	cmp	r1, r3
 800628a:	d002      	beq.n	8006292 <__swsetup_r+0x46>
 800628c:	4628      	mov	r0, r5
 800628e:	f000 ff13 	bl	80070b8 <_free_r>
 8006292:	2300      	movs	r3, #0
 8006294:	6363      	str	r3, [r4, #52]	@ 0x34
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	2300      	movs	r3, #0
 80062a0:	6063      	str	r3, [r4, #4]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	b94b      	cbnz	r3, 80062c6 <__swsetup_r+0x7a>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062bc:	d003      	beq.n	80062c6 <__swsetup_r+0x7a>
 80062be:	4621      	mov	r1, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	f001 fd84 	bl	8007dce <__smakebuf_r>
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	f013 0201 	ands.w	r2, r3, #1
 80062ce:	d00a      	beq.n	80062e6 <__swsetup_r+0x9a>
 80062d0:	2200      	movs	r2, #0
 80062d2:	60a2      	str	r2, [r4, #8]
 80062d4:	6962      	ldr	r2, [r4, #20]
 80062d6:	4252      	negs	r2, r2
 80062d8:	61a2      	str	r2, [r4, #24]
 80062da:	6922      	ldr	r2, [r4, #16]
 80062dc:	b942      	cbnz	r2, 80062f0 <__swsetup_r+0xa4>
 80062de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062e2:	d1c5      	bne.n	8006270 <__swsetup_r+0x24>
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	0799      	lsls	r1, r3, #30
 80062e8:	bf58      	it	pl
 80062ea:	6962      	ldrpl	r2, [r4, #20]
 80062ec:	60a2      	str	r2, [r4, #8]
 80062ee:	e7f4      	b.n	80062da <__swsetup_r+0x8e>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7f7      	b.n	80062e4 <__swsetup_r+0x98>
 80062f4:	20000018 	.word	0x20000018

080062f8 <memset>:
 80062f8:	4603      	mov	r3, r0
 80062fa:	4402      	add	r2, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <_localeconv_r>:
 8006308:	4800      	ldr	r0, [pc, #0]	@ (800630c <_localeconv_r+0x4>)
 800630a:	4770      	bx	lr
 800630c:	20000158 	.word	0x20000158

08006310 <_close_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	2300      	movs	r3, #0
 8006314:	4d05      	ldr	r5, [pc, #20]	@ (800632c <_close_r+0x1c>)
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fc fc3f 	bl	8002b9e <_close>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_close_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_close_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	2000053c 	.word	0x2000053c

08006330 <_lseek_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	2200      	movs	r2, #0
 800633a:	4d05      	ldr	r5, [pc, #20]	@ (8006350 <_lseek_r+0x20>)
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fc fc51 	bl	8002be6 <_lseek>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_lseek_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_lseek_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	2000053c 	.word	0x2000053c

08006354 <_read_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	2200      	movs	r2, #0
 800635e:	4d05      	ldr	r5, [pc, #20]	@ (8006374 <_read_r+0x20>)
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fc fbe2 	bl	8002b2c <_read>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_read_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_read_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	2000053c 	.word	0x2000053c

08006378 <_write_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	2200      	movs	r2, #0
 8006382:	4d05      	ldr	r5, [pc, #20]	@ (8006398 <_write_r+0x20>)
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fc fbed 	bl	8002b66 <_write>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_write_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_write_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	2000053c 	.word	0x2000053c

0800639c <__errno>:
 800639c:	4b01      	ldr	r3, [pc, #4]	@ (80063a4 <__errno+0x8>)
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000018 	.word	0x20000018

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	2600      	movs	r6, #0
 80063ac:	4d0c      	ldr	r5, [pc, #48]	@ (80063e0 <__libc_init_array+0x38>)
 80063ae:	4c0d      	ldr	r4, [pc, #52]	@ (80063e4 <__libc_init_array+0x3c>)
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	f001 fe36 	bl	8008028 <_init>
 80063bc:	2600      	movs	r6, #0
 80063be:	4d0a      	ldr	r5, [pc, #40]	@ (80063e8 <__libc_init_array+0x40>)
 80063c0:	4c0a      	ldr	r4, [pc, #40]	@ (80063ec <__libc_init_array+0x44>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	08008b88 	.word	0x08008b88
 80063e4:	08008b88 	.word	0x08008b88
 80063e8:	08008b88 	.word	0x08008b88
 80063ec:	08008b8c 	.word	0x08008b8c

080063f0 <__retarget_lock_init_recursive>:
 80063f0:	4770      	bx	lr

080063f2 <__retarget_lock_acquire_recursive>:
 80063f2:	4770      	bx	lr

080063f4 <__retarget_lock_release_recursive>:
 80063f4:	4770      	bx	lr

080063f6 <memchr>:
 80063f6:	4603      	mov	r3, r0
 80063f8:	b510      	push	{r4, lr}
 80063fa:	b2c9      	uxtb	r1, r1
 80063fc:	4402      	add	r2, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	4618      	mov	r0, r3
 8006402:	d101      	bne.n	8006408 <memchr+0x12>
 8006404:	2000      	movs	r0, #0
 8006406:	e003      	b.n	8006410 <memchr+0x1a>
 8006408:	7804      	ldrb	r4, [r0, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	428c      	cmp	r4, r1
 800640e:	d1f6      	bne.n	80063fe <memchr+0x8>
 8006410:	bd10      	pop	{r4, pc}

08006412 <quorem>:
 8006412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	6903      	ldr	r3, [r0, #16]
 8006418:	690c      	ldr	r4, [r1, #16]
 800641a:	4607      	mov	r7, r0
 800641c:	42a3      	cmp	r3, r4
 800641e:	db7e      	blt.n	800651e <quorem+0x10c>
 8006420:	3c01      	subs	r4, #1
 8006422:	00a3      	lsls	r3, r4, #2
 8006424:	f100 0514 	add.w	r5, r0, #20
 8006428:	f101 0814 	add.w	r8, r1, #20
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800643c:	3301      	adds	r3, #1
 800643e:	429a      	cmp	r2, r3
 8006440:	fbb2 f6f3 	udiv	r6, r2, r3
 8006444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006448:	d32e      	bcc.n	80064a8 <quorem+0x96>
 800644a:	f04f 0a00 	mov.w	sl, #0
 800644e:	46c4      	mov	ip, r8
 8006450:	46ae      	mov	lr, r5
 8006452:	46d3      	mov	fp, sl
 8006454:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006458:	b298      	uxth	r0, r3
 800645a:	fb06 a000 	mla	r0, r6, r0, sl
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	0c02      	lsrs	r2, r0, #16
 8006462:	fb06 2303 	mla	r3, r6, r3, r2
 8006466:	f8de 2000 	ldr.w	r2, [lr]
 800646a:	b280      	uxth	r0, r0
 800646c:	b292      	uxth	r2, r2
 800646e:	1a12      	subs	r2, r2, r0
 8006470:	445a      	add	r2, fp
 8006472:	f8de 0000 	ldr.w	r0, [lr]
 8006476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800647a:	b29b      	uxth	r3, r3
 800647c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006480:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006484:	b292      	uxth	r2, r2
 8006486:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800648a:	45e1      	cmp	r9, ip
 800648c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006490:	f84e 2b04 	str.w	r2, [lr], #4
 8006494:	d2de      	bcs.n	8006454 <quorem+0x42>
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	58eb      	ldr	r3, [r5, r3]
 800649a:	b92b      	cbnz	r3, 80064a8 <quorem+0x96>
 800649c:	9b01      	ldr	r3, [sp, #4]
 800649e:	3b04      	subs	r3, #4
 80064a0:	429d      	cmp	r5, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	d32f      	bcc.n	8006506 <quorem+0xf4>
 80064a6:	613c      	str	r4, [r7, #16]
 80064a8:	4638      	mov	r0, r7
 80064aa:	f001 f97b 	bl	80077a4 <__mcmp>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	db25      	blt.n	80064fe <quorem+0xec>
 80064b2:	4629      	mov	r1, r5
 80064b4:	2000      	movs	r0, #0
 80064b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ba:	f8d1 c000 	ldr.w	ip, [r1]
 80064be:	fa1f fe82 	uxth.w	lr, r2
 80064c2:	fa1f f38c 	uxth.w	r3, ip
 80064c6:	eba3 030e 	sub.w	r3, r3, lr
 80064ca:	4403      	add	r3, r0
 80064cc:	0c12      	lsrs	r2, r2, #16
 80064ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064dc:	45c1      	cmp	r9, r8
 80064de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064e2:	f841 3b04 	str.w	r3, [r1], #4
 80064e6:	d2e6      	bcs.n	80064b6 <quorem+0xa4>
 80064e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064f0:	b922      	cbnz	r2, 80064fc <quorem+0xea>
 80064f2:	3b04      	subs	r3, #4
 80064f4:	429d      	cmp	r5, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	d30b      	bcc.n	8006512 <quorem+0x100>
 80064fa:	613c      	str	r4, [r7, #16]
 80064fc:	3601      	adds	r6, #1
 80064fe:	4630      	mov	r0, r6
 8006500:	b003      	add	sp, #12
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	3b04      	subs	r3, #4
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1cb      	bne.n	80064a6 <quorem+0x94>
 800650e:	3c01      	subs	r4, #1
 8006510:	e7c6      	b.n	80064a0 <quorem+0x8e>
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	3b04      	subs	r3, #4
 8006516:	2a00      	cmp	r2, #0
 8006518:	d1ef      	bne.n	80064fa <quorem+0xe8>
 800651a:	3c01      	subs	r4, #1
 800651c:	e7ea      	b.n	80064f4 <quorem+0xe2>
 800651e:	2000      	movs	r0, #0
 8006520:	e7ee      	b.n	8006500 <quorem+0xee>
 8006522:	0000      	movs	r0, r0
 8006524:	0000      	movs	r0, r0
	...

08006528 <_dtoa_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	69c7      	ldr	r7, [r0, #28]
 8006532:	b097      	sub	sp, #92	@ 0x5c
 8006534:	4683      	mov	fp, r0
 8006536:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800653a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800653c:	b97f      	cbnz	r7, 800655e <_dtoa_r+0x36>
 800653e:	2010      	movs	r0, #16
 8006540:	f000 fe02 	bl	8007148 <malloc>
 8006544:	4602      	mov	r2, r0
 8006546:	f8cb 001c 	str.w	r0, [fp, #28]
 800654a:	b920      	cbnz	r0, 8006556 <_dtoa_r+0x2e>
 800654c:	21ef      	movs	r1, #239	@ 0xef
 800654e:	4ba8      	ldr	r3, [pc, #672]	@ (80067f0 <_dtoa_r+0x2c8>)
 8006550:	48a8      	ldr	r0, [pc, #672]	@ (80067f4 <_dtoa_r+0x2cc>)
 8006552:	f001 fcb9 	bl	8007ec8 <__assert_func>
 8006556:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800655a:	6007      	str	r7, [r0, #0]
 800655c:	60c7      	str	r7, [r0, #12]
 800655e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	b159      	cbz	r1, 800657e <_dtoa_r+0x56>
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	2301      	movs	r3, #1
 800656a:	4093      	lsls	r3, r2
 800656c:	604a      	str	r2, [r1, #4]
 800656e:	608b      	str	r3, [r1, #8]
 8006570:	4658      	mov	r0, fp
 8006572:	f000 fedf 	bl	8007334 <_Bfree>
 8006576:	2200      	movs	r2, #0
 8006578:	f8db 301c 	ldr.w	r3, [fp, #28]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	1e2b      	subs	r3, r5, #0
 8006580:	bfaf      	iteee	ge
 8006582:	2300      	movge	r3, #0
 8006584:	2201      	movlt	r2, #1
 8006586:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800658a:	9303      	strlt	r3, [sp, #12]
 800658c:	bfa8      	it	ge
 800658e:	6033      	strge	r3, [r6, #0]
 8006590:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006594:	4b98      	ldr	r3, [pc, #608]	@ (80067f8 <_dtoa_r+0x2d0>)
 8006596:	bfb8      	it	lt
 8006598:	6032      	strlt	r2, [r6, #0]
 800659a:	ea33 0308 	bics.w	r3, r3, r8
 800659e:	d112      	bne.n	80065c6 <_dtoa_r+0x9e>
 80065a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065ac:	4323      	orrs	r3, r4
 80065ae:	f000 8550 	beq.w	8007052 <_dtoa_r+0xb2a>
 80065b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80067fc <_dtoa_r+0x2d4>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8552 	beq.w	8007062 <_dtoa_r+0xb3a>
 80065be:	f10a 0303 	add.w	r3, sl, #3
 80065c2:	f000 bd4c 	b.w	800705e <_dtoa_r+0xb36>
 80065c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80065ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	f7fa f9e7 	bl	80009a8 <__aeabi_dcmpeq>
 80065da:	4607      	mov	r7, r0
 80065dc:	b158      	cbz	r0, 80065f6 <_dtoa_r+0xce>
 80065de:	2301      	movs	r3, #1
 80065e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065e6:	b113      	cbz	r3, 80065ee <_dtoa_r+0xc6>
 80065e8:	4b85      	ldr	r3, [pc, #532]	@ (8006800 <_dtoa_r+0x2d8>)
 80065ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006804 <_dtoa_r+0x2dc>
 80065f2:	f000 bd36 	b.w	8007062 <_dtoa_r+0xb3a>
 80065f6:	ab14      	add	r3, sp, #80	@ 0x50
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	ab15      	add	r3, sp, #84	@ 0x54
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4658      	mov	r0, fp
 8006600:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006604:	f001 f97e 	bl	8007904 <__d2b>
 8006608:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800660c:	4681      	mov	r9, r0
 800660e:	2e00      	cmp	r6, #0
 8006610:	d077      	beq.n	8006702 <_dtoa_r+0x1da>
 8006612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006618:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006624:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006628:	9712      	str	r7, [sp, #72]	@ 0x48
 800662a:	4619      	mov	r1, r3
 800662c:	2200      	movs	r2, #0
 800662e:	4b76      	ldr	r3, [pc, #472]	@ (8006808 <_dtoa_r+0x2e0>)
 8006630:	f7f9 fd9a 	bl	8000168 <__aeabi_dsub>
 8006634:	a368      	add	r3, pc, #416	@ (adr r3, 80067d8 <_dtoa_r+0x2b0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	a368      	add	r3, pc, #416	@ (adr r3, 80067e0 <_dtoa_r+0x2b8>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fd92 	bl	800016c <__adddf3>
 8006648:	4604      	mov	r4, r0
 800664a:	4630      	mov	r0, r6
 800664c:	460d      	mov	r5, r1
 800664e:	f7f9 fed9 	bl	8000404 <__aeabi_i2d>
 8006652:	a365      	add	r3, pc, #404	@ (adr r3, 80067e8 <_dtoa_r+0x2c0>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 ff3e 	bl	80004d8 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4620      	mov	r0, r4
 8006662:	4629      	mov	r1, r5
 8006664:	f7f9 fd82 	bl	800016c <__adddf3>
 8006668:	4604      	mov	r4, r0
 800666a:	460d      	mov	r5, r1
 800666c:	f7fa f9e4 	bl	8000a38 <__aeabi_d2iz>
 8006670:	2200      	movs	r2, #0
 8006672:	4607      	mov	r7, r0
 8006674:	2300      	movs	r3, #0
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7fa f99f 	bl	80009bc <__aeabi_dcmplt>
 800667e:	b140      	cbz	r0, 8006692 <_dtoa_r+0x16a>
 8006680:	4638      	mov	r0, r7
 8006682:	f7f9 febf 	bl	8000404 <__aeabi_i2d>
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7fa f98d 	bl	80009a8 <__aeabi_dcmpeq>
 800668e:	b900      	cbnz	r0, 8006692 <_dtoa_r+0x16a>
 8006690:	3f01      	subs	r7, #1
 8006692:	2f16      	cmp	r7, #22
 8006694:	d853      	bhi.n	800673e <_dtoa_r+0x216>
 8006696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800669a:	4b5c      	ldr	r3, [pc, #368]	@ (800680c <_dtoa_r+0x2e4>)
 800669c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7fa f98a 	bl	80009bc <__aeabi_dcmplt>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d04a      	beq.n	8006742 <_dtoa_r+0x21a>
 80066ac:	2300      	movs	r3, #0
 80066ae:	3f01      	subs	r7, #1
 80066b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066b4:	1b9b      	subs	r3, r3, r6
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	bf46      	itte	mi
 80066ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80066be:	2300      	movmi	r3, #0
 80066c0:	f04f 0800 	movpl.w	r8, #0
 80066c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c6:	bf48      	it	mi
 80066c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80066ca:	2f00      	cmp	r7, #0
 80066cc:	db3b      	blt.n	8006746 <_dtoa_r+0x21e>
 80066ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80066d2:	443b      	add	r3, r7
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	2300      	movs	r3, #0
 80066d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d866      	bhi.n	80067ae <_dtoa_r+0x286>
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	bfc4      	itt	gt
 80066e4:	3b04      	subgt	r3, #4
 80066e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80066e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ea:	bfc8      	it	gt
 80066ec:	2400      	movgt	r4, #0
 80066ee:	f1a3 0302 	sub.w	r3, r3, #2
 80066f2:	bfd8      	it	le
 80066f4:	2401      	movle	r4, #1
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d864      	bhi.n	80067c4 <_dtoa_r+0x29c>
 80066fa:	e8df f003 	tbb	[pc, r3]
 80066fe:	382b      	.short	0x382b
 8006700:	5636      	.short	0x5636
 8006702:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006706:	441e      	add	r6, r3
 8006708:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800670c:	2b20      	cmp	r3, #32
 800670e:	bfc1      	itttt	gt
 8006710:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006714:	fa08 f803 	lslgt.w	r8, r8, r3
 8006718:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800671c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006720:	bfd6      	itet	le
 8006722:	f1c3 0320 	rsble	r3, r3, #32
 8006726:	ea48 0003 	orrgt.w	r0, r8, r3
 800672a:	fa04 f003 	lslle.w	r0, r4, r3
 800672e:	f7f9 fe59 	bl	80003e4 <__aeabi_ui2d>
 8006732:	2201      	movs	r2, #1
 8006734:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006738:	3e01      	subs	r6, #1
 800673a:	9212      	str	r2, [sp, #72]	@ 0x48
 800673c:	e775      	b.n	800662a <_dtoa_r+0x102>
 800673e:	2301      	movs	r3, #1
 8006740:	e7b6      	b.n	80066b0 <_dtoa_r+0x188>
 8006742:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006744:	e7b5      	b.n	80066b2 <_dtoa_r+0x18a>
 8006746:	427b      	negs	r3, r7
 8006748:	930a      	str	r3, [sp, #40]	@ 0x28
 800674a:	2300      	movs	r3, #0
 800674c:	eba8 0807 	sub.w	r8, r8, r7
 8006750:	930e      	str	r3, [sp, #56]	@ 0x38
 8006752:	e7c2      	b.n	80066da <_dtoa_r+0x1b2>
 8006754:	2300      	movs	r3, #0
 8006756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800675a:	2b00      	cmp	r3, #0
 800675c:	dc35      	bgt.n	80067ca <_dtoa_r+0x2a2>
 800675e:	2301      	movs	r3, #1
 8006760:	461a      	mov	r2, r3
 8006762:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006766:	9221      	str	r2, [sp, #132]	@ 0x84
 8006768:	e00b      	b.n	8006782 <_dtoa_r+0x25a>
 800676a:	2301      	movs	r3, #1
 800676c:	e7f3      	b.n	8006756 <_dtoa_r+0x22e>
 800676e:	2300      	movs	r3, #0
 8006770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006772:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	9308      	str	r3, [sp, #32]
 8006778:	3301      	adds	r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	bfb8      	it	lt
 8006780:	2301      	movlt	r3, #1
 8006782:	2100      	movs	r1, #0
 8006784:	2204      	movs	r2, #4
 8006786:	f8db 001c 	ldr.w	r0, [fp, #28]
 800678a:	f102 0514 	add.w	r5, r2, #20
 800678e:	429d      	cmp	r5, r3
 8006790:	d91f      	bls.n	80067d2 <_dtoa_r+0x2aa>
 8006792:	6041      	str	r1, [r0, #4]
 8006794:	4658      	mov	r0, fp
 8006796:	f000 fd8d 	bl	80072b4 <_Balloc>
 800679a:	4682      	mov	sl, r0
 800679c:	2800      	cmp	r0, #0
 800679e:	d139      	bne.n	8006814 <_dtoa_r+0x2ec>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80067a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <_dtoa_r+0x2e8>)
 80067a8:	e6d2      	b.n	8006550 <_dtoa_r+0x28>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7e0      	b.n	8006770 <_dtoa_r+0x248>
 80067ae:	2401      	movs	r4, #1
 80067b0:	2300      	movs	r3, #0
 80067b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	2200      	movs	r2, #0
 80067bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80067c0:	2312      	movs	r3, #18
 80067c2:	e7d0      	b.n	8006766 <_dtoa_r+0x23e>
 80067c4:	2301      	movs	r3, #1
 80067c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067c8:	e7f5      	b.n	80067b6 <_dtoa_r+0x28e>
 80067ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80067d0:	e7d7      	b.n	8006782 <_dtoa_r+0x25a>
 80067d2:	3101      	adds	r1, #1
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	e7d8      	b.n	800678a <_dtoa_r+0x262>
 80067d8:	636f4361 	.word	0x636f4361
 80067dc:	3fd287a7 	.word	0x3fd287a7
 80067e0:	8b60c8b3 	.word	0x8b60c8b3
 80067e4:	3fc68a28 	.word	0x3fc68a28
 80067e8:	509f79fb 	.word	0x509f79fb
 80067ec:	3fd34413 	.word	0x3fd34413
 80067f0:	0800884f 	.word	0x0800884f
 80067f4:	08008866 	.word	0x08008866
 80067f8:	7ff00000 	.word	0x7ff00000
 80067fc:	0800884b 	.word	0x0800884b
 8006800:	0800881f 	.word	0x0800881f
 8006804:	0800881e 	.word	0x0800881e
 8006808:	3ff80000 	.word	0x3ff80000
 800680c:	08008960 	.word	0x08008960
 8006810:	080088be 	.word	0x080088be
 8006814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006818:	6018      	str	r0, [r3, #0]
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	2b0e      	cmp	r3, #14
 800681e:	f200 80a4 	bhi.w	800696a <_dtoa_r+0x442>
 8006822:	2c00      	cmp	r4, #0
 8006824:	f000 80a1 	beq.w	800696a <_dtoa_r+0x442>
 8006828:	2f00      	cmp	r7, #0
 800682a:	dd33      	ble.n	8006894 <_dtoa_r+0x36c>
 800682c:	4b86      	ldr	r3, [pc, #536]	@ (8006a48 <_dtoa_r+0x520>)
 800682e:	f007 020f 	and.w	r2, r7, #15
 8006832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006836:	05f8      	lsls	r0, r7, #23
 8006838:	e9d3 3400 	ldrd	r3, r4, [r3]
 800683c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006840:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006844:	d516      	bpl.n	8006874 <_dtoa_r+0x34c>
 8006846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684a:	4b80      	ldr	r3, [pc, #512]	@ (8006a4c <_dtoa_r+0x524>)
 800684c:	2603      	movs	r6, #3
 800684e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006852:	f7f9 ff6b 	bl	800072c <__aeabi_ddiv>
 8006856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685a:	f004 040f 	and.w	r4, r4, #15
 800685e:	4d7b      	ldr	r5, [pc, #492]	@ (8006a4c <_dtoa_r+0x524>)
 8006860:	b954      	cbnz	r4, 8006878 <_dtoa_r+0x350>
 8006862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686a:	f7f9 ff5f 	bl	800072c <__aeabi_ddiv>
 800686e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006872:	e028      	b.n	80068c6 <_dtoa_r+0x39e>
 8006874:	2602      	movs	r6, #2
 8006876:	e7f2      	b.n	800685e <_dtoa_r+0x336>
 8006878:	07e1      	lsls	r1, r4, #31
 800687a:	d508      	bpl.n	800688e <_dtoa_r+0x366>
 800687c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006880:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006884:	f7f9 fe28 	bl	80004d8 <__aeabi_dmul>
 8006888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688c:	3601      	adds	r6, #1
 800688e:	1064      	asrs	r4, r4, #1
 8006890:	3508      	adds	r5, #8
 8006892:	e7e5      	b.n	8006860 <_dtoa_r+0x338>
 8006894:	f000 80d2 	beq.w	8006a3c <_dtoa_r+0x514>
 8006898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800689c:	427c      	negs	r4, r7
 800689e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a48 <_dtoa_r+0x520>)
 80068a0:	f004 020f 	and.w	r2, r4, #15
 80068a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fe14 	bl	80004d8 <__aeabi_dmul>
 80068b0:	2602      	movs	r6, #2
 80068b2:	2300      	movs	r3, #0
 80068b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b8:	4d64      	ldr	r5, [pc, #400]	@ (8006a4c <_dtoa_r+0x524>)
 80068ba:	1124      	asrs	r4, r4, #4
 80068bc:	2c00      	cmp	r4, #0
 80068be:	f040 80b2 	bne.w	8006a26 <_dtoa_r+0x4fe>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d3      	bne.n	800686e <_dtoa_r+0x346>
 80068c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80b7 	beq.w	8006a40 <_dtoa_r+0x518>
 80068d2:	2200      	movs	r2, #0
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006a50 <_dtoa_r+0x528>)
 80068da:	f7fa f86f 	bl	80009bc <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f000 80ae 	beq.w	8006a40 <_dtoa_r+0x518>
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80aa 	beq.w	8006a40 <_dtoa_r+0x518>
 80068ec:	9b08      	ldr	r3, [sp, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dd37      	ble.n	8006962 <_dtoa_r+0x43a>
 80068f2:	1e7b      	subs	r3, r7, #1
 80068f4:	4620      	mov	r0, r4
 80068f6:	9304      	str	r3, [sp, #16]
 80068f8:	2200      	movs	r2, #0
 80068fa:	4629      	mov	r1, r5
 80068fc:	4b55      	ldr	r3, [pc, #340]	@ (8006a54 <_dtoa_r+0x52c>)
 80068fe:	f7f9 fdeb 	bl	80004d8 <__aeabi_dmul>
 8006902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006906:	9c08      	ldr	r4, [sp, #32]
 8006908:	3601      	adds	r6, #1
 800690a:	4630      	mov	r0, r6
 800690c:	f7f9 fd7a 	bl	8000404 <__aeabi_i2d>
 8006910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006914:	f7f9 fde0 	bl	80004d8 <__aeabi_dmul>
 8006918:	2200      	movs	r2, #0
 800691a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a58 <_dtoa_r+0x530>)
 800691c:	f7f9 fc26 	bl	800016c <__adddf3>
 8006920:	4605      	mov	r5, r0
 8006922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006926:	2c00      	cmp	r4, #0
 8006928:	f040 809a 	bne.w	8006a60 <_dtoa_r+0x538>
 800692c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	4b4a      	ldr	r3, [pc, #296]	@ (8006a5c <_dtoa_r+0x534>)
 8006934:	f7f9 fc18 	bl	8000168 <__aeabi_dsub>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006940:	462a      	mov	r2, r5
 8006942:	4633      	mov	r3, r6
 8006944:	f7fa f858 	bl	80009f8 <__aeabi_dcmpgt>
 8006948:	2800      	cmp	r0, #0
 800694a:	f040 828e 	bne.w	8006e6a <_dtoa_r+0x942>
 800694e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006952:	462a      	mov	r2, r5
 8006954:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006958:	f7fa f830 	bl	80009bc <__aeabi_dcmplt>
 800695c:	2800      	cmp	r0, #0
 800695e:	f040 8127 	bne.w	8006bb0 <_dtoa_r+0x688>
 8006962:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006966:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800696a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800696c:	2b00      	cmp	r3, #0
 800696e:	f2c0 8163 	blt.w	8006c38 <_dtoa_r+0x710>
 8006972:	2f0e      	cmp	r7, #14
 8006974:	f300 8160 	bgt.w	8006c38 <_dtoa_r+0x710>
 8006978:	4b33      	ldr	r3, [pc, #204]	@ (8006a48 <_dtoa_r+0x520>)
 800697a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800697e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006982:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006988:	2b00      	cmp	r3, #0
 800698a:	da03      	bge.n	8006994 <_dtoa_r+0x46c>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f340 8100 	ble.w	8006b94 <_dtoa_r+0x66c>
 8006994:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006998:	4656      	mov	r6, sl
 800699a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7f9 fec3 	bl	800072c <__aeabi_ddiv>
 80069a6:	f7fa f847 	bl	8000a38 <__aeabi_d2iz>
 80069aa:	4680      	mov	r8, r0
 80069ac:	f7f9 fd2a 	bl	8000404 <__aeabi_i2d>
 80069b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b4:	f7f9 fd90 	bl	80004d8 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 fbd2 	bl	8000168 <__aeabi_dsub>
 80069c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069c8:	9d07      	ldr	r5, [sp, #28]
 80069ca:	f806 4b01 	strb.w	r4, [r6], #1
 80069ce:	eba6 040a 	sub.w	r4, r6, sl
 80069d2:	42a5      	cmp	r5, r4
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	f040 8116 	bne.w	8006c08 <_dtoa_r+0x6e0>
 80069dc:	f7f9 fbc6 	bl	800016c <__adddf3>
 80069e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	f7fa f806 	bl	80009f8 <__aeabi_dcmpgt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 80f8 	bne.w	8006be2 <_dtoa_r+0x6ba>
 80069f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80069fe:	b118      	cbz	r0, 8006a08 <_dtoa_r+0x4e0>
 8006a00:	f018 0f01 	tst.w	r8, #1
 8006a04:	f040 80ed 	bne.w	8006be2 <_dtoa_r+0x6ba>
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4658      	mov	r0, fp
 8006a0c:	f000 fc92 	bl	8007334 <_Bfree>
 8006a10:	2300      	movs	r3, #0
 8006a12:	7033      	strb	r3, [r6, #0]
 8006a14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a16:	3701      	adds	r7, #1
 8006a18:	601f      	str	r7, [r3, #0]
 8006a1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8320 	beq.w	8007062 <_dtoa_r+0xb3a>
 8006a22:	601e      	str	r6, [r3, #0]
 8006a24:	e31d      	b.n	8007062 <_dtoa_r+0xb3a>
 8006a26:	07e2      	lsls	r2, r4, #31
 8006a28:	d505      	bpl.n	8006a36 <_dtoa_r+0x50e>
 8006a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a2e:	f7f9 fd53 	bl	80004d8 <__aeabi_dmul>
 8006a32:	2301      	movs	r3, #1
 8006a34:	3601      	adds	r6, #1
 8006a36:	1064      	asrs	r4, r4, #1
 8006a38:	3508      	adds	r5, #8
 8006a3a:	e73f      	b.n	80068bc <_dtoa_r+0x394>
 8006a3c:	2602      	movs	r6, #2
 8006a3e:	e742      	b.n	80068c6 <_dtoa_r+0x39e>
 8006a40:	9c07      	ldr	r4, [sp, #28]
 8006a42:	9704      	str	r7, [sp, #16]
 8006a44:	e761      	b.n	800690a <_dtoa_r+0x3e2>
 8006a46:	bf00      	nop
 8006a48:	08008960 	.word	0x08008960
 8006a4c:	08008938 	.word	0x08008938
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	40240000 	.word	0x40240000
 8006a58:	401c0000 	.word	0x401c0000
 8006a5c:	40140000 	.word	0x40140000
 8006a60:	4b70      	ldr	r3, [pc, #448]	@ (8006c24 <_dtoa_r+0x6fc>)
 8006a62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a6c:	4454      	add	r4, sl
 8006a6e:	2900      	cmp	r1, #0
 8006a70:	d045      	beq.n	8006afe <_dtoa_r+0x5d6>
 8006a72:	2000      	movs	r0, #0
 8006a74:	496c      	ldr	r1, [pc, #432]	@ (8006c28 <_dtoa_r+0x700>)
 8006a76:	f7f9 fe59 	bl	800072c <__aeabi_ddiv>
 8006a7a:	4633      	mov	r3, r6
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	f7f9 fb73 	bl	8000168 <__aeabi_dsub>
 8006a82:	4656      	mov	r6, sl
 8006a84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a8c:	f7f9 ffd4 	bl	8000a38 <__aeabi_d2iz>
 8006a90:	4605      	mov	r5, r0
 8006a92:	f7f9 fcb7 	bl	8000404 <__aeabi_i2d>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a9e:	f7f9 fb63 	bl	8000168 <__aeabi_dsub>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	3530      	adds	r5, #48	@ 0x30
 8006aa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ab0:	f806 5b01 	strb.w	r5, [r6], #1
 8006ab4:	f7f9 ff82 	bl	80009bc <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d163      	bne.n	8006b84 <_dtoa_r+0x65c>
 8006abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	495a      	ldr	r1, [pc, #360]	@ (8006c2c <_dtoa_r+0x704>)
 8006ac4:	f7f9 fb50 	bl	8000168 <__aeabi_dsub>
 8006ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006acc:	f7f9 ff76 	bl	80009bc <__aeabi_dcmplt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f040 8087 	bne.w	8006be4 <_dtoa_r+0x6bc>
 8006ad6:	42a6      	cmp	r6, r4
 8006ad8:	f43f af43 	beq.w	8006962 <_dtoa_r+0x43a>
 8006adc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4b53      	ldr	r3, [pc, #332]	@ (8006c30 <_dtoa_r+0x708>)
 8006ae4:	f7f9 fcf8 	bl	80004d8 <__aeabi_dmul>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af2:	4b4f      	ldr	r3, [pc, #316]	@ (8006c30 <_dtoa_r+0x708>)
 8006af4:	f7f9 fcf0 	bl	80004d8 <__aeabi_dmul>
 8006af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006afc:	e7c4      	b.n	8006a88 <_dtoa_r+0x560>
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	4656      	mov	r6, sl
 8006b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b0c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b12:	f7f9 ff91 	bl	8000a38 <__aeabi_d2iz>
 8006b16:	4605      	mov	r5, r0
 8006b18:	f7f9 fc74 	bl	8000404 <__aeabi_i2d>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b24:	f7f9 fb20 	bl	8000168 <__aeabi_dsub>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	3530      	adds	r5, #48	@ 0x30
 8006b2e:	f806 5b01 	strb.w	r5, [r6], #1
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	d124      	bne.n	8006b88 <_dtoa_r+0x660>
 8006b3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b42:	4b39      	ldr	r3, [pc, #228]	@ (8006c28 <_dtoa_r+0x700>)
 8006b44:	f7f9 fb12 	bl	800016c <__adddf3>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b50:	f7f9 ff52 	bl	80009f8 <__aeabi_dcmpgt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d145      	bne.n	8006be4 <_dtoa_r+0x6bc>
 8006b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4932      	ldr	r1, [pc, #200]	@ (8006c28 <_dtoa_r+0x700>)
 8006b60:	f7f9 fb02 	bl	8000168 <__aeabi_dsub>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6c:	f7f9 ff26 	bl	80009bc <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f43f aef6 	beq.w	8006962 <_dtoa_r+0x43a>
 8006b76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b78:	1e73      	subs	r3, r6, #1
 8006b7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b80:	2b30      	cmp	r3, #48	@ 0x30
 8006b82:	d0f8      	beq.n	8006b76 <_dtoa_r+0x64e>
 8006b84:	9f04      	ldr	r7, [sp, #16]
 8006b86:	e73f      	b.n	8006a08 <_dtoa_r+0x4e0>
 8006b88:	4b29      	ldr	r3, [pc, #164]	@ (8006c30 <_dtoa_r+0x708>)
 8006b8a:	f7f9 fca5 	bl	80004d8 <__aeabi_dmul>
 8006b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b92:	e7bc      	b.n	8006b0e <_dtoa_r+0x5e6>
 8006b94:	d10c      	bne.n	8006bb0 <_dtoa_r+0x688>
 8006b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <_dtoa_r+0x70c>)
 8006b9e:	f7f9 fc9b 	bl	80004d8 <__aeabi_dmul>
 8006ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba6:	f7f9 ff1d 	bl	80009e4 <__aeabi_dcmpge>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f000 815b 	beq.w	8006e66 <_dtoa_r+0x93e>
 8006bb0:	2400      	movs	r4, #0
 8006bb2:	4625      	mov	r5, r4
 8006bb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bb6:	4656      	mov	r6, sl
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	2700      	movs	r7, #0
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f000 fbb7 	bl	8007334 <_Bfree>
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	d0dc      	beq.n	8006b84 <_dtoa_r+0x65c>
 8006bca:	b12f      	cbz	r7, 8006bd8 <_dtoa_r+0x6b0>
 8006bcc:	42af      	cmp	r7, r5
 8006bce:	d003      	beq.n	8006bd8 <_dtoa_r+0x6b0>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4658      	mov	r0, fp
 8006bd4:	f000 fbae 	bl	8007334 <_Bfree>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4658      	mov	r0, fp
 8006bdc:	f000 fbaa 	bl	8007334 <_Bfree>
 8006be0:	e7d0      	b.n	8006b84 <_dtoa_r+0x65c>
 8006be2:	9704      	str	r7, [sp, #16]
 8006be4:	4633      	mov	r3, r6
 8006be6:	461e      	mov	r6, r3
 8006be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bec:	2a39      	cmp	r2, #57	@ 0x39
 8006bee:	d107      	bne.n	8006c00 <_dtoa_r+0x6d8>
 8006bf0:	459a      	cmp	sl, r3
 8006bf2:	d1f8      	bne.n	8006be6 <_dtoa_r+0x6be>
 8006bf4:	9a04      	ldr	r2, [sp, #16]
 8006bf6:	3201      	adds	r2, #1
 8006bf8:	9204      	str	r2, [sp, #16]
 8006bfa:	2230      	movs	r2, #48	@ 0x30
 8006bfc:	f88a 2000 	strb.w	r2, [sl]
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	3201      	adds	r2, #1
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e7bd      	b.n	8006b84 <_dtoa_r+0x65c>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <_dtoa_r+0x708>)
 8006c0c:	f7f9 fc64 	bl	80004d8 <__aeabi_dmul>
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	f7f9 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f43f aebc 	beq.w	800699a <_dtoa_r+0x472>
 8006c22:	e6f1      	b.n	8006a08 <_dtoa_r+0x4e0>
 8006c24:	08008960 	.word	0x08008960
 8006c28:	3fe00000 	.word	0x3fe00000
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	40240000 	.word	0x40240000
 8006c34:	40140000 	.word	0x40140000
 8006c38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	f000 80db 	beq.w	8006df6 <_dtoa_r+0x8ce>
 8006c40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c42:	2a01      	cmp	r2, #1
 8006c44:	f300 80bf 	bgt.w	8006dc6 <_dtoa_r+0x89e>
 8006c48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	f000 80b7 	beq.w	8006dbe <_dtoa_r+0x896>
 8006c50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c54:	4646      	mov	r6, r8
 8006c56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	4658      	mov	r0, fp
 8006c60:	4498      	add	r8, r3
 8006c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c64:	f000 fc1a 	bl	800749c <__i2b>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b15e      	cbz	r6, 8006c84 <_dtoa_r+0x75c>
 8006c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dd08      	ble.n	8006c84 <_dtoa_r+0x75c>
 8006c72:	42b3      	cmp	r3, r6
 8006c74:	bfa8      	it	ge
 8006c76:	4633      	movge	r3, r6
 8006c78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c7a:	eba8 0803 	sub.w	r8, r8, r3
 8006c7e:	1af6      	subs	r6, r6, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c86:	b1f3      	cbz	r3, 8006cc6 <_dtoa_r+0x79e>
 8006c88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80b7 	beq.w	8006dfe <_dtoa_r+0x8d6>
 8006c90:	b18c      	cbz	r4, 8006cb6 <_dtoa_r+0x78e>
 8006c92:	4629      	mov	r1, r5
 8006c94:	4622      	mov	r2, r4
 8006c96:	4658      	mov	r0, fp
 8006c98:	f000 fcbe 	bl	8007618 <__pow5mult>
 8006c9c:	464a      	mov	r2, r9
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	4658      	mov	r0, fp
 8006ca4:	f000 fc10 	bl	80074c8 <__multiply>
 8006ca8:	4649      	mov	r1, r9
 8006caa:	9004      	str	r0, [sp, #16]
 8006cac:	4658      	mov	r0, fp
 8006cae:	f000 fb41 	bl	8007334 <_Bfree>
 8006cb2:	9b04      	ldr	r3, [sp, #16]
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb8:	1b1a      	subs	r2, r3, r4
 8006cba:	d004      	beq.n	8006cc6 <_dtoa_r+0x79e>
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 fcaa 	bl	8007618 <__pow5mult>
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f000 fbe7 	bl	800749c <__i2b>
 8006cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 81c9 	beq.w	800706a <_dtoa_r+0xb42>
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4658      	mov	r0, fp
 8006cde:	f000 fc9b 	bl	8007618 <__pow5mult>
 8006ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	f300 808f 	bgt.w	8006e0a <_dtoa_r+0x8e2>
 8006cec:	9b02      	ldr	r3, [sp, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 8087 	bne.w	8006e02 <_dtoa_r+0x8da>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f040 8083 	bne.w	8006e06 <_dtoa_r+0x8de>
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d06:	0d1b      	lsrs	r3, r3, #20
 8006d08:	051b      	lsls	r3, r3, #20
 8006d0a:	b12b      	cbz	r3, 8006d18 <_dtoa_r+0x7f0>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0e:	f108 0801 	add.w	r8, r8, #1
 8006d12:	3301      	adds	r3, #1
 8006d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d16:	2301      	movs	r3, #1
 8006d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 81aa 	beq.w	8007076 <_dtoa_r+0xb4e>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d28:	6918      	ldr	r0, [r3, #16]
 8006d2a:	f000 fb6b 	bl	8007404 <__hi0bits>
 8006d2e:	f1c0 0020 	rsb	r0, r0, #32
 8006d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d34:	4418      	add	r0, r3
 8006d36:	f010 001f 	ands.w	r0, r0, #31
 8006d3a:	d071      	beq.n	8006e20 <_dtoa_r+0x8f8>
 8006d3c:	f1c0 0320 	rsb	r3, r0, #32
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	dd65      	ble.n	8006e10 <_dtoa_r+0x8e8>
 8006d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d46:	f1c0 001c 	rsb	r0, r0, #28
 8006d4a:	4403      	add	r3, r0
 8006d4c:	4480      	add	r8, r0
 8006d4e:	4406      	add	r6, r0
 8006d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d52:	f1b8 0f00 	cmp.w	r8, #0
 8006d56:	dd05      	ble.n	8006d64 <_dtoa_r+0x83c>
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4642      	mov	r2, r8
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f000 fcb5 	bl	80076cc <__lshift>
 8006d62:	4681      	mov	r9, r0
 8006d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dd05      	ble.n	8006d76 <_dtoa_r+0x84e>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	4658      	mov	r0, fp
 8006d70:	f000 fcac 	bl	80076cc <__lshift>
 8006d74:	4604      	mov	r4, r0
 8006d76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d053      	beq.n	8006e24 <_dtoa_r+0x8fc>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4648      	mov	r0, r9
 8006d80:	f000 fd10 	bl	80077a4 <__mcmp>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	da4d      	bge.n	8006e24 <_dtoa_r+0x8fc>
 8006d88:	1e7b      	subs	r3, r7, #1
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	220a      	movs	r2, #10
 8006d90:	2300      	movs	r3, #0
 8006d92:	4658      	mov	r0, fp
 8006d94:	f000 faf0 	bl	8007378 <__multadd>
 8006d98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d9a:	4681      	mov	r9, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 816c 	beq.w	800707a <_dtoa_r+0xb52>
 8006da2:	2300      	movs	r3, #0
 8006da4:	4629      	mov	r1, r5
 8006da6:	220a      	movs	r2, #10
 8006da8:	4658      	mov	r0, fp
 8006daa:	f000 fae5 	bl	8007378 <__multadd>
 8006dae:	9b08      	ldr	r3, [sp, #32]
 8006db0:	4605      	mov	r5, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dc61      	bgt.n	8006e7a <_dtoa_r+0x952>
 8006db6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	dc3b      	bgt.n	8006e34 <_dtoa_r+0x90c>
 8006dbc:	e05d      	b.n	8006e7a <_dtoa_r+0x952>
 8006dbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dc0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dc4:	e746      	b.n	8006c54 <_dtoa_r+0x72c>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	1e5c      	subs	r4, r3, #1
 8006dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	bfbf      	itttt	lt
 8006dd0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006dd2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006dd4:	1ae3      	sublt	r3, r4, r3
 8006dd6:	18d2      	addlt	r2, r2, r3
 8006dd8:	bfa8      	it	ge
 8006dda:	1b1c      	subge	r4, r3, r4
 8006ddc:	9b07      	ldr	r3, [sp, #28]
 8006dde:	bfbe      	ittt	lt
 8006de0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006de2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006de4:	2400      	movlt	r4, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfb5      	itete	lt
 8006dea:	eba8 0603 	sublt.w	r6, r8, r3
 8006dee:	4646      	movge	r6, r8
 8006df0:	2300      	movlt	r3, #0
 8006df2:	9b07      	ldrge	r3, [sp, #28]
 8006df4:	e730      	b.n	8006c58 <_dtoa_r+0x730>
 8006df6:	4646      	mov	r6, r8
 8006df8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006dfc:	e735      	b.n	8006c6a <_dtoa_r+0x742>
 8006dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e00:	e75c      	b.n	8006cbc <_dtoa_r+0x794>
 8006e02:	2300      	movs	r3, #0
 8006e04:	e788      	b.n	8006d18 <_dtoa_r+0x7f0>
 8006e06:	9b02      	ldr	r3, [sp, #8]
 8006e08:	e786      	b.n	8006d18 <_dtoa_r+0x7f0>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e0e:	e788      	b.n	8006d22 <_dtoa_r+0x7fa>
 8006e10:	d09f      	beq.n	8006d52 <_dtoa_r+0x82a>
 8006e12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e14:	331c      	adds	r3, #28
 8006e16:	441a      	add	r2, r3
 8006e18:	4498      	add	r8, r3
 8006e1a:	441e      	add	r6, r3
 8006e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e1e:	e798      	b.n	8006d52 <_dtoa_r+0x82a>
 8006e20:	4603      	mov	r3, r0
 8006e22:	e7f6      	b.n	8006e12 <_dtoa_r+0x8ea>
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	9704      	str	r7, [sp, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dc20      	bgt.n	8006e6e <_dtoa_r+0x946>
 8006e2c:	9308      	str	r3, [sp, #32]
 8006e2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	dd1e      	ble.n	8006e72 <_dtoa_r+0x94a>
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f47f aebc 	bne.w	8006bb4 <_dtoa_r+0x68c>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	2205      	movs	r2, #5
 8006e40:	4658      	mov	r0, fp
 8006e42:	f000 fa99 	bl	8007378 <__multadd>
 8006e46:	4601      	mov	r1, r0
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f000 fcaa 	bl	80077a4 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f77f aeaf 	ble.w	8006bb4 <_dtoa_r+0x68c>
 8006e56:	2331      	movs	r3, #49	@ 0x31
 8006e58:	4656      	mov	r6, sl
 8006e5a:	f806 3b01 	strb.w	r3, [r6], #1
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	3301      	adds	r3, #1
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	e6aa      	b.n	8006bbc <_dtoa_r+0x694>
 8006e66:	9c07      	ldr	r4, [sp, #28]
 8006e68:	9704      	str	r7, [sp, #16]
 8006e6a:	4625      	mov	r5, r4
 8006e6c:	e7f3      	b.n	8006e56 <_dtoa_r+0x92e>
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	9308      	str	r3, [sp, #32]
 8006e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8104 	beq.w	8007082 <_dtoa_r+0xb5a>
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	dd05      	ble.n	8006e8a <_dtoa_r+0x962>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4632      	mov	r2, r6
 8006e82:	4658      	mov	r0, fp
 8006e84:	f000 fc22 	bl	80076cc <__lshift>
 8006e88:	4605      	mov	r5, r0
 8006e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d05a      	beq.n	8006f46 <_dtoa_r+0xa1e>
 8006e90:	4658      	mov	r0, fp
 8006e92:	6869      	ldr	r1, [r5, #4]
 8006e94:	f000 fa0e 	bl	80072b4 <_Balloc>
 8006e98:	4606      	mov	r6, r0
 8006e9a:	b928      	cbnz	r0, 8006ea8 <_dtoa_r+0x980>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ea2:	4b83      	ldr	r3, [pc, #524]	@ (80070b0 <_dtoa_r+0xb88>)
 8006ea4:	f7ff bb54 	b.w	8006550 <_dtoa_r+0x28>
 8006ea8:	692a      	ldr	r2, [r5, #16]
 8006eaa:	f105 010c 	add.w	r1, r5, #12
 8006eae:	3202      	adds	r2, #2
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	300c      	adds	r0, #12
 8006eb4:	f000 fffa 	bl	8007eac <memcpy>
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4658      	mov	r0, fp
 8006ebe:	f000 fc05 	bl	80076cc <__lshift>
 8006ec2:	462f      	mov	r7, r5
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	f10a 0301 	add.w	r3, sl, #1
 8006eca:	9307      	str	r3, [sp, #28]
 8006ecc:	9b08      	ldr	r3, [sp, #32]
 8006ece:	4453      	add	r3, sl
 8006ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ed2:	9b02      	ldr	r3, [sp, #8]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	4621      	mov	r1, r4
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	9302      	str	r3, [sp, #8]
 8006ee4:	f7ff fa95 	bl	8006412 <quorem>
 8006ee8:	4639      	mov	r1, r7
 8006eea:	9008      	str	r0, [sp, #32]
 8006eec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ef0:	4648      	mov	r0, r9
 8006ef2:	f000 fc57 	bl	80077a4 <__mcmp>
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006efa:	4621      	mov	r1, r4
 8006efc:	4658      	mov	r0, fp
 8006efe:	f000 fc6d 	bl	80077dc <__mdiff>
 8006f02:	68c2      	ldr	r2, [r0, #12]
 8006f04:	4606      	mov	r6, r0
 8006f06:	bb02      	cbnz	r2, 8006f4a <_dtoa_r+0xa22>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f000 fc4a 	bl	80077a4 <__mcmp>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4631      	mov	r1, r6
 8006f14:	4658      	mov	r0, fp
 8006f16:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f18:	f000 fa0c 	bl	8007334 <_Bfree>
 8006f1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f20:	9e07      	ldr	r6, [sp, #28]
 8006f22:	ea43 0102 	orr.w	r1, r3, r2
 8006f26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f28:	4319      	orrs	r1, r3
 8006f2a:	d110      	bne.n	8006f4e <_dtoa_r+0xa26>
 8006f2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f30:	d029      	beq.n	8006f86 <_dtoa_r+0xa5e>
 8006f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dd02      	ble.n	8006f3e <_dtoa_r+0xa16>
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f3e:	9b02      	ldr	r3, [sp, #8]
 8006f40:	f883 8000 	strb.w	r8, [r3]
 8006f44:	e63b      	b.n	8006bbe <_dtoa_r+0x696>
 8006f46:	4628      	mov	r0, r5
 8006f48:	e7bb      	b.n	8006ec2 <_dtoa_r+0x99a>
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	e7e1      	b.n	8006f12 <_dtoa_r+0x9ea>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db04      	blt.n	8006f5e <_dtoa_r+0xa36>
 8006f54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006f56:	430b      	orrs	r3, r1
 8006f58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	d120      	bne.n	8006fa0 <_dtoa_r+0xa78>
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	dded      	ble.n	8006f3e <_dtoa_r+0xa16>
 8006f62:	4649      	mov	r1, r9
 8006f64:	2201      	movs	r2, #1
 8006f66:	4658      	mov	r0, fp
 8006f68:	f000 fbb0 	bl	80076cc <__lshift>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4681      	mov	r9, r0
 8006f70:	f000 fc18 	bl	80077a4 <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	dc03      	bgt.n	8006f80 <_dtoa_r+0xa58>
 8006f78:	d1e1      	bne.n	8006f3e <_dtoa_r+0xa16>
 8006f7a:	f018 0f01 	tst.w	r8, #1
 8006f7e:	d0de      	beq.n	8006f3e <_dtoa_r+0xa16>
 8006f80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f84:	d1d8      	bne.n	8006f38 <_dtoa_r+0xa10>
 8006f86:	2339      	movs	r3, #57	@ 0x39
 8006f88:	9a02      	ldr	r2, [sp, #8]
 8006f8a:	7013      	strb	r3, [r2, #0]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	461e      	mov	r6, r3
 8006f90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	2a39      	cmp	r2, #57	@ 0x39
 8006f98:	d052      	beq.n	8007040 <_dtoa_r+0xb18>
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e60e      	b.n	8006bbe <_dtoa_r+0x696>
 8006fa0:	2a00      	cmp	r2, #0
 8006fa2:	dd07      	ble.n	8006fb4 <_dtoa_r+0xa8c>
 8006fa4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fa8:	d0ed      	beq.n	8006f86 <_dtoa_r+0xa5e>
 8006faa:	9a02      	ldr	r2, [sp, #8]
 8006fac:	f108 0301 	add.w	r3, r8, #1
 8006fb0:	7013      	strb	r3, [r2, #0]
 8006fb2:	e604      	b.n	8006bbe <_dtoa_r+0x696>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	9a07      	ldr	r2, [sp, #28]
 8006fb8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d028      	beq.n	8007014 <_dtoa_r+0xaec>
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	4658      	mov	r0, fp
 8006fca:	f000 f9d5 	bl	8007378 <__multadd>
 8006fce:	42af      	cmp	r7, r5
 8006fd0:	4681      	mov	r9, r0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	f04f 020a 	mov.w	r2, #10
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4658      	mov	r0, fp
 8006fde:	d107      	bne.n	8006ff0 <_dtoa_r+0xac8>
 8006fe0:	f000 f9ca 	bl	8007378 <__multadd>
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	3301      	adds	r3, #1
 8006fec:	9307      	str	r3, [sp, #28]
 8006fee:	e774      	b.n	8006eda <_dtoa_r+0x9b2>
 8006ff0:	f000 f9c2 	bl	8007378 <__multadd>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	220a      	movs	r2, #10
 8006ffc:	4658      	mov	r0, fp
 8006ffe:	f000 f9bb 	bl	8007378 <__multadd>
 8007002:	4605      	mov	r5, r0
 8007004:	e7f0      	b.n	8006fe8 <_dtoa_r+0xac0>
 8007006:	9b08      	ldr	r3, [sp, #32]
 8007008:	2700      	movs	r7, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfcc      	ite	gt
 800700e:	461e      	movgt	r6, r3
 8007010:	2601      	movle	r6, #1
 8007012:	4456      	add	r6, sl
 8007014:	4649      	mov	r1, r9
 8007016:	2201      	movs	r2, #1
 8007018:	4658      	mov	r0, fp
 800701a:	f000 fb57 	bl	80076cc <__lshift>
 800701e:	4621      	mov	r1, r4
 8007020:	4681      	mov	r9, r0
 8007022:	f000 fbbf 	bl	80077a4 <__mcmp>
 8007026:	2800      	cmp	r0, #0
 8007028:	dcb0      	bgt.n	8006f8c <_dtoa_r+0xa64>
 800702a:	d102      	bne.n	8007032 <_dtoa_r+0xb0a>
 800702c:	f018 0f01 	tst.w	r8, #1
 8007030:	d1ac      	bne.n	8006f8c <_dtoa_r+0xa64>
 8007032:	4633      	mov	r3, r6
 8007034:	461e      	mov	r6, r3
 8007036:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703a:	2a30      	cmp	r2, #48	@ 0x30
 800703c:	d0fa      	beq.n	8007034 <_dtoa_r+0xb0c>
 800703e:	e5be      	b.n	8006bbe <_dtoa_r+0x696>
 8007040:	459a      	cmp	sl, r3
 8007042:	d1a4      	bne.n	8006f8e <_dtoa_r+0xa66>
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	2331      	movs	r3, #49	@ 0x31
 800704c:	f88a 3000 	strb.w	r3, [sl]
 8007050:	e5b5      	b.n	8006bbe <_dtoa_r+0x696>
 8007052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007054:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070b4 <_dtoa_r+0xb8c>
 8007058:	b11b      	cbz	r3, 8007062 <_dtoa_r+0xb3a>
 800705a:	f10a 0308 	add.w	r3, sl, #8
 800705e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4650      	mov	r0, sl
 8007064:	b017      	add	sp, #92	@ 0x5c
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800706c:	2b01      	cmp	r3, #1
 800706e:	f77f ae3d 	ble.w	8006cec <_dtoa_r+0x7c4>
 8007072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007074:	930a      	str	r3, [sp, #40]	@ 0x28
 8007076:	2001      	movs	r0, #1
 8007078:	e65b      	b.n	8006d32 <_dtoa_r+0x80a>
 800707a:	9b08      	ldr	r3, [sp, #32]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f77f aed6 	ble.w	8006e2e <_dtoa_r+0x906>
 8007082:	4656      	mov	r6, sl
 8007084:	4621      	mov	r1, r4
 8007086:	4648      	mov	r0, r9
 8007088:	f7ff f9c3 	bl	8006412 <quorem>
 800708c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	f806 8b01 	strb.w	r8, [r6], #1
 8007096:	eba6 020a 	sub.w	r2, r6, sl
 800709a:	4293      	cmp	r3, r2
 800709c:	ddb3      	ble.n	8007006 <_dtoa_r+0xade>
 800709e:	4649      	mov	r1, r9
 80070a0:	2300      	movs	r3, #0
 80070a2:	220a      	movs	r2, #10
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 f967 	bl	8007378 <__multadd>
 80070aa:	4681      	mov	r9, r0
 80070ac:	e7ea      	b.n	8007084 <_dtoa_r+0xb5c>
 80070ae:	bf00      	nop
 80070b0:	080088be 	.word	0x080088be
 80070b4:	08008842 	.word	0x08008842

080070b8 <_free_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4605      	mov	r5, r0
 80070bc:	2900      	cmp	r1, #0
 80070be:	d040      	beq.n	8007142 <_free_r+0x8a>
 80070c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c4:	1f0c      	subs	r4, r1, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfb8      	it	lt
 80070ca:	18e4      	addlt	r4, r4, r3
 80070cc:	f000 f8e6 	bl	800729c <__malloc_lock>
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <_free_r+0x8c>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	b933      	cbnz	r3, 80070e4 <_free_r+0x2c>
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	6014      	str	r4, [r2, #0]
 80070da:	4628      	mov	r0, r5
 80070dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e0:	f000 b8e2 	b.w	80072a8 <__malloc_unlock>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x42>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf01      	itttt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	1809      	addeq	r1, r1, r0
 80070f6:	6021      	streq	r1, [r4, #0]
 80070f8:	e7ed      	b.n	80070d6 <_free_r+0x1e>
 80070fa:	461a      	mov	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b10b      	cbz	r3, 8007104 <_free_r+0x4c>
 8007100:	42a3      	cmp	r3, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x42>
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	1850      	adds	r0, r2, r1
 8007108:	42a0      	cmp	r0, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x6c>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4401      	add	r1, r0
 8007110:	1850      	adds	r0, r2, r1
 8007112:	4283      	cmp	r3, r0
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	d1e0      	bne.n	80070da <_free_r+0x22>
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4408      	add	r0, r1
 800711e:	6010      	str	r0, [r2, #0]
 8007120:	6053      	str	r3, [r2, #4]
 8007122:	e7da      	b.n	80070da <_free_r+0x22>
 8007124:	d902      	bls.n	800712c <_free_r+0x74>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d6      	b.n	80070da <_free_r+0x22>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	1821      	adds	r1, r4, r0
 8007130:	428b      	cmp	r3, r1
 8007132:	bf01      	itttt	eq
 8007134:	6819      	ldreq	r1, [r3, #0]
 8007136:	685b      	ldreq	r3, [r3, #4]
 8007138:	1809      	addeq	r1, r1, r0
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	6054      	str	r4, [r2, #4]
 8007140:	e7cb      	b.n	80070da <_free_r+0x22>
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20000548 	.word	0x20000548

08007148 <malloc>:
 8007148:	4b02      	ldr	r3, [pc, #8]	@ (8007154 <malloc+0xc>)
 800714a:	4601      	mov	r1, r0
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	f000 b825 	b.w	800719c <_malloc_r>
 8007152:	bf00      	nop
 8007154:	20000018 	.word	0x20000018

08007158 <sbrk_aligned>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4e0f      	ldr	r6, [pc, #60]	@ (8007198 <sbrk_aligned+0x40>)
 800715c:	460c      	mov	r4, r1
 800715e:	6831      	ldr	r1, [r6, #0]
 8007160:	4605      	mov	r5, r0
 8007162:	b911      	cbnz	r1, 800716a <sbrk_aligned+0x12>
 8007164:	f000 fe92 	bl	8007e8c <_sbrk_r>
 8007168:	6030      	str	r0, [r6, #0]
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 fe8d 	bl	8007e8c <_sbrk_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d103      	bne.n	800717e <sbrk_aligned+0x26>
 8007176:	f04f 34ff 	mov.w	r4, #4294967295
 800717a:	4620      	mov	r0, r4
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	1cc4      	adds	r4, r0, #3
 8007180:	f024 0403 	bic.w	r4, r4, #3
 8007184:	42a0      	cmp	r0, r4
 8007186:	d0f8      	beq.n	800717a <sbrk_aligned+0x22>
 8007188:	1a21      	subs	r1, r4, r0
 800718a:	4628      	mov	r0, r5
 800718c:	f000 fe7e 	bl	8007e8c <_sbrk_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d1f2      	bne.n	800717a <sbrk_aligned+0x22>
 8007194:	e7ef      	b.n	8007176 <sbrk_aligned+0x1e>
 8007196:	bf00      	nop
 8007198:	20000544 	.word	0x20000544

0800719c <_malloc_r>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	1ccd      	adds	r5, r1, #3
 80071a2:	f025 0503 	bic.w	r5, r5, #3
 80071a6:	3508      	adds	r5, #8
 80071a8:	2d0c      	cmp	r5, #12
 80071aa:	bf38      	it	cc
 80071ac:	250c      	movcc	r5, #12
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	4606      	mov	r6, r0
 80071b2:	db01      	blt.n	80071b8 <_malloc_r+0x1c>
 80071b4:	42a9      	cmp	r1, r5
 80071b6:	d904      	bls.n	80071c2 <_malloc_r+0x26>
 80071b8:	230c      	movs	r3, #12
 80071ba:	6033      	str	r3, [r6, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007298 <_malloc_r+0xfc>
 80071c6:	f000 f869 	bl	800729c <__malloc_lock>
 80071ca:	f8d8 3000 	ldr.w	r3, [r8]
 80071ce:	461c      	mov	r4, r3
 80071d0:	bb44      	cbnz	r4, 8007224 <_malloc_r+0x88>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff ffbf 	bl	8007158 <sbrk_aligned>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	4604      	mov	r4, r0
 80071de:	d158      	bne.n	8007292 <_malloc_r+0xf6>
 80071e0:	f8d8 4000 	ldr.w	r4, [r8]
 80071e4:	4627      	mov	r7, r4
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d143      	bne.n	8007272 <_malloc_r+0xd6>
 80071ea:	2c00      	cmp	r4, #0
 80071ec:	d04b      	beq.n	8007286 <_malloc_r+0xea>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4639      	mov	r1, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	eb04 0903 	add.w	r9, r4, r3
 80071f8:	f000 fe48 	bl	8007e8c <_sbrk_r>
 80071fc:	4581      	cmp	r9, r0
 80071fe:	d142      	bne.n	8007286 <_malloc_r+0xea>
 8007200:	6821      	ldr	r1, [r4, #0]
 8007202:	4630      	mov	r0, r6
 8007204:	1a6d      	subs	r5, r5, r1
 8007206:	4629      	mov	r1, r5
 8007208:	f7ff ffa6 	bl	8007158 <sbrk_aligned>
 800720c:	3001      	adds	r0, #1
 800720e:	d03a      	beq.n	8007286 <_malloc_r+0xea>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	442b      	add	r3, r5
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	f8d8 3000 	ldr.w	r3, [r8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	bb62      	cbnz	r2, 8007278 <_malloc_r+0xdc>
 800721e:	f8c8 7000 	str.w	r7, [r8]
 8007222:	e00f      	b.n	8007244 <_malloc_r+0xa8>
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	1b52      	subs	r2, r2, r5
 8007228:	d420      	bmi.n	800726c <_malloc_r+0xd0>
 800722a:	2a0b      	cmp	r2, #11
 800722c:	d917      	bls.n	800725e <_malloc_r+0xc2>
 800722e:	1961      	adds	r1, r4, r5
 8007230:	42a3      	cmp	r3, r4
 8007232:	6025      	str	r5, [r4, #0]
 8007234:	bf18      	it	ne
 8007236:	6059      	strne	r1, [r3, #4]
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	bf08      	it	eq
 800723c:	f8c8 1000 	streq.w	r1, [r8]
 8007240:	5162      	str	r2, [r4, r5]
 8007242:	604b      	str	r3, [r1, #4]
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f82f 	bl	80072a8 <__malloc_unlock>
 800724a:	f104 000b 	add.w	r0, r4, #11
 800724e:	1d23      	adds	r3, r4, #4
 8007250:	f020 0007 	bic.w	r0, r0, #7
 8007254:	1ac2      	subs	r2, r0, r3
 8007256:	bf1c      	itt	ne
 8007258:	1a1b      	subne	r3, r3, r0
 800725a:	50a3      	strne	r3, [r4, r2]
 800725c:	e7af      	b.n	80071be <_malloc_r+0x22>
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	42a3      	cmp	r3, r4
 8007262:	bf0c      	ite	eq
 8007264:	f8c8 2000 	streq.w	r2, [r8]
 8007268:	605a      	strne	r2, [r3, #4]
 800726a:	e7eb      	b.n	8007244 <_malloc_r+0xa8>
 800726c:	4623      	mov	r3, r4
 800726e:	6864      	ldr	r4, [r4, #4]
 8007270:	e7ae      	b.n	80071d0 <_malloc_r+0x34>
 8007272:	463c      	mov	r4, r7
 8007274:	687f      	ldr	r7, [r7, #4]
 8007276:	e7b6      	b.n	80071e6 <_malloc_r+0x4a>
 8007278:	461a      	mov	r2, r3
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	42a3      	cmp	r3, r4
 800727e:	d1fb      	bne.n	8007278 <_malloc_r+0xdc>
 8007280:	2300      	movs	r3, #0
 8007282:	6053      	str	r3, [r2, #4]
 8007284:	e7de      	b.n	8007244 <_malloc_r+0xa8>
 8007286:	230c      	movs	r3, #12
 8007288:	4630      	mov	r0, r6
 800728a:	6033      	str	r3, [r6, #0]
 800728c:	f000 f80c 	bl	80072a8 <__malloc_unlock>
 8007290:	e794      	b.n	80071bc <_malloc_r+0x20>
 8007292:	6005      	str	r5, [r0, #0]
 8007294:	e7d6      	b.n	8007244 <_malloc_r+0xa8>
 8007296:	bf00      	nop
 8007298:	20000548 	.word	0x20000548

0800729c <__malloc_lock>:
 800729c:	4801      	ldr	r0, [pc, #4]	@ (80072a4 <__malloc_lock+0x8>)
 800729e:	f7ff b8a8 	b.w	80063f2 <__retarget_lock_acquire_recursive>
 80072a2:	bf00      	nop
 80072a4:	20000540 	.word	0x20000540

080072a8 <__malloc_unlock>:
 80072a8:	4801      	ldr	r0, [pc, #4]	@ (80072b0 <__malloc_unlock+0x8>)
 80072aa:	f7ff b8a3 	b.w	80063f4 <__retarget_lock_release_recursive>
 80072ae:	bf00      	nop
 80072b0:	20000540 	.word	0x20000540

080072b4 <_Balloc>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	69c6      	ldr	r6, [r0, #28]
 80072b8:	4604      	mov	r4, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	b976      	cbnz	r6, 80072dc <_Balloc+0x28>
 80072be:	2010      	movs	r0, #16
 80072c0:	f7ff ff42 	bl	8007148 <malloc>
 80072c4:	4602      	mov	r2, r0
 80072c6:	61e0      	str	r0, [r4, #28]
 80072c8:	b920      	cbnz	r0, 80072d4 <_Balloc+0x20>
 80072ca:	216b      	movs	r1, #107	@ 0x6b
 80072cc:	4b17      	ldr	r3, [pc, #92]	@ (800732c <_Balloc+0x78>)
 80072ce:	4818      	ldr	r0, [pc, #96]	@ (8007330 <_Balloc+0x7c>)
 80072d0:	f000 fdfa 	bl	8007ec8 <__assert_func>
 80072d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d8:	6006      	str	r6, [r0, #0]
 80072da:	60c6      	str	r6, [r0, #12]
 80072dc:	69e6      	ldr	r6, [r4, #28]
 80072de:	68f3      	ldr	r3, [r6, #12]
 80072e0:	b183      	cbz	r3, 8007304 <_Balloc+0x50>
 80072e2:	69e3      	ldr	r3, [r4, #28]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ea:	b9b8      	cbnz	r0, 800731c <_Balloc+0x68>
 80072ec:	2101      	movs	r1, #1
 80072ee:	fa01 f605 	lsl.w	r6, r1, r5
 80072f2:	1d72      	adds	r2, r6, #5
 80072f4:	4620      	mov	r0, r4
 80072f6:	0092      	lsls	r2, r2, #2
 80072f8:	f000 fe04 	bl	8007f04 <_calloc_r>
 80072fc:	b160      	cbz	r0, 8007318 <_Balloc+0x64>
 80072fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007302:	e00e      	b.n	8007322 <_Balloc+0x6e>
 8007304:	2221      	movs	r2, #33	@ 0x21
 8007306:	2104      	movs	r1, #4
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fdfb 	bl	8007f04 <_calloc_r>
 800730e:	69e3      	ldr	r3, [r4, #28]
 8007310:	60f0      	str	r0, [r6, #12]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e4      	bne.n	80072e2 <_Balloc+0x2e>
 8007318:	2000      	movs	r0, #0
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	6802      	ldr	r2, [r0, #0]
 800731e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007322:	2300      	movs	r3, #0
 8007324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007328:	e7f7      	b.n	800731a <_Balloc+0x66>
 800732a:	bf00      	nop
 800732c:	0800884f 	.word	0x0800884f
 8007330:	080088cf 	.word	0x080088cf

08007334 <_Bfree>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	69c6      	ldr	r6, [r0, #28]
 8007338:	4605      	mov	r5, r0
 800733a:	460c      	mov	r4, r1
 800733c:	b976      	cbnz	r6, 800735c <_Bfree+0x28>
 800733e:	2010      	movs	r0, #16
 8007340:	f7ff ff02 	bl	8007148 <malloc>
 8007344:	4602      	mov	r2, r0
 8007346:	61e8      	str	r0, [r5, #28]
 8007348:	b920      	cbnz	r0, 8007354 <_Bfree+0x20>
 800734a:	218f      	movs	r1, #143	@ 0x8f
 800734c:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <_Bfree+0x3c>)
 800734e:	4809      	ldr	r0, [pc, #36]	@ (8007374 <_Bfree+0x40>)
 8007350:	f000 fdba 	bl	8007ec8 <__assert_func>
 8007354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007358:	6006      	str	r6, [r0, #0]
 800735a:	60c6      	str	r6, [r0, #12]
 800735c:	b13c      	cbz	r4, 800736e <_Bfree+0x3a>
 800735e:	69eb      	ldr	r3, [r5, #28]
 8007360:	6862      	ldr	r2, [r4, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007368:	6021      	str	r1, [r4, #0]
 800736a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	0800884f 	.word	0x0800884f
 8007374:	080088cf 	.word	0x080088cf

08007378 <__multadd>:
 8007378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737c:	4607      	mov	r7, r0
 800737e:	460c      	mov	r4, r1
 8007380:	461e      	mov	r6, r3
 8007382:	2000      	movs	r0, #0
 8007384:	690d      	ldr	r5, [r1, #16]
 8007386:	f101 0c14 	add.w	ip, r1, #20
 800738a:	f8dc 3000 	ldr.w	r3, [ip]
 800738e:	3001      	adds	r0, #1
 8007390:	b299      	uxth	r1, r3
 8007392:	fb02 6101 	mla	r1, r2, r1, r6
 8007396:	0c1e      	lsrs	r6, r3, #16
 8007398:	0c0b      	lsrs	r3, r1, #16
 800739a:	fb02 3306 	mla	r3, r2, r6, r3
 800739e:	b289      	uxth	r1, r1
 80073a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073a4:	4285      	cmp	r5, r0
 80073a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073aa:	f84c 1b04 	str.w	r1, [ip], #4
 80073ae:	dcec      	bgt.n	800738a <__multadd+0x12>
 80073b0:	b30e      	cbz	r6, 80073f6 <__multadd+0x7e>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dc19      	bgt.n	80073ec <__multadd+0x74>
 80073b8:	6861      	ldr	r1, [r4, #4]
 80073ba:	4638      	mov	r0, r7
 80073bc:	3101      	adds	r1, #1
 80073be:	f7ff ff79 	bl	80072b4 <_Balloc>
 80073c2:	4680      	mov	r8, r0
 80073c4:	b928      	cbnz	r0, 80073d2 <__multadd+0x5a>
 80073c6:	4602      	mov	r2, r0
 80073c8:	21ba      	movs	r1, #186	@ 0xba
 80073ca:	4b0c      	ldr	r3, [pc, #48]	@ (80073fc <__multadd+0x84>)
 80073cc:	480c      	ldr	r0, [pc, #48]	@ (8007400 <__multadd+0x88>)
 80073ce:	f000 fd7b 	bl	8007ec8 <__assert_func>
 80073d2:	6922      	ldr	r2, [r4, #16]
 80073d4:	f104 010c 	add.w	r1, r4, #12
 80073d8:	3202      	adds	r2, #2
 80073da:	0092      	lsls	r2, r2, #2
 80073dc:	300c      	adds	r0, #12
 80073de:	f000 fd65 	bl	8007eac <memcpy>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4638      	mov	r0, r7
 80073e6:	f7ff ffa5 	bl	8007334 <_Bfree>
 80073ea:	4644      	mov	r4, r8
 80073ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073f0:	3501      	adds	r5, #1
 80073f2:	615e      	str	r6, [r3, #20]
 80073f4:	6125      	str	r5, [r4, #16]
 80073f6:	4620      	mov	r0, r4
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	080088be 	.word	0x080088be
 8007400:	080088cf 	.word	0x080088cf

08007404 <__hi0bits>:
 8007404:	4603      	mov	r3, r0
 8007406:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800740a:	bf3a      	itte	cc
 800740c:	0403      	lslcc	r3, r0, #16
 800740e:	2010      	movcc	r0, #16
 8007410:	2000      	movcs	r0, #0
 8007412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007416:	bf3c      	itt	cc
 8007418:	021b      	lslcc	r3, r3, #8
 800741a:	3008      	addcc	r0, #8
 800741c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007420:	bf3c      	itt	cc
 8007422:	011b      	lslcc	r3, r3, #4
 8007424:	3004      	addcc	r0, #4
 8007426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742a:	bf3c      	itt	cc
 800742c:	009b      	lslcc	r3, r3, #2
 800742e:	3002      	addcc	r0, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	db05      	blt.n	8007440 <__hi0bits+0x3c>
 8007434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007438:	f100 0001 	add.w	r0, r0, #1
 800743c:	bf08      	it	eq
 800743e:	2020      	moveq	r0, #32
 8007440:	4770      	bx	lr

08007442 <__lo0bits>:
 8007442:	6803      	ldr	r3, [r0, #0]
 8007444:	4602      	mov	r2, r0
 8007446:	f013 0007 	ands.w	r0, r3, #7
 800744a:	d00b      	beq.n	8007464 <__lo0bits+0x22>
 800744c:	07d9      	lsls	r1, r3, #31
 800744e:	d421      	bmi.n	8007494 <__lo0bits+0x52>
 8007450:	0798      	lsls	r0, r3, #30
 8007452:	bf49      	itett	mi
 8007454:	085b      	lsrmi	r3, r3, #1
 8007456:	089b      	lsrpl	r3, r3, #2
 8007458:	2001      	movmi	r0, #1
 800745a:	6013      	strmi	r3, [r2, #0]
 800745c:	bf5c      	itt	pl
 800745e:	2002      	movpl	r0, #2
 8007460:	6013      	strpl	r3, [r2, #0]
 8007462:	4770      	bx	lr
 8007464:	b299      	uxth	r1, r3
 8007466:	b909      	cbnz	r1, 800746c <__lo0bits+0x2a>
 8007468:	2010      	movs	r0, #16
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	b2d9      	uxtb	r1, r3
 800746e:	b909      	cbnz	r1, 8007474 <__lo0bits+0x32>
 8007470:	3008      	adds	r0, #8
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	0719      	lsls	r1, r3, #28
 8007476:	bf04      	itt	eq
 8007478:	091b      	lsreq	r3, r3, #4
 800747a:	3004      	addeq	r0, #4
 800747c:	0799      	lsls	r1, r3, #30
 800747e:	bf04      	itt	eq
 8007480:	089b      	lsreq	r3, r3, #2
 8007482:	3002      	addeq	r0, #2
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d403      	bmi.n	8007490 <__lo0bits+0x4e>
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	f100 0001 	add.w	r0, r0, #1
 800748e:	d003      	beq.n	8007498 <__lo0bits+0x56>
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	4770      	bx	lr
 8007494:	2000      	movs	r0, #0
 8007496:	4770      	bx	lr
 8007498:	2020      	movs	r0, #32
 800749a:	4770      	bx	lr

0800749c <__i2b>:
 800749c:	b510      	push	{r4, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	2101      	movs	r1, #1
 80074a2:	f7ff ff07 	bl	80072b4 <_Balloc>
 80074a6:	4602      	mov	r2, r0
 80074a8:	b928      	cbnz	r0, 80074b6 <__i2b+0x1a>
 80074aa:	f240 1145 	movw	r1, #325	@ 0x145
 80074ae:	4b04      	ldr	r3, [pc, #16]	@ (80074c0 <__i2b+0x24>)
 80074b0:	4804      	ldr	r0, [pc, #16]	@ (80074c4 <__i2b+0x28>)
 80074b2:	f000 fd09 	bl	8007ec8 <__assert_func>
 80074b6:	2301      	movs	r3, #1
 80074b8:	6144      	str	r4, [r0, #20]
 80074ba:	6103      	str	r3, [r0, #16]
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	080088be 	.word	0x080088be
 80074c4:	080088cf 	.word	0x080088cf

080074c8 <__multiply>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	4614      	mov	r4, r2
 80074ce:	690a      	ldr	r2, [r1, #16]
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	460f      	mov	r7, r1
 80074d4:	429a      	cmp	r2, r3
 80074d6:	bfa2      	ittt	ge
 80074d8:	4623      	movge	r3, r4
 80074da:	460c      	movge	r4, r1
 80074dc:	461f      	movge	r7, r3
 80074de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074e6:	68a3      	ldr	r3, [r4, #8]
 80074e8:	6861      	ldr	r1, [r4, #4]
 80074ea:	eb0a 0609 	add.w	r6, sl, r9
 80074ee:	42b3      	cmp	r3, r6
 80074f0:	b085      	sub	sp, #20
 80074f2:	bfb8      	it	lt
 80074f4:	3101      	addlt	r1, #1
 80074f6:	f7ff fedd 	bl	80072b4 <_Balloc>
 80074fa:	b930      	cbnz	r0, 800750a <__multiply+0x42>
 80074fc:	4602      	mov	r2, r0
 80074fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007502:	4b43      	ldr	r3, [pc, #268]	@ (8007610 <__multiply+0x148>)
 8007504:	4843      	ldr	r0, [pc, #268]	@ (8007614 <__multiply+0x14c>)
 8007506:	f000 fcdf 	bl	8007ec8 <__assert_func>
 800750a:	f100 0514 	add.w	r5, r0, #20
 800750e:	462b      	mov	r3, r5
 8007510:	2200      	movs	r2, #0
 8007512:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007516:	4543      	cmp	r3, r8
 8007518:	d321      	bcc.n	800755e <__multiply+0x96>
 800751a:	f107 0114 	add.w	r1, r7, #20
 800751e:	f104 0214 	add.w	r2, r4, #20
 8007522:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007526:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	1b13      	subs	r3, r2, r4
 800752e:	3b15      	subs	r3, #21
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	3304      	adds	r3, #4
 8007536:	f104 0715 	add.w	r7, r4, #21
 800753a:	42ba      	cmp	r2, r7
 800753c:	bf38      	it	cc
 800753e:	2304      	movcc	r3, #4
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	9103      	str	r1, [sp, #12]
 8007546:	428b      	cmp	r3, r1
 8007548:	d80c      	bhi.n	8007564 <__multiply+0x9c>
 800754a:	2e00      	cmp	r6, #0
 800754c:	dd03      	ble.n	8007556 <__multiply+0x8e>
 800754e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007552:	2b00      	cmp	r3, #0
 8007554:	d05a      	beq.n	800760c <__multiply+0x144>
 8007556:	6106      	str	r6, [r0, #16]
 8007558:	b005      	add	sp, #20
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	f843 2b04 	str.w	r2, [r3], #4
 8007562:	e7d8      	b.n	8007516 <__multiply+0x4e>
 8007564:	f8b1 a000 	ldrh.w	sl, [r1]
 8007568:	f1ba 0f00 	cmp.w	sl, #0
 800756c:	d023      	beq.n	80075b6 <__multiply+0xee>
 800756e:	46a9      	mov	r9, r5
 8007570:	f04f 0c00 	mov.w	ip, #0
 8007574:	f104 0e14 	add.w	lr, r4, #20
 8007578:	f85e 7b04 	ldr.w	r7, [lr], #4
 800757c:	f8d9 3000 	ldr.w	r3, [r9]
 8007580:	fa1f fb87 	uxth.w	fp, r7
 8007584:	b29b      	uxth	r3, r3
 8007586:	fb0a 330b 	mla	r3, sl, fp, r3
 800758a:	4463      	add	r3, ip
 800758c:	f8d9 c000 	ldr.w	ip, [r9]
 8007590:	0c3f      	lsrs	r7, r7, #16
 8007592:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007596:	fb0a c707 	mla	r7, sl, r7, ip
 800759a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800759e:	b29b      	uxth	r3, r3
 80075a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075a4:	4572      	cmp	r2, lr
 80075a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075aa:	f849 3b04 	str.w	r3, [r9], #4
 80075ae:	d8e3      	bhi.n	8007578 <__multiply+0xb0>
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	f845 c003 	str.w	ip, [r5, r3]
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	3104      	adds	r1, #4
 80075ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075be:	f1b9 0f00 	cmp.w	r9, #0
 80075c2:	d021      	beq.n	8007608 <__multiply+0x140>
 80075c4:	46ae      	mov	lr, r5
 80075c6:	f04f 0a00 	mov.w	sl, #0
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	f104 0c14 	add.w	ip, r4, #20
 80075d0:	f8bc b000 	ldrh.w	fp, [ip]
 80075d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	fb09 770b 	mla	r7, r9, fp, r7
 80075de:	4457      	add	r7, sl
 80075e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075e4:	f84e 3b04 	str.w	r3, [lr], #4
 80075e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075f0:	f8be 3000 	ldrh.w	r3, [lr]
 80075f4:	4562      	cmp	r2, ip
 80075f6:	fb09 330a 	mla	r3, r9, sl, r3
 80075fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007602:	d8e5      	bhi.n	80075d0 <__multiply+0x108>
 8007604:	9f01      	ldr	r7, [sp, #4]
 8007606:	51eb      	str	r3, [r5, r7]
 8007608:	3504      	adds	r5, #4
 800760a:	e79a      	b.n	8007542 <__multiply+0x7a>
 800760c:	3e01      	subs	r6, #1
 800760e:	e79c      	b.n	800754a <__multiply+0x82>
 8007610:	080088be 	.word	0x080088be
 8007614:	080088cf 	.word	0x080088cf

08007618 <__pow5mult>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4615      	mov	r5, r2
 800761e:	f012 0203 	ands.w	r2, r2, #3
 8007622:	4607      	mov	r7, r0
 8007624:	460e      	mov	r6, r1
 8007626:	d007      	beq.n	8007638 <__pow5mult+0x20>
 8007628:	4c25      	ldr	r4, [pc, #148]	@ (80076c0 <__pow5mult+0xa8>)
 800762a:	3a01      	subs	r2, #1
 800762c:	2300      	movs	r3, #0
 800762e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007632:	f7ff fea1 	bl	8007378 <__multadd>
 8007636:	4606      	mov	r6, r0
 8007638:	10ad      	asrs	r5, r5, #2
 800763a:	d03d      	beq.n	80076b8 <__pow5mult+0xa0>
 800763c:	69fc      	ldr	r4, [r7, #28]
 800763e:	b97c      	cbnz	r4, 8007660 <__pow5mult+0x48>
 8007640:	2010      	movs	r0, #16
 8007642:	f7ff fd81 	bl	8007148 <malloc>
 8007646:	4602      	mov	r2, r0
 8007648:	61f8      	str	r0, [r7, #28]
 800764a:	b928      	cbnz	r0, 8007658 <__pow5mult+0x40>
 800764c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007650:	4b1c      	ldr	r3, [pc, #112]	@ (80076c4 <__pow5mult+0xac>)
 8007652:	481d      	ldr	r0, [pc, #116]	@ (80076c8 <__pow5mult+0xb0>)
 8007654:	f000 fc38 	bl	8007ec8 <__assert_func>
 8007658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800765c:	6004      	str	r4, [r0, #0]
 800765e:	60c4      	str	r4, [r0, #12]
 8007660:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007668:	b94c      	cbnz	r4, 800767e <__pow5mult+0x66>
 800766a:	f240 2171 	movw	r1, #625	@ 0x271
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff ff14 	bl	800749c <__i2b>
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	f8c8 0008 	str.w	r0, [r8, #8]
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	f04f 0900 	mov.w	r9, #0
 8007682:	07eb      	lsls	r3, r5, #31
 8007684:	d50a      	bpl.n	800769c <__pow5mult+0x84>
 8007686:	4631      	mov	r1, r6
 8007688:	4622      	mov	r2, r4
 800768a:	4638      	mov	r0, r7
 800768c:	f7ff ff1c 	bl	80074c8 <__multiply>
 8007690:	4680      	mov	r8, r0
 8007692:	4631      	mov	r1, r6
 8007694:	4638      	mov	r0, r7
 8007696:	f7ff fe4d 	bl	8007334 <_Bfree>
 800769a:	4646      	mov	r6, r8
 800769c:	106d      	asrs	r5, r5, #1
 800769e:	d00b      	beq.n	80076b8 <__pow5mult+0xa0>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	b938      	cbnz	r0, 80076b4 <__pow5mult+0x9c>
 80076a4:	4622      	mov	r2, r4
 80076a6:	4621      	mov	r1, r4
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ff0d 	bl	80074c8 <__multiply>
 80076ae:	6020      	str	r0, [r4, #0]
 80076b0:	f8c0 9000 	str.w	r9, [r0]
 80076b4:	4604      	mov	r4, r0
 80076b6:	e7e4      	b.n	8007682 <__pow5mult+0x6a>
 80076b8:	4630      	mov	r0, r6
 80076ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076be:	bf00      	nop
 80076c0:	08008928 	.word	0x08008928
 80076c4:	0800884f 	.word	0x0800884f
 80076c8:	080088cf 	.word	0x080088cf

080076cc <__lshift>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	460c      	mov	r4, r1
 80076d2:	4607      	mov	r7, r0
 80076d4:	4691      	mov	r9, r2
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6849      	ldr	r1, [r1, #4]
 80076da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076e4:	f108 0601 	add.w	r6, r8, #1
 80076e8:	42b3      	cmp	r3, r6
 80076ea:	db0b      	blt.n	8007704 <__lshift+0x38>
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff fde1 	bl	80072b4 <_Balloc>
 80076f2:	4605      	mov	r5, r0
 80076f4:	b948      	cbnz	r0, 800770a <__lshift+0x3e>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076fc:	4b27      	ldr	r3, [pc, #156]	@ (800779c <__lshift+0xd0>)
 80076fe:	4828      	ldr	r0, [pc, #160]	@ (80077a0 <__lshift+0xd4>)
 8007700:	f000 fbe2 	bl	8007ec8 <__assert_func>
 8007704:	3101      	adds	r1, #1
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	e7ee      	b.n	80076e8 <__lshift+0x1c>
 800770a:	2300      	movs	r3, #0
 800770c:	f100 0114 	add.w	r1, r0, #20
 8007710:	f100 0210 	add.w	r2, r0, #16
 8007714:	4618      	mov	r0, r3
 8007716:	4553      	cmp	r3, sl
 8007718:	db33      	blt.n	8007782 <__lshift+0xb6>
 800771a:	6920      	ldr	r0, [r4, #16]
 800771c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007720:	f104 0314 	add.w	r3, r4, #20
 8007724:	f019 091f 	ands.w	r9, r9, #31
 8007728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800772c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007730:	d02b      	beq.n	800778a <__lshift+0xbe>
 8007732:	468a      	mov	sl, r1
 8007734:	2200      	movs	r2, #0
 8007736:	f1c9 0e20 	rsb	lr, r9, #32
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	fa00 f009 	lsl.w	r0, r0, r9
 8007740:	4310      	orrs	r0, r2
 8007742:	f84a 0b04 	str.w	r0, [sl], #4
 8007746:	f853 2b04 	ldr.w	r2, [r3], #4
 800774a:	459c      	cmp	ip, r3
 800774c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007750:	d8f3      	bhi.n	800773a <__lshift+0x6e>
 8007752:	ebac 0304 	sub.w	r3, ip, r4
 8007756:	3b15      	subs	r3, #21
 8007758:	f023 0303 	bic.w	r3, r3, #3
 800775c:	3304      	adds	r3, #4
 800775e:	f104 0015 	add.w	r0, r4, #21
 8007762:	4584      	cmp	ip, r0
 8007764:	bf38      	it	cc
 8007766:	2304      	movcc	r3, #4
 8007768:	50ca      	str	r2, [r1, r3]
 800776a:	b10a      	cbz	r2, 8007770 <__lshift+0xa4>
 800776c:	f108 0602 	add.w	r6, r8, #2
 8007770:	3e01      	subs	r6, #1
 8007772:	4638      	mov	r0, r7
 8007774:	4621      	mov	r1, r4
 8007776:	612e      	str	r6, [r5, #16]
 8007778:	f7ff fddc 	bl	8007334 <_Bfree>
 800777c:	4628      	mov	r0, r5
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	f842 0f04 	str.w	r0, [r2, #4]!
 8007786:	3301      	adds	r3, #1
 8007788:	e7c5      	b.n	8007716 <__lshift+0x4a>
 800778a:	3904      	subs	r1, #4
 800778c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007790:	459c      	cmp	ip, r3
 8007792:	f841 2f04 	str.w	r2, [r1, #4]!
 8007796:	d8f9      	bhi.n	800778c <__lshift+0xc0>
 8007798:	e7ea      	b.n	8007770 <__lshift+0xa4>
 800779a:	bf00      	nop
 800779c:	080088be 	.word	0x080088be
 80077a0:	080088cf 	.word	0x080088cf

080077a4 <__mcmp>:
 80077a4:	4603      	mov	r3, r0
 80077a6:	690a      	ldr	r2, [r1, #16]
 80077a8:	6900      	ldr	r0, [r0, #16]
 80077aa:	b530      	push	{r4, r5, lr}
 80077ac:	1a80      	subs	r0, r0, r2
 80077ae:	d10e      	bne.n	80077ce <__mcmp+0x2a>
 80077b0:	3314      	adds	r3, #20
 80077b2:	3114      	adds	r1, #20
 80077b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077c4:	4295      	cmp	r5, r2
 80077c6:	d003      	beq.n	80077d0 <__mcmp+0x2c>
 80077c8:	d205      	bcs.n	80077d6 <__mcmp+0x32>
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d3f3      	bcc.n	80077bc <__mcmp+0x18>
 80077d4:	e7fb      	b.n	80077ce <__mcmp+0x2a>
 80077d6:	2001      	movs	r0, #1
 80077d8:	e7f9      	b.n	80077ce <__mcmp+0x2a>
	...

080077dc <__mdiff>:
 80077dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	4689      	mov	r9, r1
 80077e2:	4606      	mov	r6, r0
 80077e4:	4611      	mov	r1, r2
 80077e6:	4648      	mov	r0, r9
 80077e8:	4614      	mov	r4, r2
 80077ea:	f7ff ffdb 	bl	80077a4 <__mcmp>
 80077ee:	1e05      	subs	r5, r0, #0
 80077f0:	d112      	bne.n	8007818 <__mdiff+0x3c>
 80077f2:	4629      	mov	r1, r5
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff fd5d 	bl	80072b4 <_Balloc>
 80077fa:	4602      	mov	r2, r0
 80077fc:	b928      	cbnz	r0, 800780a <__mdiff+0x2e>
 80077fe:	f240 2137 	movw	r1, #567	@ 0x237
 8007802:	4b3e      	ldr	r3, [pc, #248]	@ (80078fc <__mdiff+0x120>)
 8007804:	483e      	ldr	r0, [pc, #248]	@ (8007900 <__mdiff+0x124>)
 8007806:	f000 fb5f 	bl	8007ec8 <__assert_func>
 800780a:	2301      	movs	r3, #1
 800780c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007810:	4610      	mov	r0, r2
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	bfbc      	itt	lt
 800781a:	464b      	movlt	r3, r9
 800781c:	46a1      	movlt	r9, r4
 800781e:	4630      	mov	r0, r6
 8007820:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007824:	bfba      	itte	lt
 8007826:	461c      	movlt	r4, r3
 8007828:	2501      	movlt	r5, #1
 800782a:	2500      	movge	r5, #0
 800782c:	f7ff fd42 	bl	80072b4 <_Balloc>
 8007830:	4602      	mov	r2, r0
 8007832:	b918      	cbnz	r0, 800783c <__mdiff+0x60>
 8007834:	f240 2145 	movw	r1, #581	@ 0x245
 8007838:	4b30      	ldr	r3, [pc, #192]	@ (80078fc <__mdiff+0x120>)
 800783a:	e7e3      	b.n	8007804 <__mdiff+0x28>
 800783c:	f100 0b14 	add.w	fp, r0, #20
 8007840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007844:	f109 0310 	add.w	r3, r9, #16
 8007848:	60c5      	str	r5, [r0, #12]
 800784a:	f04f 0c00 	mov.w	ip, #0
 800784e:	f109 0514 	add.w	r5, r9, #20
 8007852:	46d9      	mov	r9, fp
 8007854:	6926      	ldr	r6, [r4, #16]
 8007856:	f104 0e14 	add.w	lr, r4, #20
 800785a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800785e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	f85e 0b04 	ldr.w	r0, [lr], #4
 800786a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800786e:	b281      	uxth	r1, r0
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	fa1f f38a 	uxth.w	r3, sl
 8007876:	1a5b      	subs	r3, r3, r1
 8007878:	0c00      	lsrs	r0, r0, #16
 800787a:	4463      	add	r3, ip
 800787c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007880:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007884:	b29b      	uxth	r3, r3
 8007886:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800788a:	4576      	cmp	r6, lr
 800788c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007890:	f849 3b04 	str.w	r3, [r9], #4
 8007894:	d8e6      	bhi.n	8007864 <__mdiff+0x88>
 8007896:	1b33      	subs	r3, r6, r4
 8007898:	3b15      	subs	r3, #21
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	3415      	adds	r4, #21
 80078a0:	3304      	adds	r3, #4
 80078a2:	42a6      	cmp	r6, r4
 80078a4:	bf38      	it	cc
 80078a6:	2304      	movcc	r3, #4
 80078a8:	441d      	add	r5, r3
 80078aa:	445b      	add	r3, fp
 80078ac:	461e      	mov	r6, r3
 80078ae:	462c      	mov	r4, r5
 80078b0:	4544      	cmp	r4, r8
 80078b2:	d30e      	bcc.n	80078d2 <__mdiff+0xf6>
 80078b4:	f108 0103 	add.w	r1, r8, #3
 80078b8:	1b49      	subs	r1, r1, r5
 80078ba:	f021 0103 	bic.w	r1, r1, #3
 80078be:	3d03      	subs	r5, #3
 80078c0:	45a8      	cmp	r8, r5
 80078c2:	bf38      	it	cc
 80078c4:	2100      	movcc	r1, #0
 80078c6:	440b      	add	r3, r1
 80078c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078cc:	b199      	cbz	r1, 80078f6 <__mdiff+0x11a>
 80078ce:	6117      	str	r7, [r2, #16]
 80078d0:	e79e      	b.n	8007810 <__mdiff+0x34>
 80078d2:	46e6      	mov	lr, ip
 80078d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80078d8:	fa1f fc81 	uxth.w	ip, r1
 80078dc:	44f4      	add	ip, lr
 80078de:	0c08      	lsrs	r0, r1, #16
 80078e0:	4471      	add	r1, lr
 80078e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078e6:	b289      	uxth	r1, r1
 80078e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078f0:	f846 1b04 	str.w	r1, [r6], #4
 80078f4:	e7dc      	b.n	80078b0 <__mdiff+0xd4>
 80078f6:	3f01      	subs	r7, #1
 80078f8:	e7e6      	b.n	80078c8 <__mdiff+0xec>
 80078fa:	bf00      	nop
 80078fc:	080088be 	.word	0x080088be
 8007900:	080088cf 	.word	0x080088cf

08007904 <__d2b>:
 8007904:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007908:	2101      	movs	r1, #1
 800790a:	4690      	mov	r8, r2
 800790c:	4699      	mov	r9, r3
 800790e:	9e08      	ldr	r6, [sp, #32]
 8007910:	f7ff fcd0 	bl	80072b4 <_Balloc>
 8007914:	4604      	mov	r4, r0
 8007916:	b930      	cbnz	r0, 8007926 <__d2b+0x22>
 8007918:	4602      	mov	r2, r0
 800791a:	f240 310f 	movw	r1, #783	@ 0x30f
 800791e:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <__d2b+0xa8>)
 8007920:	4823      	ldr	r0, [pc, #140]	@ (80079b0 <__d2b+0xac>)
 8007922:	f000 fad1 	bl	8007ec8 <__assert_func>
 8007926:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800792a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800792e:	b10d      	cbz	r5, 8007934 <__d2b+0x30>
 8007930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f1b8 0300 	subs.w	r3, r8, #0
 800793a:	d024      	beq.n	8007986 <__d2b+0x82>
 800793c:	4668      	mov	r0, sp
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	f7ff fd7f 	bl	8007442 <__lo0bits>
 8007944:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007948:	b1d8      	cbz	r0, 8007982 <__d2b+0x7e>
 800794a:	f1c0 0320 	rsb	r3, r0, #32
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	430b      	orrs	r3, r1
 8007954:	40c2      	lsrs	r2, r0
 8007956:	6163      	str	r3, [r4, #20]
 8007958:	9201      	str	r2, [sp, #4]
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf0c      	ite	eq
 8007960:	2201      	moveq	r2, #1
 8007962:	2202      	movne	r2, #2
 8007964:	61a3      	str	r3, [r4, #24]
 8007966:	6122      	str	r2, [r4, #16]
 8007968:	b1ad      	cbz	r5, 8007996 <__d2b+0x92>
 800796a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800796e:	4405      	add	r5, r0
 8007970:	6035      	str	r5, [r6, #0]
 8007972:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007978:	6018      	str	r0, [r3, #0]
 800797a:	4620      	mov	r0, r4
 800797c:	b002      	add	sp, #8
 800797e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007982:	6161      	str	r1, [r4, #20]
 8007984:	e7e9      	b.n	800795a <__d2b+0x56>
 8007986:	a801      	add	r0, sp, #4
 8007988:	f7ff fd5b 	bl	8007442 <__lo0bits>
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	6163      	str	r3, [r4, #20]
 8007992:	3020      	adds	r0, #32
 8007994:	e7e7      	b.n	8007966 <__d2b+0x62>
 8007996:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800799a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800799e:	6030      	str	r0, [r6, #0]
 80079a0:	6918      	ldr	r0, [r3, #16]
 80079a2:	f7ff fd2f 	bl	8007404 <__hi0bits>
 80079a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079aa:	e7e4      	b.n	8007976 <__d2b+0x72>
 80079ac:	080088be 	.word	0x080088be
 80079b0:	080088cf 	.word	0x080088cf

080079b4 <__sfputc_r>:
 80079b4:	6893      	ldr	r3, [r2, #8]
 80079b6:	b410      	push	{r4}
 80079b8:	3b01      	subs	r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	6093      	str	r3, [r2, #8]
 80079be:	da07      	bge.n	80079d0 <__sfputc_r+0x1c>
 80079c0:	6994      	ldr	r4, [r2, #24]
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	db01      	blt.n	80079ca <__sfputc_r+0x16>
 80079c6:	290a      	cmp	r1, #10
 80079c8:	d102      	bne.n	80079d0 <__sfputc_r+0x1c>
 80079ca:	bc10      	pop	{r4}
 80079cc:	f7fe bbff 	b.w	80061ce <__swbuf_r>
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	1c58      	adds	r0, r3, #1
 80079d4:	6010      	str	r0, [r2, #0]
 80079d6:	7019      	strb	r1, [r3, #0]
 80079d8:	4608      	mov	r0, r1
 80079da:	bc10      	pop	{r4}
 80079dc:	4770      	bx	lr

080079de <__sfputs_r>:
 80079de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	18d5      	adds	r5, r2, r3
 80079e8:	42ac      	cmp	r4, r5
 80079ea:	d101      	bne.n	80079f0 <__sfputs_r+0x12>
 80079ec:	2000      	movs	r0, #0
 80079ee:	e007      	b.n	8007a00 <__sfputs_r+0x22>
 80079f0:	463a      	mov	r2, r7
 80079f2:	4630      	mov	r0, r6
 80079f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f8:	f7ff ffdc 	bl	80079b4 <__sfputc_r>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d1f3      	bne.n	80079e8 <__sfputs_r+0xa>
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a04 <_vfiprintf_r>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	460d      	mov	r5, r1
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	4698      	mov	r8, r3
 8007a0e:	4606      	mov	r6, r0
 8007a10:	b09d      	sub	sp, #116	@ 0x74
 8007a12:	b118      	cbz	r0, 8007a1c <_vfiprintf_r+0x18>
 8007a14:	6a03      	ldr	r3, [r0, #32]
 8007a16:	b90b      	cbnz	r3, 8007a1c <_vfiprintf_r+0x18>
 8007a18:	f7fe faf0 	bl	8005ffc <__sinit>
 8007a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a1e:	07d9      	lsls	r1, r3, #31
 8007a20:	d405      	bmi.n	8007a2e <_vfiprintf_r+0x2a>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	059a      	lsls	r2, r3, #22
 8007a26:	d402      	bmi.n	8007a2e <_vfiprintf_r+0x2a>
 8007a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a2a:	f7fe fce2 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	071b      	lsls	r3, r3, #28
 8007a32:	d501      	bpl.n	8007a38 <_vfiprintf_r+0x34>
 8007a34:	692b      	ldr	r3, [r5, #16]
 8007a36:	b99b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x5c>
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7fe fc06 	bl	800624c <__swsetup_r>
 8007a40:	b170      	cbz	r0, 8007a60 <_vfiprintf_r+0x5c>
 8007a42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a44:	07dc      	lsls	r4, r3, #31
 8007a46:	d504      	bpl.n	8007a52 <_vfiprintf_r+0x4e>
 8007a48:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4c:	b01d      	add	sp, #116	@ 0x74
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	0598      	lsls	r0, r3, #22
 8007a56:	d4f7      	bmi.n	8007a48 <_vfiprintf_r+0x44>
 8007a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a5a:	f7fe fccb 	bl	80063f4 <__retarget_lock_release_recursive>
 8007a5e:	e7f3      	b.n	8007a48 <_vfiprintf_r+0x44>
 8007a60:	2300      	movs	r3, #0
 8007a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a64:	2320      	movs	r3, #32
 8007a66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a6a:	2330      	movs	r3, #48	@ 0x30
 8007a6c:	f04f 0901 	mov.w	r9, #1
 8007a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007c20 <_vfiprintf_r+0x21c>
 8007a78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	469a      	mov	sl, r3
 8007a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a84:	b10a      	cbz	r2, 8007a8a <_vfiprintf_r+0x86>
 8007a86:	2a25      	cmp	r2, #37	@ 0x25
 8007a88:	d1f9      	bne.n	8007a7e <_vfiprintf_r+0x7a>
 8007a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8e:	d00b      	beq.n	8007aa8 <_vfiprintf_r+0xa4>
 8007a90:	465b      	mov	r3, fp
 8007a92:	4622      	mov	r2, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ffa1 	bl	80079de <__sfputs_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f000 80a7 	beq.w	8007bf0 <_vfiprintf_r+0x1ec>
 8007aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa4:	445a      	add	r2, fp
 8007aa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 809f 	beq.w	8007bf0 <_vfiprintf_r+0x1ec>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007abc:	f10a 0a01 	add.w	sl, sl, #1
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ac8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aca:	4654      	mov	r4, sl
 8007acc:	2205      	movs	r2, #5
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4853      	ldr	r0, [pc, #332]	@ (8007c20 <_vfiprintf_r+0x21c>)
 8007ad4:	f7fe fc8f 	bl	80063f6 <memchr>
 8007ad8:	9a04      	ldr	r2, [sp, #16]
 8007ada:	b9d8      	cbnz	r0, 8007b14 <_vfiprintf_r+0x110>
 8007adc:	06d1      	lsls	r1, r2, #27
 8007ade:	bf44      	itt	mi
 8007ae0:	2320      	movmi	r3, #32
 8007ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ae6:	0713      	lsls	r3, r2, #28
 8007ae8:	bf44      	itt	mi
 8007aea:	232b      	movmi	r3, #43	@ 0x2b
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af0:	f89a 3000 	ldrb.w	r3, [sl]
 8007af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007af6:	d015      	beq.n	8007b24 <_vfiprintf_r+0x120>
 8007af8:	4654      	mov	r4, sl
 8007afa:	2000      	movs	r0, #0
 8007afc:	f04f 0c0a 	mov.w	ip, #10
 8007b00:	9a07      	ldr	r2, [sp, #28]
 8007b02:	4621      	mov	r1, r4
 8007b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b08:	3b30      	subs	r3, #48	@ 0x30
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d94b      	bls.n	8007ba6 <_vfiprintf_r+0x1a2>
 8007b0e:	b1b0      	cbz	r0, 8007b3e <_vfiprintf_r+0x13a>
 8007b10:	9207      	str	r2, [sp, #28]
 8007b12:	e014      	b.n	8007b3e <_vfiprintf_r+0x13a>
 8007b14:	eba0 0308 	sub.w	r3, r0, r8
 8007b18:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	46a2      	mov	sl, r4
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	e7d2      	b.n	8007aca <_vfiprintf_r+0xc6>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d19      	adds	r1, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbb      	ittet	lt
 8007b30:	425b      	neglt	r3, r3
 8007b32:	f042 0202 	orrlt.w	r2, r2, #2
 8007b36:	9307      	strge	r3, [sp, #28]
 8007b38:	9307      	strlt	r3, [sp, #28]
 8007b3a:	bfb8      	it	lt
 8007b3c:	9204      	strlt	r2, [sp, #16]
 8007b3e:	7823      	ldrb	r3, [r4, #0]
 8007b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b42:	d10a      	bne.n	8007b5a <_vfiprintf_r+0x156>
 8007b44:	7863      	ldrb	r3, [r4, #1]
 8007b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b48:	d132      	bne.n	8007bb0 <_vfiprintf_r+0x1ac>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	3402      	adds	r4, #2
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	9203      	str	r2, [sp, #12]
 8007b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007c24 <_vfiprintf_r+0x220>
 8007b5e:	2203      	movs	r2, #3
 8007b60:	4650      	mov	r0, sl
 8007b62:	7821      	ldrb	r1, [r4, #0]
 8007b64:	f7fe fc47 	bl	80063f6 <memchr>
 8007b68:	b138      	cbz	r0, 8007b7a <_vfiprintf_r+0x176>
 8007b6a:	2240      	movs	r2, #64	@ 0x40
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	eba0 000a 	sub.w	r0, r0, sl
 8007b72:	4082      	lsls	r2, r0
 8007b74:	4313      	orrs	r3, r2
 8007b76:	3401      	adds	r4, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7e:	2206      	movs	r2, #6
 8007b80:	4829      	ldr	r0, [pc, #164]	@ (8007c28 <_vfiprintf_r+0x224>)
 8007b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b86:	f7fe fc36 	bl	80063f6 <memchr>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d03f      	beq.n	8007c0e <_vfiprintf_r+0x20a>
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <_vfiprintf_r+0x228>)
 8007b90:	bb1b      	cbnz	r3, 8007bda <_vfiprintf_r+0x1d6>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	3307      	adds	r3, #7
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba0:	443b      	add	r3, r7
 8007ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ba4:	e76a      	b.n	8007a7c <_vfiprintf_r+0x78>
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	2001      	movs	r0, #1
 8007baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bae:	e7a8      	b.n	8007b02 <_vfiprintf_r+0xfe>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f04f 0c0a 	mov.w	ip, #10
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	3401      	adds	r4, #1
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc2:	3a30      	subs	r2, #48	@ 0x30
 8007bc4:	2a09      	cmp	r2, #9
 8007bc6:	d903      	bls.n	8007bd0 <_vfiprintf_r+0x1cc>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0c6      	beq.n	8007b5a <_vfiprintf_r+0x156>
 8007bcc:	9105      	str	r1, [sp, #20]
 8007bce:	e7c4      	b.n	8007b5a <_vfiprintf_r+0x156>
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bd8:	e7f0      	b.n	8007bbc <_vfiprintf_r+0x1b8>
 8007bda:	ab03      	add	r3, sp, #12
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	462a      	mov	r2, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	4b13      	ldr	r3, [pc, #76]	@ (8007c30 <_vfiprintf_r+0x22c>)
 8007be4:	a904      	add	r1, sp, #16
 8007be6:	f7fd fdbf 	bl	8005768 <_printf_float>
 8007bea:	4607      	mov	r7, r0
 8007bec:	1c78      	adds	r0, r7, #1
 8007bee:	d1d6      	bne.n	8007b9e <_vfiprintf_r+0x19a>
 8007bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	d405      	bmi.n	8007c02 <_vfiprintf_r+0x1fe>
 8007bf6:	89ab      	ldrh	r3, [r5, #12]
 8007bf8:	059a      	lsls	r2, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_vfiprintf_r+0x1fe>
 8007bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bfe:	f7fe fbf9 	bl	80063f4 <__retarget_lock_release_recursive>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	065b      	lsls	r3, r3, #25
 8007c06:	f53f af1f 	bmi.w	8007a48 <_vfiprintf_r+0x44>
 8007c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c0c:	e71e      	b.n	8007a4c <_vfiprintf_r+0x48>
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	462a      	mov	r2, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <_vfiprintf_r+0x22c>)
 8007c18:	a904      	add	r1, sp, #16
 8007c1a:	f7fe f843 	bl	8005ca4 <_printf_i>
 8007c1e:	e7e4      	b.n	8007bea <_vfiprintf_r+0x1e6>
 8007c20:	08008a28 	.word	0x08008a28
 8007c24:	08008a2e 	.word	0x08008a2e
 8007c28:	08008a32 	.word	0x08008a32
 8007c2c:	08005769 	.word	0x08005769
 8007c30:	080079df 	.word	0x080079df

08007c34 <__sflush_r>:
 8007c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	0716      	lsls	r6, r2, #28
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	d454      	bmi.n	8007cec <__sflush_r+0xb8>
 8007c42:	684b      	ldr	r3, [r1, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc02      	bgt.n	8007c4e <__sflush_r+0x1a>
 8007c48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dd48      	ble.n	8007ce0 <__sflush_r+0xac>
 8007c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	d045      	beq.n	8007ce0 <__sflush_r+0xac>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c5a:	682f      	ldr	r7, [r5, #0]
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	d030      	beq.n	8007cc4 <__sflush_r+0x90>
 8007c62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	0759      	lsls	r1, r3, #29
 8007c68:	d505      	bpl.n	8007c76 <__sflush_r+0x42>
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c70:	b10b      	cbz	r3, 8007c76 <__sflush_r+0x42>
 8007c72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c74:	1ad2      	subs	r2, r2, r3
 8007c76:	2300      	movs	r3, #0
 8007c78:	4628      	mov	r0, r5
 8007c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	47b0      	blx	r6
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	d106      	bne.n	8007c94 <__sflush_r+0x60>
 8007c86:	6829      	ldr	r1, [r5, #0]
 8007c88:	291d      	cmp	r1, #29
 8007c8a:	d82b      	bhi.n	8007ce4 <__sflush_r+0xb0>
 8007c8c:	4a28      	ldr	r2, [pc, #160]	@ (8007d30 <__sflush_r+0xfc>)
 8007c8e:	410a      	asrs	r2, r1
 8007c90:	07d6      	lsls	r6, r2, #31
 8007c92:	d427      	bmi.n	8007ce4 <__sflush_r+0xb0>
 8007c94:	2200      	movs	r2, #0
 8007c96:	6062      	str	r2, [r4, #4]
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	04d9      	lsls	r1, r3, #19
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	d504      	bpl.n	8007caa <__sflush_r+0x76>
 8007ca0:	1c42      	adds	r2, r0, #1
 8007ca2:	d101      	bne.n	8007ca8 <__sflush_r+0x74>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b903      	cbnz	r3, 8007caa <__sflush_r+0x76>
 8007ca8:	6560      	str	r0, [r4, #84]	@ 0x54
 8007caa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cac:	602f      	str	r7, [r5, #0]
 8007cae:	b1b9      	cbz	r1, 8007ce0 <__sflush_r+0xac>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__sflush_r+0x8a>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7ff f9fd 	bl	80070b8 <_free_r>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cc2:	e00d      	b.n	8007ce0 <__sflush_r+0xac>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b0      	blx	r6
 8007cca:	4602      	mov	r2, r0
 8007ccc:	1c50      	adds	r0, r2, #1
 8007cce:	d1c9      	bne.n	8007c64 <__sflush_r+0x30>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c6      	beq.n	8007c64 <__sflush_r+0x30>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xaa>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d11d      	bne.n	8007d1a <__sflush_r+0xe6>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e021      	b.n	8007d28 <__sflush_r+0xf4>
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce8:	b21b      	sxth	r3, r3
 8007cea:	e01a      	b.n	8007d22 <__sflush_r+0xee>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0f6      	beq.n	8007ce0 <__sflush_r+0xac>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	bf18      	it	ne
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	680e      	ldr	r6, [r1, #0]
 8007cfa:	bf08      	it	eq
 8007cfc:	694b      	ldreq	r3, [r1, #20]
 8007cfe:	1bf6      	subs	r6, r6, r7
 8007d00:	600f      	str	r7, [r1, #0]
 8007d02:	608b      	str	r3, [r1, #8]
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	ddeb      	ble.n	8007ce0 <__sflush_r+0xac>
 8007d08:	4633      	mov	r3, r6
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	6a21      	ldr	r1, [r4, #32]
 8007d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007d14:	47e0      	blx	ip
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dc07      	bgt.n	8007d2a <__sflush_r+0xf6>
 8007d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d22:	f04f 30ff 	mov.w	r0, #4294967295
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2a:	4407      	add	r7, r0
 8007d2c:	1a36      	subs	r6, r6, r0
 8007d2e:	e7e9      	b.n	8007d04 <__sflush_r+0xd0>
 8007d30:	dfbffffe 	.word	0xdfbffffe

08007d34 <_fflush_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	b913      	cbnz	r3, 8007d44 <_fflush_r+0x10>
 8007d3e:	2500      	movs	r5, #0
 8007d40:	4628      	mov	r0, r5
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	b118      	cbz	r0, 8007d4e <_fflush_r+0x1a>
 8007d46:	6a03      	ldr	r3, [r0, #32]
 8007d48:	b90b      	cbnz	r3, 8007d4e <_fflush_r+0x1a>
 8007d4a:	f7fe f957 	bl	8005ffc <__sinit>
 8007d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f3      	beq.n	8007d3e <_fflush_r+0xa>
 8007d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d58:	07d0      	lsls	r0, r2, #31
 8007d5a:	d404      	bmi.n	8007d66 <_fflush_r+0x32>
 8007d5c:	0599      	lsls	r1, r3, #22
 8007d5e:	d402      	bmi.n	8007d66 <_fflush_r+0x32>
 8007d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d62:	f7fe fb46 	bl	80063f2 <__retarget_lock_acquire_recursive>
 8007d66:	4628      	mov	r0, r5
 8007d68:	4621      	mov	r1, r4
 8007d6a:	f7ff ff63 	bl	8007c34 <__sflush_r>
 8007d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d70:	4605      	mov	r5, r0
 8007d72:	07da      	lsls	r2, r3, #31
 8007d74:	d4e4      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	059b      	lsls	r3, r3, #22
 8007d7a:	d4e1      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d7e:	f7fe fb39 	bl	80063f4 <__retarget_lock_release_recursive>
 8007d82:	e7dd      	b.n	8007d40 <_fflush_r+0xc>

08007d84 <__swhatbuf_r>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	4615      	mov	r5, r2
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	461e      	mov	r6, r3
 8007d92:	b096      	sub	sp, #88	@ 0x58
 8007d94:	da0c      	bge.n	8007db0 <__swhatbuf_r+0x2c>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d9e:	bf14      	ite	ne
 8007da0:	2340      	movne	r3, #64	@ 0x40
 8007da2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007da6:	2000      	movs	r0, #0
 8007da8:	6031      	str	r1, [r6, #0]
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	b016      	add	sp, #88	@ 0x58
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	466a      	mov	r2, sp
 8007db2:	f000 f849 	bl	8007e48 <_fstat_r>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	dbed      	blt.n	8007d96 <__swhatbuf_r+0x12>
 8007dba:	9901      	ldr	r1, [sp, #4]
 8007dbc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007dc0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007dc4:	4259      	negs	r1, r3
 8007dc6:	4159      	adcs	r1, r3
 8007dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dcc:	e7eb      	b.n	8007da6 <__swhatbuf_r+0x22>

08007dce <__smakebuf_r>:
 8007dce:	898b      	ldrh	r3, [r1, #12]
 8007dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dd2:	079d      	lsls	r5, r3, #30
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	d507      	bpl.n	8007dea <__smakebuf_r+0x1c>
 8007dda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	2301      	movs	r3, #1
 8007de4:	6163      	str	r3, [r4, #20]
 8007de6:	b003      	add	sp, #12
 8007de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dea:	466a      	mov	r2, sp
 8007dec:	ab01      	add	r3, sp, #4
 8007dee:	f7ff ffc9 	bl	8007d84 <__swhatbuf_r>
 8007df2:	9f00      	ldr	r7, [sp, #0]
 8007df4:	4605      	mov	r5, r0
 8007df6:	4639      	mov	r1, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff f9cf 	bl	800719c <_malloc_r>
 8007dfe:	b948      	cbnz	r0, 8007e14 <__smakebuf_r+0x46>
 8007e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e04:	059a      	lsls	r2, r3, #22
 8007e06:	d4ee      	bmi.n	8007de6 <__smakebuf_r+0x18>
 8007e08:	f023 0303 	bic.w	r3, r3, #3
 8007e0c:	f043 0302 	orr.w	r3, r3, #2
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	e7e2      	b.n	8007dda <__smakebuf_r+0xc>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	6020      	str	r0, [r4, #0]
 8007e24:	b15b      	cbz	r3, 8007e3e <__smakebuf_r+0x70>
 8007e26:	4630      	mov	r0, r6
 8007e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e2c:	f000 f81e 	bl	8007e6c <_isatty_r>
 8007e30:	b128      	cbz	r0, 8007e3e <__smakebuf_r+0x70>
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f023 0303 	bic.w	r3, r3, #3
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	431d      	orrs	r5, r3
 8007e42:	81a5      	strh	r5, [r4, #12]
 8007e44:	e7cf      	b.n	8007de6 <__smakebuf_r+0x18>
	...

08007e48 <_fstat_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4d06      	ldr	r5, [pc, #24]	@ (8007e68 <_fstat_r+0x20>)
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	602b      	str	r3, [r5, #0]
 8007e56:	f7fa fead 	bl	8002bb4 <_fstat>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d102      	bne.n	8007e64 <_fstat_r+0x1c>
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	b103      	cbz	r3, 8007e64 <_fstat_r+0x1c>
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	bd38      	pop	{r3, r4, r5, pc}
 8007e66:	bf00      	nop
 8007e68:	2000053c 	.word	0x2000053c

08007e6c <_isatty_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4d05      	ldr	r5, [pc, #20]	@ (8007e88 <_isatty_r+0x1c>)
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7fa feab 	bl	8002bd2 <_isatty>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_isatty_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_isatty_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	2000053c 	.word	0x2000053c

08007e8c <_sbrk_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4d05      	ldr	r5, [pc, #20]	@ (8007ea8 <_sbrk_r+0x1c>)
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7fa feb2 	bl	8002c00 <_sbrk>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_sbrk_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_sbrk_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	2000053c 	.word	0x2000053c

08007eac <memcpy>:
 8007eac:	440a      	add	r2, r1
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb4:	d100      	bne.n	8007eb8 <memcpy+0xc>
 8007eb6:	4770      	bx	lr
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ebe:	4291      	cmp	r1, r2
 8007ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec4:	d1f9      	bne.n	8007eba <memcpy+0xe>
 8007ec6:	bd10      	pop	{r4, pc}

08007ec8 <__assert_func>:
 8007ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eca:	4614      	mov	r4, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <__assert_func+0x2c>)
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68d8      	ldr	r0, [r3, #12]
 8007ed6:	b954      	cbnz	r4, 8007eee <__assert_func+0x26>
 8007ed8:	4b07      	ldr	r3, [pc, #28]	@ (8007ef8 <__assert_func+0x30>)
 8007eda:	461c      	mov	r4, r3
 8007edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ee0:	9100      	str	r1, [sp, #0]
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	4905      	ldr	r1, [pc, #20]	@ (8007efc <__assert_func+0x34>)
 8007ee6:	f000 f841 	bl	8007f6c <fiprintf>
 8007eea:	f000 f851 	bl	8007f90 <abort>
 8007eee:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <__assert_func+0x38>)
 8007ef0:	e7f4      	b.n	8007edc <__assert_func+0x14>
 8007ef2:	bf00      	nop
 8007ef4:	20000018 	.word	0x20000018
 8007ef8:	08008a7e 	.word	0x08008a7e
 8007efc:	08008a50 	.word	0x08008a50
 8007f00:	08008a43 	.word	0x08008a43

08007f04 <_calloc_r>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	fba1 5402 	umull	r5, r4, r1, r2
 8007f0a:	b93c      	cbnz	r4, 8007f1c <_calloc_r+0x18>
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7ff f945 	bl	800719c <_malloc_r>
 8007f12:	4606      	mov	r6, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <_calloc_r+0x1e>
 8007f16:	2600      	movs	r6, #0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	220c      	movs	r2, #12
 8007f1e:	6002      	str	r2, [r0, #0]
 8007f20:	e7f9      	b.n	8007f16 <_calloc_r+0x12>
 8007f22:	462a      	mov	r2, r5
 8007f24:	4621      	mov	r1, r4
 8007f26:	f7fe f9e7 	bl	80062f8 <memset>
 8007f2a:	e7f5      	b.n	8007f18 <_calloc_r+0x14>

08007f2c <__ascii_mbtowc>:
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	b901      	cbnz	r1, 8007f32 <__ascii_mbtowc+0x6>
 8007f30:	a901      	add	r1, sp, #4
 8007f32:	b142      	cbz	r2, 8007f46 <__ascii_mbtowc+0x1a>
 8007f34:	b14b      	cbz	r3, 8007f4a <__ascii_mbtowc+0x1e>
 8007f36:	7813      	ldrb	r3, [r2, #0]
 8007f38:	600b      	str	r3, [r1, #0]
 8007f3a:	7812      	ldrb	r2, [r2, #0]
 8007f3c:	1e10      	subs	r0, r2, #0
 8007f3e:	bf18      	it	ne
 8007f40:	2001      	movne	r0, #1
 8007f42:	b002      	add	sp, #8
 8007f44:	4770      	bx	lr
 8007f46:	4610      	mov	r0, r2
 8007f48:	e7fb      	b.n	8007f42 <__ascii_mbtowc+0x16>
 8007f4a:	f06f 0001 	mvn.w	r0, #1
 8007f4e:	e7f8      	b.n	8007f42 <__ascii_mbtowc+0x16>

08007f50 <__ascii_wctomb>:
 8007f50:	4603      	mov	r3, r0
 8007f52:	4608      	mov	r0, r1
 8007f54:	b141      	cbz	r1, 8007f68 <__ascii_wctomb+0x18>
 8007f56:	2aff      	cmp	r2, #255	@ 0xff
 8007f58:	d904      	bls.n	8007f64 <__ascii_wctomb+0x14>
 8007f5a:	228a      	movs	r2, #138	@ 0x8a
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	4770      	bx	lr
 8007f64:	2001      	movs	r0, #1
 8007f66:	700a      	strb	r2, [r1, #0]
 8007f68:	4770      	bx	lr
	...

08007f6c <fiprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b503      	push	{r0, r1, lr}
 8007f70:	4601      	mov	r1, r0
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <fiprintf+0x20>)
 8007f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f7ff fd41 	bl	8007a04 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000018 	.word	0x20000018

08007f90 <abort>:
 8007f90:	2006      	movs	r0, #6
 8007f92:	b508      	push	{r3, lr}
 8007f94:	f000 f82c 	bl	8007ff0 <raise>
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7fa fdbc 	bl	8002b16 <_exit>

08007f9e <_raise_r>:
 8007f9e:	291f      	cmp	r1, #31
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	d904      	bls.n	8007fb2 <_raise_r+0x14>
 8007fa8:	2316      	movs	r3, #22
 8007faa:	6003      	str	r3, [r0, #0]
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fb4:	b112      	cbz	r2, 8007fbc <_raise_r+0x1e>
 8007fb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fba:	b94b      	cbnz	r3, 8007fd0 <_raise_r+0x32>
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 f831 	bl	8008024 <_getpid_r>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fcc:	f000 b818 	b.w	8008000 <_kill_r>
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d00a      	beq.n	8007fea <_raise_r+0x4c>
 8007fd4:	1c59      	adds	r1, r3, #1
 8007fd6:	d103      	bne.n	8007fe0 <_raise_r+0x42>
 8007fd8:	2316      	movs	r3, #22
 8007fda:	6003      	str	r3, [r0, #0]
 8007fdc:	2001      	movs	r0, #1
 8007fde:	e7e7      	b.n	8007fb0 <_raise_r+0x12>
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fe8:	4798      	blx	r3
 8007fea:	2000      	movs	r0, #0
 8007fec:	e7e0      	b.n	8007fb0 <_raise_r+0x12>
	...

08007ff0 <raise>:
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <raise+0xc>)
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	f7ff bfd2 	b.w	8007f9e <_raise_r>
 8007ffa:	bf00      	nop
 8007ffc:	20000018 	.word	0x20000018

08008000 <_kill_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	2300      	movs	r3, #0
 8008004:	4d06      	ldr	r5, [pc, #24]	@ (8008020 <_kill_r+0x20>)
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f7fa fd72 	bl	8002af6 <_kill>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d102      	bne.n	800801c <_kill_r+0x1c>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b103      	cbz	r3, 800801c <_kill_r+0x1c>
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	bf00      	nop
 8008020:	2000053c 	.word	0x2000053c

08008024 <_getpid_r>:
 8008024:	f7fa bd60 	b.w	8002ae8 <_getpid>

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
